
D:\TrueSTUDIOWorkSpace\STM32F407-DISCOVERY_UCOS_II\Micrium\Examples\ST\STM3240G-EVAL\OS2\TrueSTUDIO\Debug\OS2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000714c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  080072e0  080072e0  000172e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800778c  0800778c  0001778c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007794  08007794  00017794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007798  08007798  00017798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000540  20000000  0800779c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020540  2**0
                  CONTENTS
  8 .bss          00003700  20000540  20000540  00020540  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  20003c40  20003c40  00020540  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020540  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001250e  00000000  00000000  00020570  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002fb4  00000000  00000000  00032a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000aa0c  00000000  00000000  00035a32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f28  00000000  00000000  00040440  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc0  00000000  00000000  00041368  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000678f  00000000  00000000  00042128  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004874  00000000  00000000  000488b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007e  00000000  00000000  0004d12b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002ea8  00000000  00000000  0004d1ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000540 	.word	0x20000540
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080072c4 	.word	0x080072c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000544 	.word	0x20000544
 80001cc:	080072c4 	.word	0x080072c4

080001d0 <CPU_IntDis>:
@              void  CPU_IntEn (void);
@********************************************************************************************************

.thumb_func
CPU_IntDis:
        CPSID   I
 80001d0:	b672      	cpsid	i
        BX      LR
 80001d2:	4770      	bx	lr

080001d4 <CPU_IntEn>:

.thumb_func
CPU_IntEn:
        CPSIE   I
 80001d4:	b662      	cpsie	i
        BX      LR
 80001d6:	4770      	bx	lr

080001d8 <CPU_SR_Save>:
@                       }
@********************************************************************************************************

.thumb_func
CPU_SR_Save:
        MRS     R0, PRIMASK                     @ Set prio int mask to mask all (except faults)
 80001d8:	f3ef 8010 	mrs	r0, PRIMASK
        CPSID   I
 80001dc:	b672      	cpsid	i
        BX      LR
 80001de:	4770      	bx	lr

080001e0 <CPU_SR_Restore>:

.thumb_func
CPU_SR_Restore:                                  @ See Note #2.
        MSR     PRIMASK, R0
 80001e0:	f380 8810 	msr	PRIMASK, r0
        BX      LR
 80001e4:	4770      	bx	lr

080001e6 <CPU_WaitForInt>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForInt:
        WFI                                     @ Wait for interrupt
 80001e6:	bf30      	wfi
        BX      LR
 80001e8:	4770      	bx	lr

080001ea <CPU_WaitForExcept>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForExcept:
        WFE                                     @ Wait for exception
 80001ea:	bf20      	wfe
        BX      LR
 80001ec:	4770      	bx	lr

080001ee <CPU_CntLeadZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntLeadZeros:
        CLZ     R0, R0                          @ Count leading zeros
 80001ee:	fab0 f080 	clz	r0, r0
        BX      LR
 80001f2:	4770      	bx	lr

080001f4 <CPU_CntTrailZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntTrailZeros:
        RBIT    R0, R0                          @ Reverse bits
 80001f4:	fa90 f0a0 	rbit	r0, r0
        CLZ     R0, R0                          @ Count trailing zeros
 80001f8:	fab0 f080 	clz	r0, r0
        BX      LR
 80001fc:	4770      	bx	lr

080001fe <CPU_RevBits>:
@                       'val's final bit  N       =  'val's original bit  0
@********************************************************************************************************

.thumb_func
CPU_RevBits:
        RBIT    R0, R0                          @ Reverse bits
 80001fe:	fa90 f0a0 	rbit	r0, r0
        BX      LR
 8000202:	4770      	bx	lr

08000204 <OS_CPU_FP_Reg_Push>:
@              d) Update OSTCBCurPtr->StkPtr;
@********************************************************************************************************

#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
OS_CPU_FP_Reg_Push:
    MRS     R1, PSP                                             @ PSP is process stack pointer
 8000204:	f3ef 8109 	mrs	r1, PSP
    CBZ     R1, OS_CPU_FP_nosave                                @ Skip FP register save the first time
 8000208:	b141      	cbz	r1, 800021c <OS_CPU_FP_nosave>

    VMRS    R1, FPSCR
 800020a:	eef1 1a10 	vmrs	r1, fpscr
    STR R1, [R0, #-4]!
 800020e:	f840 1d04 	str.w	r1, [r0, #-4]!
    VSTMDB  R0!, {S0-S31}
 8000212:	ed20 0a20 	vstmdb	r0!, {s0-s31}
    LDR     R1, =OSTCBCur
 8000216:	4929      	ldr	r1, [pc, #164]	; (80002bc <OS_CPU_PendSVHandler_nosave+0x30>)
    LDR     R2, [R1]
 8000218:	680a      	ldr	r2, [r1, #0]
    STR     R0, [R2]
 800021a:	6010      	str	r0, [r2, #0]

0800021c <OS_CPU_FP_nosave>:
OS_CPU_FP_nosave:
    BX      LR
 800021c:	4770      	bx	lr

0800021e <OS_CPU_FP_Reg_Pop>:
@              c) Update OSTCBHighRdyPtr->StkPtr pointer of new proces stack;
@********************************************************************************************************

#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
OS_CPU_FP_Reg_Pop:
    VLDMIA  R0!, {S0-S31}
 800021e:	ecb0 0a20 	vldmia	r0!, {s0-s31}
    LDMIA   R0!, {R1}
 8000222:	c802      	ldmia	r0!, {r1}
    VMSR    FPSCR, R1
 8000224:	eee1 1a10 	vmsr	fpscr, r1
    LDR     R1, =OSTCBHighRdy
 8000228:	4925      	ldr	r1, [pc, #148]	; (80002c0 <OS_CPU_PendSVHandler_nosave+0x34>)
    LDR     R2, [R1]
 800022a:	680a      	ldr	r2, [r1, #0]
    STR     R0, [R2]
 800022c:	6010      	str	r0, [r2, #0]
    BX      LR
 800022e:	4770      	bx	lr

08000230 <OS_CPU_SR_Save>:
@                 }
@********************************************************************************************************

.thumb_func
OS_CPU_SR_Save:
    MRS     R0, PRIMASK                                         @ Set prio int mask to mask all (except faults)
 8000230:	f3ef 8010 	mrs	r0, PRIMASK
    CPSID   I
 8000234:	b672      	cpsid	i
    BX      LR
 8000236:	4770      	bx	lr

08000238 <OS_CPU_SR_Restore>:

.thumb_func
OS_CPU_SR_Restore:
    MSR     PRIMASK, R0
 8000238:	f380 8810 	msr	PRIMASK, r0
    BX      LR
 800023c:	4770      	bx	lr

0800023e <OSStartHighRdy>:
@              f) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************

.thumb_func
OSStartHighRdy:
    LDR     R0, =NVIC_SYSPRI14                                  @ Set the PendSV exception priority
 800023e:	4821      	ldr	r0, [pc, #132]	; (80002c4 <OS_CPU_PendSVHandler_nosave+0x38>)
    LDR     R1, =NVIC_PENDSV_PRI
 8000240:	21ff      	movs	r1, #255	; 0xff
    STRB    R1, [R0]
 8000242:	7001      	strb	r1, [r0, #0]

    MOVS    R0, #0                                              @ Set the PSP to 0 for initial context switch call
 8000244:	2000      	movs	r0, #0
    MSR     PSP, R0
 8000246:	f380 8809 	msr	PSP, r0

    LDR     R0, =OS_CPU_ExceptStkBase                           @ Initialize the MSP to the OS_CPU_ExceptStkBase
 800024a:	481f      	ldr	r0, [pc, #124]	; (80002c8 <OS_CPU_PendSVHandler_nosave+0x3c>)
    LDR     R1, [R0]
 800024c:	6801      	ldr	r1, [r0, #0]
    MSR     MSP, R1    
 800024e:	f381 8808 	msr	MSP, r1

    LDR     R0, =OSRunning                                      @ OSRunning = TRUE
 8000252:	481e      	ldr	r0, [pc, #120]	; (80002cc <OS_CPU_PendSVHandler_nosave+0x40>)
    MOVS    R1, #1
 8000254:	2101      	movs	r1, #1
    STRB    R1, [R0]
 8000256:	7001      	strb	r1, [r0, #0]

    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 8000258:	481d      	ldr	r0, [pc, #116]	; (80002d0 <OS_CPU_PendSVHandler_nosave+0x44>)
    LDR     R1, =NVIC_PENDSVSET
 800025a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 800025e:	6001      	str	r1, [r0, #0]

    CPSIE   I                                                   @ Enable interrupts at processor level
 8000260:	b662      	cpsie	i

08000262 <OSStartHang>:

OSStartHang:
    B       OSStartHang                                         @ Should never get here
 8000262:	e7fe      	b.n	8000262 <OSStartHang>

08000264 <OSCtxSw>:
@              triggers the PendSV exception which is where the real work is done.
@********************************************************************************************************

.thumb_func
OSCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 8000264:	481a      	ldr	r0, [pc, #104]	; (80002d0 <OS_CPU_PendSVHandler_nosave+0x44>)
    LDR     R1, =NVIC_PENDSVSET
 8000266:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 800026a:	6001      	str	r1, [r0, #0]
    BX      LR
 800026c:	4770      	bx	lr

0800026e <OSIntCtxSw>:
@              be handled when there are no more interrupts active and interrupts are enabled.
@********************************************************************************************************

.thumb_func
OSIntCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 800026e:	4818      	ldr	r0, [pc, #96]	; (80002d0 <OS_CPU_PendSVHandler_nosave+0x44>)
    LDR     R1, =NVIC_PENDSVSET
 8000270:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 8000274:	6001      	str	r1, [r0, #0]
    BX      LR
 8000276:	4770      	bx	lr

08000278 <OS_CPU_PendSVHandler>:
@              therefore safe to assume that context being switched out was using the process stack (PSP).
@********************************************************************************************************

.thumb_func
OS_CPU_PendSVHandler:
    CPSID   I                                                   @ Prevent interruption during context switch
 8000278:	b672      	cpsid	i
    MRS     R0, PSP                                             @ PSP is process stack pointer
 800027a:	f3ef 8009 	mrs	r0, PSP
    CBZ     R0, OS_CPU_PendSVHandler_nosave                     @ Skip register save the first time
 800027e:	b128      	cbz	r0, 800028c <OS_CPU_PendSVHandler_nosave>

    SUBS    R0, R0, #0x20                                       @ Save remaining regs r4-11 on process stack
 8000280:	3820      	subs	r0, #32
    STM     R0, {R4-R11}
 8000282:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}

    LDR     R1, =OSTCBCur                                       @ OSTCBCur->OSTCBStkPtr = SP;
 8000286:	490d      	ldr	r1, [pc, #52]	; (80002bc <OS_CPU_PendSVHandler_nosave+0x30>)
    LDR     R1, [R1]
 8000288:	6809      	ldr	r1, [r1, #0]
    STR     R0, [R1]                                            @ R0 is SP of process being switched out
 800028a:	6008      	str	r0, [r1, #0]

0800028c <OS_CPU_PendSVHandler_nosave>:

                                                                @ At this point, entire context of process has been saved
OS_CPU_PendSVHandler_nosave:
    PUSH    {R14}                                               @ Save LR exc_return value
 800028c:	b500      	push	{lr}
    LDR     R0, =OSTaskSwHook                                   @ OSTaskSwHook();
 800028e:	4811      	ldr	r0, [pc, #68]	; (80002d4 <OS_CPU_PendSVHandler_nosave+0x48>)
    BLX     R0
 8000290:	4780      	blx	r0
    POP     {R14}
 8000292:	f85d eb04 	ldr.w	lr, [sp], #4

    LDR     R0, =OSPrioCur                                      @ OSPrioCur = OSPrioHighRdy;
 8000296:	4810      	ldr	r0, [pc, #64]	; (80002d8 <OS_CPU_PendSVHandler_nosave+0x4c>)
    LDR     R1, =OSPrioHighRdy
 8000298:	4910      	ldr	r1, [pc, #64]	; (80002dc <OS_CPU_PendSVHandler_nosave+0x50>)
    LDRB    R2, [R1]
 800029a:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 800029c:	7002      	strb	r2, [r0, #0]

    LDR     R0, =OSTCBCur                                       @ OSTCBCur  = OSTCBHighRdy;
 800029e:	4807      	ldr	r0, [pc, #28]	; (80002bc <OS_CPU_PendSVHandler_nosave+0x30>)
    LDR     R1, =OSTCBHighRdy
 80002a0:	4907      	ldr	r1, [pc, #28]	; (80002c0 <OS_CPU_PendSVHandler_nosave+0x34>)
    LDR     R2, [R1]
 80002a2:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R0]
 80002a4:	6002      	str	r2, [r0, #0]

    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdy->OSTCBStkPtr;
 80002a6:	6810      	ldr	r0, [r2, #0]
    LDM     R0, {R4-R11}                                        @ Restore r4-11 from new process stack
 80002a8:	e890 0ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
    ADDS    R0, R0, #0x20
 80002ac:	3020      	adds	r0, #32
    MSR     PSP, R0                                             @ Load PSP with new process SP
 80002ae:	f380 8809 	msr	PSP, r0
    ORR     LR, LR, #0xF4                                       @ Ensure exception return uses process stack
 80002b2:	f04e 0ef4 	orr.w	lr, lr, #244	; 0xf4
    CPSIE   I
 80002b6:	b662      	cpsie	i
    BX      LR                                                  @ Exception return will restore remaining context
 80002b8:	4770      	bx	lr
 80002ba:	0000      	.short	0x0000
    CBZ     R1, OS_CPU_FP_nosave                                @ Skip FP register save the first time

    VMRS    R1, FPSCR
    STR R1, [R0, #-4]!
    VSTMDB  R0!, {S0-S31}
    LDR     R1, =OSTCBCur
 80002bc:	20002fb0 	.word	0x20002fb0
#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
OS_CPU_FP_Reg_Pop:
    VLDMIA  R0!, {S0-S31}
    LDMIA   R0!, {R1}
    VMSR    FPSCR, R1
    LDR     R1, =OSTCBHighRdy
 80002c0:	20002794 	.word	0x20002794
@              f) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************

.thumb_func
OSStartHighRdy:
    LDR     R0, =NVIC_SYSPRI14                                  @ Set the PendSV exception priority
 80002c4:	e000ed22 	.word	0xe000ed22
    STRB    R1, [R0]

    MOVS    R0, #0                                              @ Set the PSP to 0 for initial context switch call
    MSR     PSP, R0

    LDR     R0, =OS_CPU_ExceptStkBase                           @ Initialize the MSP to the OS_CPU_ExceptStkBase
 80002c8:	20001f74 	.word	0x20001f74
    LDR     R1, [R0]
    MSR     MSP, R1    

    LDR     R0, =OSRunning                                      @ OSRunning = TRUE
 80002cc:	200021bd 	.word	0x200021bd
    MOVS    R1, #1
    STRB    R1, [R0]

    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 80002d0:	e000ed04 	.word	0xe000ed04
    STR     R0, [R1]                                            @ R0 is SP of process being switched out

                                                                @ At this point, entire context of process has been saved
OS_CPU_PendSVHandler_nosave:
    PUSH    {R14}                                               @ Save LR exc_return value
    LDR     R0, =OSTaskSwHook                                   @ OSTaskSwHook();
 80002d4:	0800321d 	.word	0x0800321d
    BLX     R0
    POP     {R14}

    LDR     R0, =OSPrioCur                                      @ OSPrioCur = OSPrioHighRdy;
 80002d8:	20002498 	.word	0x20002498
    LDR     R1, =OSPrioHighRdy
 80002dc:	200021c6 	.word	0x200021c6

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80004ce:	f1a4 0401 	sub.w	r4, r4, #1
 80004d2:	d1e9      	bne.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f092 0f00 	teq	r2, #0
 800067a:	bf14      	ite	ne
 800067c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000680:	4770      	bxeq	lr
 8000682:	b530      	push	{r4, r5, lr}
 8000684:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000688:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800068c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000690:	e720      	b.n	80004d4 <__adddf3+0x138>
 8000692:	bf00      	nop

08000694 <__aeabi_ul2d>:
 8000694:	ea50 0201 	orrs.w	r2, r0, r1
 8000698:	bf08      	it	eq
 800069a:	4770      	bxeq	lr
 800069c:	b530      	push	{r4, r5, lr}
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	e00a      	b.n	80006ba <__aeabi_l2d+0x16>

080006a4 <__aeabi_l2d>:
 80006a4:	ea50 0201 	orrs.w	r2, r0, r1
 80006a8:	bf08      	it	eq
 80006aa:	4770      	bxeq	lr
 80006ac:	b530      	push	{r4, r5, lr}
 80006ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006b2:	d502      	bpl.n	80006ba <__aeabi_l2d+0x16>
 80006b4:	4240      	negs	r0, r0
 80006b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006c6:	f43f aedc 	beq.w	8000482 <__adddf3+0xe6>
 80006ca:	f04f 0203 	mov.w	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006e2:	f1c2 0320 	rsb	r3, r2, #32
 80006e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80006ea:	fa20 f002 	lsr.w	r0, r0, r2
 80006ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80006f2:	ea40 000e 	orr.w	r0, r0, lr
 80006f6:	fa21 f102 	lsr.w	r1, r1, r2
 80006fa:	4414      	add	r4, r2
 80006fc:	e6c1      	b.n	8000482 <__adddf3+0xe6>
 80006fe:	bf00      	nop

08000700 <__aeabi_dmul>:
 8000700:	b570      	push	{r4, r5, r6, lr}
 8000702:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000706:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800070a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800070e:	bf1d      	ittte	ne
 8000710:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000714:	ea94 0f0c 	teqne	r4, ip
 8000718:	ea95 0f0c 	teqne	r5, ip
 800071c:	f000 f8de 	bleq	80008dc <__aeabi_dmul+0x1dc>
 8000720:	442c      	add	r4, r5
 8000722:	ea81 0603 	eor.w	r6, r1, r3
 8000726:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800072a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800072e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000732:	bf18      	it	ne
 8000734:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000738:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800073c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000740:	d038      	beq.n	80007b4 <__aeabi_dmul+0xb4>
 8000742:	fba0 ce02 	umull	ip, lr, r0, r2
 8000746:	f04f 0500 	mov.w	r5, #0
 800074a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800074e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000752:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000756:	f04f 0600 	mov.w	r6, #0
 800075a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800075e:	f09c 0f00 	teq	ip, #0
 8000762:	bf18      	it	ne
 8000764:	f04e 0e01 	orrne.w	lr, lr, #1
 8000768:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800076c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000770:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000774:	d204      	bcs.n	8000780 <__aeabi_dmul+0x80>
 8000776:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800077a:	416d      	adcs	r5, r5
 800077c:	eb46 0606 	adc.w	r6, r6, r6
 8000780:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000784:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000788:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800078c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000790:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000794:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000798:	bf88      	it	hi
 800079a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800079e:	d81e      	bhi.n	80007de <__aeabi_dmul+0xde>
 80007a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007a4:	bf08      	it	eq
 80007a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007aa:	f150 0000 	adcs.w	r0, r0, #0
 80007ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007b8:	ea46 0101 	orr.w	r1, r6, r1
 80007bc:	ea40 0002 	orr.w	r0, r0, r2
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c8:	bfc2      	ittt	gt
 80007ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007d2:	bd70      	popgt	{r4, r5, r6, pc}
 80007d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007d8:	f04f 0e00 	mov.w	lr, #0
 80007dc:	3c01      	subs	r4, #1
 80007de:	f300 80ab 	bgt.w	8000938 <__aeabi_dmul+0x238>
 80007e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007e6:	bfde      	ittt	le
 80007e8:	2000      	movle	r0, #0
 80007ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007ee:	bd70      	pople	{r4, r5, r6, pc}
 80007f0:	f1c4 0400 	rsb	r4, r4, #0
 80007f4:	3c20      	subs	r4, #32
 80007f6:	da35      	bge.n	8000864 <__aeabi_dmul+0x164>
 80007f8:	340c      	adds	r4, #12
 80007fa:	dc1b      	bgt.n	8000834 <__aeabi_dmul+0x134>
 80007fc:	f104 0414 	add.w	r4, r4, #20
 8000800:	f1c4 0520 	rsb	r5, r4, #32
 8000804:	fa00 f305 	lsl.w	r3, r0, r5
 8000808:	fa20 f004 	lsr.w	r0, r0, r4
 800080c:	fa01 f205 	lsl.w	r2, r1, r5
 8000810:	ea40 0002 	orr.w	r0, r0, r2
 8000814:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000820:	fa21 f604 	lsr.w	r6, r1, r4
 8000824:	eb42 0106 	adc.w	r1, r2, r6
 8000828:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800082c:	bf08      	it	eq
 800082e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000832:	bd70      	pop	{r4, r5, r6, pc}
 8000834:	f1c4 040c 	rsb	r4, r4, #12
 8000838:	f1c4 0520 	rsb	r5, r4, #32
 800083c:	fa00 f304 	lsl.w	r3, r0, r4
 8000840:	fa20 f005 	lsr.w	r0, r0, r5
 8000844:	fa01 f204 	lsl.w	r2, r1, r4
 8000848:	ea40 0002 	orr.w	r0, r0, r2
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000850:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000854:	f141 0100 	adc.w	r1, r1, #0
 8000858:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800085c:	bf08      	it	eq
 800085e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000862:	bd70      	pop	{r4, r5, r6, pc}
 8000864:	f1c4 0520 	rsb	r5, r4, #32
 8000868:	fa00 f205 	lsl.w	r2, r0, r5
 800086c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000870:	fa20 f304 	lsr.w	r3, r0, r4
 8000874:	fa01 f205 	lsl.w	r2, r1, r5
 8000878:	ea43 0302 	orr.w	r3, r3, r2
 800087c:	fa21 f004 	lsr.w	r0, r1, r4
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	fa21 f204 	lsr.w	r2, r1, r4
 8000888:	ea20 0002 	bic.w	r0, r0, r2
 800088c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000890:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000894:	bf08      	it	eq
 8000896:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800089a:	bd70      	pop	{r4, r5, r6, pc}
 800089c:	f094 0f00 	teq	r4, #0
 80008a0:	d10f      	bne.n	80008c2 <__aeabi_dmul+0x1c2>
 80008a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008a6:	0040      	lsls	r0, r0, #1
 80008a8:	eb41 0101 	adc.w	r1, r1, r1
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	bf08      	it	eq
 80008b2:	3c01      	subeq	r4, #1
 80008b4:	d0f7      	beq.n	80008a6 <__aeabi_dmul+0x1a6>
 80008b6:	ea41 0106 	orr.w	r1, r1, r6
 80008ba:	f095 0f00 	teq	r5, #0
 80008be:	bf18      	it	ne
 80008c0:	4770      	bxne	lr
 80008c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008c6:	0052      	lsls	r2, r2, #1
 80008c8:	eb43 0303 	adc.w	r3, r3, r3
 80008cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008d0:	bf08      	it	eq
 80008d2:	3d01      	subeq	r5, #1
 80008d4:	d0f7      	beq.n	80008c6 <__aeabi_dmul+0x1c6>
 80008d6:	ea43 0306 	orr.w	r3, r3, r6
 80008da:	4770      	bx	lr
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008e4:	bf18      	it	ne
 80008e6:	ea95 0f0c 	teqne	r5, ip
 80008ea:	d00c      	beq.n	8000906 <__aeabi_dmul+0x206>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	d1d1      	bne.n	800089c <__aeabi_dmul+0x19c>
 80008f8:	ea81 0103 	eor.w	r1, r1, r3
 80008fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000900:	f04f 0000 	mov.w	r0, #0
 8000904:	bd70      	pop	{r4, r5, r6, pc}
 8000906:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800090a:	bf06      	itte	eq
 800090c:	4610      	moveq	r0, r2
 800090e:	4619      	moveq	r1, r3
 8000910:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000914:	d019      	beq.n	800094a <__aeabi_dmul+0x24a>
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	d102      	bne.n	8000922 <__aeabi_dmul+0x222>
 800091c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000920:	d113      	bne.n	800094a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	d105      	bne.n	8000934 <__aeabi_dmul+0x234>
 8000928:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800092c:	bf1c      	itt	ne
 800092e:	4610      	movne	r0, r2
 8000930:	4619      	movne	r1, r3
 8000932:	d10a      	bne.n	800094a <__aeabi_dmul+0x24a>
 8000934:	ea81 0103 	eor.w	r1, r1, r3
 8000938:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800093c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000940:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	bd70      	pop	{r4, r5, r6, pc}
 800094a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800094e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000952:	bd70      	pop	{r4, r5, r6, pc}

08000954 <__aeabi_ddiv>:
 8000954:	b570      	push	{r4, r5, r6, lr}
 8000956:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800095a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800095e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000962:	bf1d      	ittte	ne
 8000964:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000968:	ea94 0f0c 	teqne	r4, ip
 800096c:	ea95 0f0c 	teqne	r5, ip
 8000970:	f000 f8a7 	bleq	8000ac2 <__aeabi_ddiv+0x16e>
 8000974:	eba4 0405 	sub.w	r4, r4, r5
 8000978:	ea81 0e03 	eor.w	lr, r1, r3
 800097c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000980:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000984:	f000 8088 	beq.w	8000a98 <__aeabi_ddiv+0x144>
 8000988:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800098c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000990:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000994:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000998:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800099c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009ac:	429d      	cmp	r5, r3
 80009ae:	bf08      	it	eq
 80009b0:	4296      	cmpeq	r6, r2
 80009b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009ba:	d202      	bcs.n	80009c2 <__aeabi_ddiv+0x6e>
 80009bc:	085b      	lsrs	r3, r3, #1
 80009be:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c2:	1ab6      	subs	r6, r6, r2
 80009c4:	eb65 0503 	sbc.w	r5, r5, r3
 80009c8:	085b      	lsrs	r3, r3, #1
 80009ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a18:	085b      	lsrs	r3, r3, #1
 8000a1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a26:	bf22      	ittt	cs
 8000a28:	1ab6      	subcs	r6, r6, r2
 8000a2a:	4675      	movcs	r5, lr
 8000a2c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a30:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a34:	d018      	beq.n	8000a68 <__aeabi_ddiv+0x114>
 8000a36:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a3a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a3e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a42:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a46:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a4a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a4e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a52:	d1c0      	bne.n	80009d6 <__aeabi_ddiv+0x82>
 8000a54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a58:	d10b      	bne.n	8000a72 <__aeabi_ddiv+0x11e>
 8000a5a:	ea41 0100 	orr.w	r1, r1, r0
 8000a5e:	f04f 0000 	mov.w	r0, #0
 8000a62:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a66:	e7b6      	b.n	80009d6 <__aeabi_ddiv+0x82>
 8000a68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a6c:	bf04      	itt	eq
 8000a6e:	4301      	orreq	r1, r0
 8000a70:	2000      	moveq	r0, #0
 8000a72:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a76:	bf88      	it	hi
 8000a78:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a7c:	f63f aeaf 	bhi.w	80007de <__aeabi_dmul+0xde>
 8000a80:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a84:	bf04      	itt	eq
 8000a86:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a8a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a8e:	f150 0000 	adcs.w	r0, r0, #0
 8000a92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a96:	bd70      	pop	{r4, r5, r6, pc}
 8000a98:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a9c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000aa0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000aa4:	bfc2      	ittt	gt
 8000aa6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aaa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aae:	bd70      	popgt	{r4, r5, r6, pc}
 8000ab0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab4:	f04f 0e00 	mov.w	lr, #0
 8000ab8:	3c01      	subs	r4, #1
 8000aba:	e690      	b.n	80007de <__aeabi_dmul+0xde>
 8000abc:	ea45 0e06 	orr.w	lr, r5, r6
 8000ac0:	e68d      	b.n	80007de <__aeabi_dmul+0xde>
 8000ac2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ac6:	ea94 0f0c 	teq	r4, ip
 8000aca:	bf08      	it	eq
 8000acc:	ea95 0f0c 	teqeq	r5, ip
 8000ad0:	f43f af3b 	beq.w	800094a <__aeabi_dmul+0x24a>
 8000ad4:	ea94 0f0c 	teq	r4, ip
 8000ad8:	d10a      	bne.n	8000af0 <__aeabi_ddiv+0x19c>
 8000ada:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ade:	f47f af34 	bne.w	800094a <__aeabi_dmul+0x24a>
 8000ae2:	ea95 0f0c 	teq	r5, ip
 8000ae6:	f47f af25 	bne.w	8000934 <__aeabi_dmul+0x234>
 8000aea:	4610      	mov	r0, r2
 8000aec:	4619      	mov	r1, r3
 8000aee:	e72c      	b.n	800094a <__aeabi_dmul+0x24a>
 8000af0:	ea95 0f0c 	teq	r5, ip
 8000af4:	d106      	bne.n	8000b04 <__aeabi_ddiv+0x1b0>
 8000af6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000afa:	f43f aefd 	beq.w	80008f8 <__aeabi_dmul+0x1f8>
 8000afe:	4610      	mov	r0, r2
 8000b00:	4619      	mov	r1, r3
 8000b02:	e722      	b.n	800094a <__aeabi_dmul+0x24a>
 8000b04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b08:	bf18      	it	ne
 8000b0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b0e:	f47f aec5 	bne.w	800089c <__aeabi_dmul+0x19c>
 8000b12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b16:	f47f af0d 	bne.w	8000934 <__aeabi_dmul+0x234>
 8000b1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b1e:	f47f aeeb 	bne.w	80008f8 <__aeabi_dmul+0x1f8>
 8000b22:	e712      	b.n	800094a <__aeabi_dmul+0x24a>

08000b24 <__gedf2>:
 8000b24:	f04f 3cff 	mov.w	ip, #4294967295
 8000b28:	e006      	b.n	8000b38 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__ledf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	e002      	b.n	8000b38 <__cmpdf2+0x4>
 8000b32:	bf00      	nop

08000b34 <__cmpdf2>:
 8000b34:	f04f 0c01 	mov.w	ip, #1
 8000b38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	bf18      	it	ne
 8000b4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b4e:	d01b      	beq.n	8000b88 <__cmpdf2+0x54>
 8000b50:	b001      	add	sp, #4
 8000b52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b56:	bf0c      	ite	eq
 8000b58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b5c:	ea91 0f03 	teqne	r1, r3
 8000b60:	bf02      	ittt	eq
 8000b62:	ea90 0f02 	teqeq	r0, r2
 8000b66:	2000      	moveq	r0, #0
 8000b68:	4770      	bxeq	lr
 8000b6a:	f110 0f00 	cmn.w	r0, #0
 8000b6e:	ea91 0f03 	teq	r1, r3
 8000b72:	bf58      	it	pl
 8000b74:	4299      	cmppl	r1, r3
 8000b76:	bf08      	it	eq
 8000b78:	4290      	cmpeq	r0, r2
 8000b7a:	bf2c      	ite	cs
 8000b7c:	17d8      	asrcs	r0, r3, #31
 8000b7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b82:	f040 0001 	orr.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b90:	d102      	bne.n	8000b98 <__cmpdf2+0x64>
 8000b92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b96:	d107      	bne.n	8000ba8 <__cmpdf2+0x74>
 8000b98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba0:	d1d6      	bne.n	8000b50 <__cmpdf2+0x1c>
 8000ba2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ba6:	d0d3      	beq.n	8000b50 <__cmpdf2+0x1c>
 8000ba8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_cdrcmple>:
 8000bb0:	4684      	mov	ip, r0
 8000bb2:	4610      	mov	r0, r2
 8000bb4:	4662      	mov	r2, ip
 8000bb6:	468c      	mov	ip, r1
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4663      	mov	r3, ip
 8000bbc:	e000      	b.n	8000bc0 <__aeabi_cdcmpeq>
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_cdcmpeq>:
 8000bc0:	b501      	push	{r0, lr}
 8000bc2:	f7ff ffb7 	bl	8000b34 <__cmpdf2>
 8000bc6:	2800      	cmp	r0, #0
 8000bc8:	bf48      	it	mi
 8000bca:	f110 0f00 	cmnmi.w	r0, #0
 8000bce:	bd01      	pop	{r0, pc}

08000bd0 <__aeabi_dcmpeq>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff fff4 	bl	8000bc0 <__aeabi_cdcmpeq>
 8000bd8:	bf0c      	ite	eq
 8000bda:	2001      	moveq	r0, #1
 8000bdc:	2000      	movne	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_dcmplt>:
 8000be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be8:	f7ff ffea 	bl	8000bc0 <__aeabi_cdcmpeq>
 8000bec:	bf34      	ite	cc
 8000bee:	2001      	movcc	r0, #1
 8000bf0:	2000      	movcs	r0, #0
 8000bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_dcmple>:
 8000bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bfc:	f7ff ffe0 	bl	8000bc0 <__aeabi_cdcmpeq>
 8000c00:	bf94      	ite	ls
 8000c02:	2001      	movls	r0, #1
 8000c04:	2000      	movhi	r0, #0
 8000c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0a:	bf00      	nop

08000c0c <__aeabi_dcmpge>:
 8000c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c10:	f7ff ffce 	bl	8000bb0 <__aeabi_cdrcmple>
 8000c14:	bf94      	ite	ls
 8000c16:	2001      	movls	r0, #1
 8000c18:	2000      	movhi	r0, #0
 8000c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1e:	bf00      	nop

08000c20 <__aeabi_dcmpgt>:
 8000c20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c24:	f7ff ffc4 	bl	8000bb0 <__aeabi_cdrcmple>
 8000c28:	bf34      	ite	cc
 8000c2a:	2001      	movcc	r0, #1
 8000c2c:	2000      	movcs	r0, #0
 8000c2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c32:	bf00      	nop

08000c34 <__aeabi_dcmpun>:
 8000c34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c3c:	d102      	bne.n	8000c44 <__aeabi_dcmpun+0x10>
 8000c3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c42:	d10a      	bne.n	8000c5a <__aeabi_dcmpun+0x26>
 8000c44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c4c:	d102      	bne.n	8000c54 <__aeabi_dcmpun+0x20>
 8000c4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c52:	d102      	bne.n	8000c5a <__aeabi_dcmpun+0x26>
 8000c54:	f04f 0000 	mov.w	r0, #0
 8000c58:	4770      	bx	lr
 8000c5a:	f04f 0001 	mov.w	r0, #1
 8000c5e:	4770      	bx	lr

08000c60 <__aeabi_d2iz>:
 8000c60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c68:	d215      	bcs.n	8000c96 <__aeabi_d2iz+0x36>
 8000c6a:	d511      	bpl.n	8000c90 <__aeabi_d2iz+0x30>
 8000c6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c74:	d912      	bls.n	8000c9c <__aeabi_d2iz+0x3c>
 8000c76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c86:	fa23 f002 	lsr.w	r0, r3, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	4770      	bx	lr
 8000c90:	f04f 0000 	mov.w	r0, #0
 8000c94:	4770      	bx	lr
 8000c96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c9a:	d105      	bne.n	8000ca8 <__aeabi_d2iz+0x48>
 8000c9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ca0:	bf08      	it	eq
 8000ca2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ca6:	4770      	bx	lr
 8000ca8:	f04f 0000 	mov.w	r0, #0
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__aeabi_uldivmod>:
 8000cb0:	b953      	cbnz	r3, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb2:	b94a      	cbnz	r2, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	2800      	cmpeq	r0, #0
 8000cba:	bf1c      	itt	ne
 8000cbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc4:	f000 b97e 	b.w	8000fc4 <__aeabi_idiv0>
 8000cc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ccc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd0:	f000 f806 	bl	8000ce0 <__udivmoddi4>
 8000cd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cdc:	b004      	add	sp, #16
 8000cde:	4770      	bx	lr

08000ce0 <__udivmoddi4>:
 8000ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	460e      	mov	r6, r1
 8000ce8:	4604      	mov	r4, r0
 8000cea:	9d08      	ldr	r5, [sp, #32]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d150      	bne.n	8000d92 <__udivmoddi4+0xb2>
 8000cf0:	428a      	cmp	r2, r1
 8000cf2:	4617      	mov	r7, r2
 8000cf4:	d96c      	bls.n	8000dd0 <__udivmoddi4+0xf0>
 8000cf6:	fab2 fe82 	clz	lr, r2
 8000cfa:	f1be 0f00 	cmp.w	lr, #0
 8000cfe:	d00b      	beq.n	8000d18 <__udivmoddi4+0x38>
 8000d00:	f1ce 0420 	rsb	r4, lr, #32
 8000d04:	fa20 f404 	lsr.w	r4, r0, r4
 8000d08:	fa01 f60e 	lsl.w	r6, r1, lr
 8000d0c:	ea44 0c06 	orr.w	ip, r4, r6
 8000d10:	fa02 f70e 	lsl.w	r7, r2, lr
 8000d14:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d18:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	fbbc f0f9 	udiv	r0, ip, r9
 8000d22:	fa1f f887 	uxth.w	r8, r7
 8000d26:	fb09 c610 	mls	r6, r9, r0, ip
 8000d2a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000d2e:	fb00 f308 	mul.w	r3, r0, r8
 8000d32:	42b3      	cmp	r3, r6
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0x6a>
 8000d36:	19f6      	adds	r6, r6, r7
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3c:	f080 8122 	bcs.w	8000f84 <__udivmoddi4+0x2a4>
 8000d40:	42b3      	cmp	r3, r6
 8000d42:	f240 811f 	bls.w	8000f84 <__udivmoddi4+0x2a4>
 8000d46:	3802      	subs	r0, #2
 8000d48:	443e      	add	r6, r7
 8000d4a:	1af6      	subs	r6, r6, r3
 8000d4c:	b2a2      	uxth	r2, r4
 8000d4e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000d52:	fb09 6613 	mls	r6, r9, r3, r6
 8000d56:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000d5a:	fb03 f808 	mul.w	r8, r3, r8
 8000d5e:	45a0      	cmp	r8, r4
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0x96>
 8000d62:	19e4      	adds	r4, r4, r7
 8000d64:	f103 32ff 	add.w	r2, r3, #4294967295
 8000d68:	f080 810a 	bcs.w	8000f80 <__udivmoddi4+0x2a0>
 8000d6c:	45a0      	cmp	r8, r4
 8000d6e:	f240 8107 	bls.w	8000f80 <__udivmoddi4+0x2a0>
 8000d72:	3b02      	subs	r3, #2
 8000d74:	443c      	add	r4, r7
 8000d76:	ebc8 0404 	rsb	r4, r8, r4
 8000d7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d7e:	2100      	movs	r1, #0
 8000d80:	2d00      	cmp	r5, #0
 8000d82:	d062      	beq.n	8000e4a <__udivmoddi4+0x16a>
 8000d84:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d88:	2300      	movs	r3, #0
 8000d8a:	602c      	str	r4, [r5, #0]
 8000d8c:	606b      	str	r3, [r5, #4]
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0xc6>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d055      	beq.n	8000e46 <__udivmoddi4+0x166>
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000da0:	4608      	mov	r0, r1
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f183 	clz	r1, r3
 8000daa:	2900      	cmp	r1, #0
 8000dac:	f040 8090 	bne.w	8000ed0 <__udivmoddi4+0x1f0>
 8000db0:	42b3      	cmp	r3, r6
 8000db2:	d302      	bcc.n	8000dba <__udivmoddi4+0xda>
 8000db4:	4282      	cmp	r2, r0
 8000db6:	f200 80f8 	bhi.w	8000faa <__udivmoddi4+0x2ca>
 8000dba:	1a84      	subs	r4, r0, r2
 8000dbc:	eb66 0603 	sbc.w	r6, r6, r3
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	46b4      	mov	ip, r6
 8000dc4:	2d00      	cmp	r5, #0
 8000dc6:	d040      	beq.n	8000e4a <__udivmoddi4+0x16a>
 8000dc8:	e885 1010 	stmia.w	r5, {r4, ip}
 8000dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd0:	b912      	cbnz	r2, 8000dd8 <__udivmoddi4+0xf8>
 8000dd2:	2701      	movs	r7, #1
 8000dd4:	fbb7 f7f2 	udiv	r7, r7, r2
 8000dd8:	fab7 fe87 	clz	lr, r7
 8000ddc:	f1be 0f00 	cmp.w	lr, #0
 8000de0:	d135      	bne.n	8000e4e <__udivmoddi4+0x16e>
 8000de2:	1bf3      	subs	r3, r6, r7
 8000de4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000de8:	fa1f fc87 	uxth.w	ip, r7
 8000dec:	2101      	movs	r1, #1
 8000dee:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df2:	0c22      	lsrs	r2, r4, #16
 8000df4:	fb08 3610 	mls	r6, r8, r0, r3
 8000df8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000dfc:	fb0c f300 	mul.w	r3, ip, r0
 8000e00:	42b3      	cmp	r3, r6
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x134>
 8000e04:	19f6      	adds	r6, r6, r7
 8000e06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x132>
 8000e0c:	42b3      	cmp	r3, r6
 8000e0e:	f200 80ce 	bhi.w	8000fae <__udivmoddi4+0x2ce>
 8000e12:	4610      	mov	r0, r2
 8000e14:	1af6      	subs	r6, r6, r3
 8000e16:	b2a2      	uxth	r2, r4
 8000e18:	fbb6 f3f8 	udiv	r3, r6, r8
 8000e1c:	fb08 6613 	mls	r6, r8, r3, r6
 8000e20:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000e24:	fb0c fc03 	mul.w	ip, ip, r3
 8000e28:	45a4      	cmp	ip, r4
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x15c>
 8000e2c:	19e4      	adds	r4, r4, r7
 8000e2e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x15a>
 8000e34:	45a4      	cmp	ip, r4
 8000e36:	f200 80b5 	bhi.w	8000fa4 <__udivmoddi4+0x2c4>
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	ebcc 0404 	rsb	r4, ip, r4
 8000e40:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e44:	e79c      	b.n	8000d80 <__udivmoddi4+0xa0>
 8000e46:	4629      	mov	r1, r5
 8000e48:	4628      	mov	r0, r5
 8000e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4e:	f1ce 0120 	rsb	r1, lr, #32
 8000e52:	fa06 f30e 	lsl.w	r3, r6, lr
 8000e56:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e5a:	fa20 f901 	lsr.w	r9, r0, r1
 8000e5e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e62:	40ce      	lsrs	r6, r1
 8000e64:	ea49 0903 	orr.w	r9, r9, r3
 8000e68:	fbb6 faf8 	udiv	sl, r6, r8
 8000e6c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000e70:	fb08 661a 	mls	r6, r8, sl, r6
 8000e74:	fa1f fc87 	uxth.w	ip, r7
 8000e78:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000e7c:	fb0a f20c 	mul.w	r2, sl, ip
 8000e80:	429a      	cmp	r2, r3
 8000e82:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e86:	d90a      	bls.n	8000e9e <__udivmoddi4+0x1be>
 8000e88:	19db      	adds	r3, r3, r7
 8000e8a:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000e8e:	f080 8087 	bcs.w	8000fa0 <__udivmoddi4+0x2c0>
 8000e92:	429a      	cmp	r2, r3
 8000e94:	f240 8084 	bls.w	8000fa0 <__udivmoddi4+0x2c0>
 8000e98:	f1aa 0a02 	sub.w	sl, sl, #2
 8000e9c:	443b      	add	r3, r7
 8000e9e:	1a9b      	subs	r3, r3, r2
 8000ea0:	fa1f f989 	uxth.w	r9, r9
 8000ea4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ea8:	fb08 3311 	mls	r3, r8, r1, r3
 8000eac:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000eb0:	fb01 f60c 	mul.w	r6, r1, ip
 8000eb4:	429e      	cmp	r6, r3
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0x1e8>
 8000eb8:	19db      	adds	r3, r3, r7
 8000eba:	f101 32ff 	add.w	r2, r1, #4294967295
 8000ebe:	d26b      	bcs.n	8000f98 <__udivmoddi4+0x2b8>
 8000ec0:	429e      	cmp	r6, r3
 8000ec2:	d969      	bls.n	8000f98 <__udivmoddi4+0x2b8>
 8000ec4:	3902      	subs	r1, #2
 8000ec6:	443b      	add	r3, r7
 8000ec8:	1b9b      	subs	r3, r3, r6
 8000eca:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8000ece:	e78e      	b.n	8000dee <__udivmoddi4+0x10e>
 8000ed0:	f1c1 0e20 	rsb	lr, r1, #32
 8000ed4:	fa22 f40e 	lsr.w	r4, r2, lr
 8000ed8:	408b      	lsls	r3, r1
 8000eda:	4323      	orrs	r3, r4
 8000edc:	fa20 f70e 	lsr.w	r7, r0, lr
 8000ee0:	fa06 f401 	lsl.w	r4, r6, r1
 8000ee4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000ee8:	fa26 f60e 	lsr.w	r6, r6, lr
 8000eec:	433c      	orrs	r4, r7
 8000eee:	fbb6 f9fc 	udiv	r9, r6, ip
 8000ef2:	0c27      	lsrs	r7, r4, #16
 8000ef4:	fb0c 6619 	mls	r6, ip, r9, r6
 8000ef8:	fa1f f883 	uxth.w	r8, r3
 8000efc:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000f00:	fb09 f708 	mul.w	r7, r9, r8
 8000f04:	42b7      	cmp	r7, r6
 8000f06:	fa02 f201 	lsl.w	r2, r2, r1
 8000f0a:	fa00 fa01 	lsl.w	sl, r0, r1
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x242>
 8000f10:	18f6      	adds	r6, r6, r3
 8000f12:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f16:	d241      	bcs.n	8000f9c <__udivmoddi4+0x2bc>
 8000f18:	42b7      	cmp	r7, r6
 8000f1a:	d93f      	bls.n	8000f9c <__udivmoddi4+0x2bc>
 8000f1c:	f1a9 0902 	sub.w	r9, r9, #2
 8000f20:	441e      	add	r6, r3
 8000f22:	1bf6      	subs	r6, r6, r7
 8000f24:	b2a0      	uxth	r0, r4
 8000f26:	fbb6 f4fc 	udiv	r4, r6, ip
 8000f2a:	fb0c 6614 	mls	r6, ip, r4, r6
 8000f2e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000f32:	fb04 f808 	mul.w	r8, r4, r8
 8000f36:	45b8      	cmp	r8, r7
 8000f38:	d907      	bls.n	8000f4a <__udivmoddi4+0x26a>
 8000f3a:	18ff      	adds	r7, r7, r3
 8000f3c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000f40:	d228      	bcs.n	8000f94 <__udivmoddi4+0x2b4>
 8000f42:	45b8      	cmp	r8, r7
 8000f44:	d926      	bls.n	8000f94 <__udivmoddi4+0x2b4>
 8000f46:	3c02      	subs	r4, #2
 8000f48:	441f      	add	r7, r3
 8000f4a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8000f4e:	ebc8 0707 	rsb	r7, r8, r7
 8000f52:	fba0 8902 	umull	r8, r9, r0, r2
 8000f56:	454f      	cmp	r7, r9
 8000f58:	4644      	mov	r4, r8
 8000f5a:	464e      	mov	r6, r9
 8000f5c:	d314      	bcc.n	8000f88 <__udivmoddi4+0x2a8>
 8000f5e:	d029      	beq.n	8000fb4 <__udivmoddi4+0x2d4>
 8000f60:	b365      	cbz	r5, 8000fbc <__udivmoddi4+0x2dc>
 8000f62:	ebba 0304 	subs.w	r3, sl, r4
 8000f66:	eb67 0706 	sbc.w	r7, r7, r6
 8000f6a:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000f6e:	40cb      	lsrs	r3, r1
 8000f70:	40cf      	lsrs	r7, r1
 8000f72:	ea4e 0303 	orr.w	r3, lr, r3
 8000f76:	e885 0088 	stmia.w	r5, {r3, r7}
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f80:	4613      	mov	r3, r2
 8000f82:	e6f8      	b.n	8000d76 <__udivmoddi4+0x96>
 8000f84:	4610      	mov	r0, r2
 8000f86:	e6e0      	b.n	8000d4a <__udivmoddi4+0x6a>
 8000f88:	ebb8 0402 	subs.w	r4, r8, r2
 8000f8c:	eb69 0603 	sbc.w	r6, r9, r3
 8000f90:	3801      	subs	r0, #1
 8000f92:	e7e5      	b.n	8000f60 <__udivmoddi4+0x280>
 8000f94:	4604      	mov	r4, r0
 8000f96:	e7d8      	b.n	8000f4a <__udivmoddi4+0x26a>
 8000f98:	4611      	mov	r1, r2
 8000f9a:	e795      	b.n	8000ec8 <__udivmoddi4+0x1e8>
 8000f9c:	4681      	mov	r9, r0
 8000f9e:	e7c0      	b.n	8000f22 <__udivmoddi4+0x242>
 8000fa0:	468a      	mov	sl, r1
 8000fa2:	e77c      	b.n	8000e9e <__udivmoddi4+0x1be>
 8000fa4:	3b02      	subs	r3, #2
 8000fa6:	443c      	add	r4, r7
 8000fa8:	e748      	b.n	8000e3c <__udivmoddi4+0x15c>
 8000faa:	4608      	mov	r0, r1
 8000fac:	e70a      	b.n	8000dc4 <__udivmoddi4+0xe4>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	443e      	add	r6, r7
 8000fb2:	e72f      	b.n	8000e14 <__udivmoddi4+0x134>
 8000fb4:	45c2      	cmp	sl, r8
 8000fb6:	d3e7      	bcc.n	8000f88 <__udivmoddi4+0x2a8>
 8000fb8:	463e      	mov	r6, r7
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x280>
 8000fbc:	4629      	mov	r1, r5
 8000fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <StartTask>:
        ;
    }
}

static void StartTask(void *p_arg)
{
 8000fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fca:	b087      	sub	sp, #28
	BSP_Init();
 8000fcc:	f000 fa88 	bl	80014e0 <BSP_Init>
	CPU_Init();
 8000fd0:	f001 ff70 	bl	8002eb4 <CPU_Init>
	OS_CPU_SR  cpu_sr = 0u;
	p_arg = p_arg;

#if (OS_TASK_STAT_EN > 0)
    OSStatInit();                                               /* Determine CPU capacity                               */
 8000fd4:	f002 fa46 	bl	8003464 <OSStatInit>
#endif

#ifdef CPU_CFG_INT_DIS_MEAS_EN
    CPU_IntDisMeasMaxCurReset();
 8000fd8:	f001 ff0c 	bl	8002df4 <CPU_IntDisMeasMaxCurReset>
#endif
    UartInit();
 8000fdc:	f000 fa36 	bl	800144c <UartInit>
    BSP_LED_Off(0u);
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f000 fb0f 	bl	8001604 <BSP_LED_Off>

    OS_ENTER_CRITICAL();
 8000fe6:	f7ff f923 	bl	8000230 <OS_CPU_SR_Save>
 8000fea:	4607      	mov	r7, r0

    ShareDataSem = OSSemCreate(1);
 8000fec:	2001      	movs	r0, #1
 8000fee:	f002 fe11 	bl	8003c14 <OSSemCreate>
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <StartTask+0x94>)
 8000ff4:	6018      	str	r0, [r3, #0]

    OSTaskCreateExt( LedTask,                              /* Create the start task                                */
 8000ff6:	4a1a      	ldr	r2, [pc, #104]	; (8001060 <StartTask+0x98>)
 8000ff8:	2503      	movs	r5, #3
 8000ffa:	9504      	str	r5, [sp, #16]
 8000ffc:	2400      	movs	r4, #0
 8000ffe:	9403      	str	r4, [sp, #12]
 8001000:	f44f 7680 	mov.w	r6, #256	; 0x100
 8001004:	9602      	str	r6, [sp, #8]
 8001006:	9201      	str	r2, [sp, #4]
 8001008:	2306      	movs	r3, #6
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	f502 727f 	add.w	r2, r2, #1020	; 0x3fc
 8001010:	4621      	mov	r1, r4
 8001012:	4814      	ldr	r0, [pc, #80]	; (8001064 <StartTask+0x9c>)
 8001014:	f003 f892 	bl	800413c <OSTaskCreateExt>
                       &LedTaskStk[0],
					   LED_TASK_STACK_SIZE,
                        0,
                       (OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));

    OSTaskCreateExt( FloatTask,                              /* Create the start task                                */
 8001018:	4a13      	ldr	r2, [pc, #76]	; (8001068 <StartTask+0xa0>)
 800101a:	9504      	str	r5, [sp, #16]
 800101c:	9403      	str	r4, [sp, #12]
 800101e:	9602      	str	r6, [sp, #8]
 8001020:	9201      	str	r2, [sp, #4]
 8001022:	2305      	movs	r3, #5
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	f502 727f 	add.w	r2, r2, #1020	; 0x3fc
 800102a:	4621      	mov	r1, r4
 800102c:	480f      	ldr	r0, [pc, #60]	; (800106c <StartTask+0xa4>)
 800102e:	f003 f885 	bl	800413c <OSTaskCreateExt>
					   &FloatTaskStk[0],
					   FLOAT_TASK_STACK_SIZE,
						0,
					   (OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));

    OSTaskCreateExt( ProtocolTask,                              /* Create the start task                                */
 8001032:	4a0f      	ldr	r2, [pc, #60]	; (8001070 <StartTask+0xa8>)
 8001034:	9504      	str	r5, [sp, #16]
 8001036:	9403      	str	r4, [sp, #12]
 8001038:	9602      	str	r6, [sp, #8]
 800103a:	9201      	str	r2, [sp, #4]
 800103c:	2304      	movs	r3, #4
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	f502 727f 	add.w	r2, r2, #1020	; 0x3fc
 8001044:	4621      	mov	r1, r4
 8001046:	480b      	ldr	r0, [pc, #44]	; (8001074 <StartTask+0xac>)
 8001048:	f003 f878 	bl	800413c <OSTaskCreateExt>
					   &ProtocolTaskStk[0],
   					   PROTOCOL_TASK_STACK_SIZE,
					   0,
					   (OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));

	OSTaskSuspend(START_TASK_PRIO);
 800104c:	4628      	mov	r0, r5
 800104e:	f002 ffe9 	bl	8004024 <OSTaskSuspend>

	OS_EXIT_CRITICAL();
 8001052:	4638      	mov	r0, r7
 8001054:	f7ff f8f0 	bl	8000238 <OS_CPU_SR_Restore>
}
 8001058:	b007      	add	sp, #28
 800105a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800105c:	20000d5c 	.word	0x20000d5c
 8001060:	20001164 	.word	0x20001164
 8001064:	080011d9 	.word	0x080011d9
 8001068:	20001564 	.word	0x20001564
 800106c:	0800113d 	.word	0x0800113d
 8001070:	20000d64 	.word	0x20000d64
 8001074:	08001079 	.word	0x08001079

08001078 <ProtocolTask>:
	UartReady = SET;
	BSP_LED_Toggle(2);
}

static void ProtocolTask(void *p_arg)
{
 8001078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800107c:	b08a      	sub	sp, #40	; 0x28
	char aRxBuffer[10];
	int rxStartFlag = 0;
	UartReady = RESET;
 800107e:	2600      	movs	r6, #0
 8001080:	4b28      	ldr	r3, [pc, #160]	; (8001124 <ProtocolTask+0xac>)
 8001082:	601e      	str	r6, [r3, #0]

	while(DEF_TRUE)
	{
		if ((UartReady == RESET) && (rxStartFlag == 0))
 8001084:	461d      	mov	r5, r3
			}
			rxStartFlag = 1;
		}
		else if ((UartReady == SET) && (rxStartFlag == 1))
		{
			UserPrint("Get:%c\n",aRxBuffer[0]);
 8001086:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8001134 <ProtocolTask+0xbc>
					break;

			}

			rxStartFlag = 0;
			UartReady = RESET;
 800108a:	4634      	mov	r4, r6
				default:
					break;

			}

			rxStartFlag = 0;
 800108c:	4637      	mov	r7, r6
				case '2':
					OSTaskDel(FLOAT_TASK_PRIO);
					break;

				case '3':
				    OSTaskCreateExt( FloatTask,                              /* Create the start task                                */
 800108e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8001138 <ProtocolTask+0xc0>
 8001092:	f509 7a7f 	add.w	sl, r9, #1020	; 0x3fc
	int rxStartFlag = 0;
	UartReady = RESET;

	while(DEF_TRUE)
	{
		if ((UartReady == RESET) && (rxStartFlag == 0))
 8001096:	682b      	ldr	r3, [r5, #0]
 8001098:	b96b      	cbnz	r3, 80010b6 <ProtocolTask+0x3e>
 800109a:	2e00      	cmp	r6, #0
 800109c:	d13b      	bne.n	8001116 <ProtocolTask+0x9e>
		{
			if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)aRxBuffer, 1) != HAL_OK)
 800109e:	2201      	movs	r2, #1
 80010a0:	a907      	add	r1, sp, #28
 80010a2:	4821      	ldr	r0, [pc, #132]	; (8001128 <ProtocolTask+0xb0>)
 80010a4:	f001 fd48 	bl	8002b38 <HAL_UART_Receive_IT>
 80010a8:	2800      	cmp	r0, #0
 80010aa:	d033      	beq.n	8001114 <ProtocolTask+0x9c>
			{
				UserPrint("USART2 Error\n");
 80010ac:	481f      	ldr	r0, [pc, #124]	; (800112c <ProtocolTask+0xb4>)
 80010ae:	f000 fa05 	bl	80014bc <UserPrint>
			}
			rxStartFlag = 1;
 80010b2:	2601      	movs	r6, #1
 80010b4:	e02f      	b.n	8001116 <ProtocolTask+0x9e>
		}
		else if ((UartReady == SET) && (rxStartFlag == 1))
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d12d      	bne.n	8001116 <ProtocolTask+0x9e>
 80010ba:	b366      	cbz	r6, 8001116 <ProtocolTask+0x9e>
		{
			UserPrint("Get:%c\n",aRxBuffer[0]);
 80010bc:	f89d 101c 	ldrb.w	r1, [sp, #28]
 80010c0:	4640      	mov	r0, r8
 80010c2:	f000 f9fb 	bl	80014bc <UserPrint>

			switch(aRxBuffer[0])
 80010c6:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80010ca:	3b30      	subs	r3, #48	; 0x30
 80010cc:	2b03      	cmp	r3, #3
 80010ce:	d81e      	bhi.n	800110e <ProtocolTask+0x96>
 80010d0:	e8df f003 	tbb	[pc, r3]
 80010d4:	0e0a0602 	.word	0x0e0a0602
			{
				case '0':
					OSTaskSuspend(LED_TASK_PRIO);
 80010d8:	2006      	movs	r0, #6
 80010da:	f002 ffa3 	bl	8004024 <OSTaskSuspend>
					break;
 80010de:	e016      	b.n	800110e <ProtocolTask+0x96>

				case '1':
					OSTaskResume(LED_TASK_PRIO);
 80010e0:	2006      	movs	r0, #6
 80010e2:	f002 ff17 	bl	8003f14 <OSTaskResume>
					break;
 80010e6:	e012      	b.n	800110e <ProtocolTask+0x96>

				case '2':
					OSTaskDel(FLOAT_TASK_PRIO);
 80010e8:	2005      	movs	r0, #5
 80010ea:	f002 fe45 	bl	8003d78 <OSTaskDel>
					break;
 80010ee:	e00e      	b.n	800110e <ProtocolTask+0x96>

				case '3':
				    OSTaskCreateExt( FloatTask,                              /* Create the start task                                */
 80010f0:	2303      	movs	r3, #3
 80010f2:	9304      	str	r3, [sp, #16]
 80010f4:	9703      	str	r7, [sp, #12]
 80010f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8001100:	2305      	movs	r3, #5
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	4652      	mov	r2, sl
 8001106:	4639      	mov	r1, r7
 8001108:	4809      	ldr	r0, [pc, #36]	; (8001130 <ProtocolTask+0xb8>)
 800110a:	f003 f817 	bl	800413c <OSTaskCreateExt>
					break;

			}

			rxStartFlag = 0;
			UartReady = RESET;
 800110e:	602c      	str	r4, [r5, #0]
				default:
					break;

			}

			rxStartFlag = 0;
 8001110:	463e      	mov	r6, r7
 8001112:	e000      	b.n	8001116 <ProtocolTask+0x9e>
		{
			if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)aRxBuffer, 1) != HAL_OK)
			{
				UserPrint("USART2 Error\n");
			}
			rxStartFlag = 1;
 8001114:	2601      	movs	r6, #1

			rxStartFlag = 0;
			UartReady = RESET;
		}

		OSTimeDlyHMSM(0u, 0u, 0u,10);
 8001116:	230a      	movs	r3, #10
 8001118:	4622      	mov	r2, r4
 800111a:	4621      	mov	r1, r4
 800111c:	4620      	mov	r0, r4
 800111e:	f003 f891 	bl	8004244 <OSTimeDlyHMSM>
	}
 8001122:	e7b8      	b.n	8001096 <ProtocolTask+0x1e>
 8001124:	20000d60 	.word	0x20000d60
 8001128:	20001aec 	.word	0x20001aec
 800112c:	080072e0 	.word	0x080072e0
 8001130:	0800113d 	.word	0x0800113d
 8001134:	080072f0 	.word	0x080072f0
 8001138:	20001564 	.word	0x20001564

0800113c <FloatTask>:
			UserPrint("SPost Err %d\n",err);
	}
}

static void FloatTask(void *p_arg)
{
 800113c:	b570      	push	{r4, r5, r6, lr}
 800113e:	b098      	sub	sp, #96	; 0x60
	OS_TCB floatTCB;

	while(DEF_TRUE)
	{
		OSTaskQuery(FLOAT_TASK_PRIO,(OS_TCB *)&floatTCB);
		UserPrint("Float Task Prio %x\n",floatTCB.OSTCBPrio);
 8001140:	4e1a      	ldr	r6, [pc, #104]	; (80011ac <FloatTask+0x70>)
		//UserPrint("Float Task Dly %x\n",floatTCB.OSTCBDly);
		UserPrint("Float Task StackSize %x\n",floatTCB.OSTCBStkSize);
 8001142:	4d1b      	ldr	r5, [pc, #108]	; (80011b0 <FloatTask+0x74>)
		UserPrint("Float Task StackUsed %x\n",floatTCB.OSTCBStkUsed);
 8001144:	4c1b      	ldr	r4, [pc, #108]	; (80011b4 <FloatTask+0x78>)

	OS_TCB floatTCB;

	while(DEF_TRUE)
	{
		OSTaskQuery(FLOAT_TASK_PRIO,(OS_TCB *)&floatTCB);
 8001146:	a901      	add	r1, sp, #4
 8001148:	2005      	movs	r0, #5
 800114a:	f002 ffb5 	bl	80040b8 <OSTaskQuery>
		UserPrint("Float Task Prio %x\n",floatTCB.OSTCBPrio);
 800114e:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
 8001152:	4630      	mov	r0, r6
 8001154:	f000 f9b2 	bl	80014bc <UserPrint>
		//UserPrint("Float Task Dly %x\n",floatTCB.OSTCBDly);
		UserPrint("Float Task StackSize %x\n",floatTCB.OSTCBStkSize);
 8001158:	9904      	ldr	r1, [sp, #16]
 800115a:	4628      	mov	r0, r5
 800115c:	f000 f9ae 	bl	80014bc <UserPrint>
		UserPrint("Float Task StackUsed %x\n",floatTCB.OSTCBStkUsed);
 8001160:	9914      	ldr	r1, [sp, #80]	; 0x50
 8001162:	4620      	mov	r0, r4
 8001164:	f000 f9aa 	bl	80014bc <UserPrint>
		//UserPrint("Float Task OSTCBCyclesStart %d\n",floatTCB.OSTCBCyclesStart);
		//UserPrint("Float Task OSTCBCyclesTot %d\n",floatTCB.OSTCBCyclesTot);
		UserPrint("Float Task OSCPUUsage %d%\n",OSCPUUsage);
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <FloatTask+0x7c>)
 800116a:	7819      	ldrb	r1, [r3, #0]
 800116c:	4813      	ldr	r0, [pc, #76]	; (80011bc <FloatTask+0x80>)
 800116e:	f000 f9a5 	bl	80014bc <UserPrint>
		UserPrint("Float Task OSIdleCtrRun %d\n",OSIdleCtrRun);
 8001172:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <FloatTask+0x84>)
 8001174:	6819      	ldr	r1, [r3, #0]
 8001176:	4813      	ldr	r0, [pc, #76]	; (80011c4 <FloatTask+0x88>)
 8001178:	f000 f9a0 	bl	80014bc <UserPrint>
		UserPrint("Float Task OSIdleCtrMax %d\n",OSIdleCtrMax);
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <FloatTask+0x8c>)
 800117e:	6819      	ldr	r1, [r3, #0]
 8001180:	4812      	ldr	r0, [pc, #72]	; (80011cc <FloatTask+0x90>)
 8001182:	f000 f99b 	bl	80014bc <UserPrint>

		UserPrint("Float Task Wait Sem\n");
 8001186:	4812      	ldr	r0, [pc, #72]	; (80011d0 <FloatTask+0x94>)
 8001188:	f000 f998 	bl	80014bc <UserPrint>
		OSSemPend(ShareDataSem,0,&err);
 800118c:	f10d 025f 	add.w	r2, sp, #95	; 0x5f
 8001190:	2100      	movs	r1, #0
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <FloatTask+0x98>)
 8001194:	6818      	ldr	r0, [r3, #0]
 8001196:	f002 fd63 	bl	8003c60 <OSSemPend>

		OSTimeDlyHMSM(0u, 0u, 0u,800u);
 800119a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800119e:	2200      	movs	r2, #0
 80011a0:	4611      	mov	r1, r2
 80011a2:	4610      	mov	r0, r2
 80011a4:	f003 f84e 	bl	8004244 <OSTimeDlyHMSM>
 80011a8:	e7cd      	b.n	8001146 <FloatTask+0xa>
 80011aa:	bf00      	nop
 80011ac:	080072f8 	.word	0x080072f8
 80011b0:	0800730c 	.word	0x0800730c
 80011b4:	08007328 	.word	0x08007328
 80011b8:	2000272c 	.word	0x2000272c
 80011bc:	08007344 	.word	0x08007344
 80011c0:	20003c38 	.word	0x20003c38
 80011c4:	08007360 	.word	0x08007360
 80011c8:	20002724 	.word	0x20002724
 80011cc:	0800737c 	.word	0x0800737c
 80011d0:	08007398 	.word	0x08007398
 80011d4:	20000d5c 	.word	0x20000d5c

080011d8 <LedTask>:
		OSTimeDlyHMSM(0u, 0u, 0u,10);
	}
}

static void LedTask(void *p_arg)
{
 80011d8:	b570      	push	{r4, r5, r6, lr}
 80011da:	b096      	sub	sp, #88	; 0x58
	OS_TCB ledTCB;

	while(DEF_TRUE)
	{
		OSTaskQuery(LED_TASK_PRIO,(OS_TCB *)&ledTCB);
		UserPrint("Led Task Prio %x\n",ledTCB.OSTCBPrio);
 80011dc:	4e1b      	ldr	r6, [pc, #108]	; (800124c <LedTask+0x74>)
		//UserPrint("Led Task Dly %x\n",ledTCB.OSTCBDly);
		UserPrint("Led Task StackSize %x\n",ledTCB.OSTCBStkSize);
 80011de:	4d1c      	ldr	r5, [pc, #112]	; (8001250 <LedTask+0x78>)
		UserPrint("Led Task StackUsed %x\n",ledTCB.OSTCBStkUsed);
 80011e0:	4c1c      	ldr	r4, [pc, #112]	; (8001254 <LedTask+0x7c>)

	OS_TCB ledTCB;

	while(DEF_TRUE)
	{
		OSTaskQuery(LED_TASK_PRIO,(OS_TCB *)&ledTCB);
 80011e2:	4669      	mov	r1, sp
 80011e4:	2006      	movs	r0, #6
 80011e6:	f002 ff67 	bl	80040b8 <OSTaskQuery>
		UserPrint("Led Task Prio %x\n",ledTCB.OSTCBPrio);
 80011ea:	f89d 1036 	ldrb.w	r1, [sp, #54]	; 0x36
 80011ee:	4630      	mov	r0, r6
 80011f0:	f000 f964 	bl	80014bc <UserPrint>
		//UserPrint("Led Task Dly %x\n",ledTCB.OSTCBDly);
		UserPrint("Led Task StackSize %x\n",ledTCB.OSTCBStkSize);
 80011f4:	9903      	ldr	r1, [sp, #12]
 80011f6:	4628      	mov	r0, r5
 80011f8:	f000 f960 	bl	80014bc <UserPrint>
		UserPrint("Led Task StackUsed %x\n",ledTCB.OSTCBStkUsed);
 80011fc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80011fe:	4620      	mov	r0, r4
 8001200:	f000 f95c 	bl	80014bc <UserPrint>
		//UserPrint("Led Task OSTCBCyclesStart %d\n",ledTCB.OSTCBCyclesStart);
		//UserPrint("Led Task OSTCBCyclesTot %d\n",ledTCB.OSTCBCyclesTot);
		UserPrint("Led Task OSCPUUsage %d%\n",OSCPUUsage);
 8001204:	4b14      	ldr	r3, [pc, #80]	; (8001258 <LedTask+0x80>)
 8001206:	7819      	ldrb	r1, [r3, #0]
 8001208:	4814      	ldr	r0, [pc, #80]	; (800125c <LedTask+0x84>)
 800120a:	f000 f957 	bl	80014bc <UserPrint>
		UserPrint("Led Task OSIdleCtrRun %d\n",OSIdleCtrRun);
 800120e:	4b14      	ldr	r3, [pc, #80]	; (8001260 <LedTask+0x88>)
 8001210:	6819      	ldr	r1, [r3, #0]
 8001212:	4814      	ldr	r0, [pc, #80]	; (8001264 <LedTask+0x8c>)
 8001214:	f000 f952 	bl	80014bc <UserPrint>
		UserPrint("Led Task OSIdleCtrMax %d\n",OSIdleCtrMax);
 8001218:	4b13      	ldr	r3, [pc, #76]	; (8001268 <LedTask+0x90>)
 800121a:	6819      	ldr	r1, [r3, #0]
 800121c:	4813      	ldr	r0, [pc, #76]	; (800126c <LedTask+0x94>)
 800121e:	f000 f94d 	bl	80014bc <UserPrint>

		OSTimeDlyHMSM(0u, 0u, 1u,0u);
 8001222:	2300      	movs	r3, #0
 8001224:	2201      	movs	r2, #1
 8001226:	4619      	mov	r1, r3
 8001228:	4618      	mov	r0, r3
 800122a:	f003 f80b 	bl	8004244 <OSTimeDlyHMSM>
		UserPrint("Led Task Sem Post\n");
 800122e:	4810      	ldr	r0, [pc, #64]	; (8001270 <LedTask+0x98>)
 8001230:	f000 f944 	bl	80014bc <UserPrint>
		if ((err = OSSemPost(ShareDataSem)) > OS_ERR_NONE)
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <LedTask+0x9c>)
 8001236:	6818      	ldr	r0, [r3, #0]
 8001238:	f002 fd76 	bl	8003d28 <OSSemPost>
 800123c:	4601      	mov	r1, r0
 800123e:	2800      	cmp	r0, #0
 8001240:	d0cf      	beq.n	80011e2 <LedTask+0xa>
			UserPrint("SPost Err %d\n",err);
 8001242:	480d      	ldr	r0, [pc, #52]	; (8001278 <LedTask+0xa0>)
 8001244:	f000 f93a 	bl	80014bc <UserPrint>
 8001248:	e7cb      	b.n	80011e2 <LedTask+0xa>
 800124a:	bf00      	nop
 800124c:	080073b0 	.word	0x080073b0
 8001250:	080073c4 	.word	0x080073c4
 8001254:	080073dc 	.word	0x080073dc
 8001258:	2000272c 	.word	0x2000272c
 800125c:	080073f4 	.word	0x080073f4
 8001260:	20003c38 	.word	0x20003c38
 8001264:	08007410 	.word	0x08007410
 8001268:	20002724 	.word	0x20002724
 800126c:	0800742c 	.word	0x0800742c
 8001270:	08007448 	.word	0x08007448
 8001274:	20000d5c 	.word	0x20000d5c
 8001278:	0800745c 	.word	0x0800745c

0800127c <main>:
#if (OS_SEM_EN > 0u)
static OS_EVENT *ShareDataSem;
#endif

int main(void)
{
 800127c:	b510      	push	{r4, lr}
 800127e:	b088      	sub	sp, #32
#if (OS_TASK_NAME_EN > 0)
    CPU_INT08U  err;
#endif

    HAL_Init();                                                 /* See Note 1.                                          */
 8001280:	f000 fce2 	bl	8001c48 <HAL_Init>
    Mem_Init();                                                 /* Initialize Memory Managment Module                   */
 8001284:	f001 fea4 	bl	8002fd0 <Mem_Init>

    BSP_IntDisAll();                                            /* Disable all Interrupts.                              */
 8001288:	f000 fa2e 	bl	80016e8 <BSP_IntDisAll>

    OSInit();                                                   /* Init uC/OS-II.                                       */
 800128c:	f002 fa18 	bl	80036c0 <OSInit>

    OSTaskCreateExt( StartTask,                              /* Create the start task                                */
 8001290:	4a0c      	ldr	r2, [pc, #48]	; (80012c4 <main+0x48>)
 8001292:	2403      	movs	r4, #3
 8001294:	9404      	str	r4, [sp, #16]
 8001296:	2100      	movs	r1, #0
 8001298:	9103      	str	r1, [sp, #12]
 800129a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800129e:	9302      	str	r3, [sp, #8]
 80012a0:	9201      	str	r2, [sp, #4]
 80012a2:	9400      	str	r4, [sp, #0]
 80012a4:	4623      	mov	r3, r4
 80012a6:	f202 72fc 	addw	r2, r2, #2044	; 0x7fc
 80012aa:	4807      	ldr	r0, [pc, #28]	; (80012c8 <main+0x4c>)
 80012ac:	f002 ff46 	bl	800413c <OSTaskCreateExt>
					START_TASK_STACK_SIZE,
                     0,
                    (OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));

#if (OS_TASK_NAME_EN > 0)
    OSTaskNameSet(         APP_CFG_TASK_START_PRIO,
 80012b0:	f10d 021f 	add.w	r2, sp, #31
 80012b4:	4905      	ldr	r1, [pc, #20]	; (80012cc <main+0x50>)
 80012b6:	4620      	mov	r0, r4
 80012b8:	f002 fdfe 	bl	8003eb8 <OSTaskNameSet>
                  (INT8U *)"Start Task",
                           &err);
#endif

    OSStart();                                                  /* Start multitasking (i.e. give control to uC/OS-II).  */
 80012bc:	f002 f8b2 	bl	8003424 <OSStart>
 80012c0:	e7fe      	b.n	80012c0 <main+0x44>
 80012c2:	bf00      	nop
 80012c4:	2000055c 	.word	0x2000055c
 80012c8:	08000fc9 	.word	0x08000fc9
 80012cc:	0800746c 	.word	0x0800746c

080012d0 <HAL_UART_RxCpltCallback>:

	OS_EXIT_CRITICAL();
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80012d0:	b508      	push	{r3, lr}
	UartReady = SET;
 80012d2:	2201      	movs	r2, #1
 80012d4:	4b02      	ldr	r3, [pc, #8]	; (80012e0 <HAL_UART_RxCpltCallback+0x10>)
 80012d6:	601a      	str	r2, [r3, #0]
	BSP_LED_Toggle(2);
 80012d8:	2002      	movs	r0, #2
 80012da:	f000 f9c1 	bl	8001660 <BSP_LED_Toggle>
 80012de:	bd08      	pop	{r3, pc}
 80012e0:	20000d60 	.word	0x20000d60

080012e4 <IntHandlerUSART2>:

// Direct Call
// UART2 Int ---> IntHandlerUSART2 --> HAL_UART_IRQHandler

void IntHandlerUSART2(void)
{
 80012e4:	b508      	push	{r3, lr}
	if (OSRunning == 0)
 80012e6:	4b05      	ldr	r3, [pc, #20]	; (80012fc <IntHandlerUSART2+0x18>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	b133      	cbz	r3, 80012fa <IntHandlerUSART2+0x16>
		return;

	OSIntEnter();
 80012ec:	f002 f832 	bl	8003354 <OSIntEnter>
	HAL_UART_IRQHandler(&UartHandle);
 80012f0:	4803      	ldr	r0, [pc, #12]	; (8001300 <IntHandlerUSART2+0x1c>)
 80012f2:	f001 fc61 	bl	8002bb8 <HAL_UART_IRQHandler>
	OSIntExit();
 80012f6:	f002 f83d 	bl	8003374 <OSIntExit>
 80012fa:	bd08      	pop	{r3, pc}
 80012fc:	200021bd 	.word	0x200021bd
 8001300:	20001aec 	.word	0x20001aec

08001304 <App_TaskCreateHook>:
* Note(s)     : (1) Interrupts are disabled during this call.
*********************************************************************************************************
*/

void  App_TaskCreateHook (OS_TCB *ptcb)
{
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop

08001308 <App_TaskDelHook>:
* Note(s)     : (1) Interrupts are disabled during this call.
*********************************************************************************************************
*/

void  App_TaskDelHook (OS_TCB *ptcb)
{
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop

0800130c <App_TaskIdleHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 251
void  App_TaskIdleHook (void)
{
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop

08001310 <App_TaskStatHook>:
* Argument(s) : none.
*********************************************************************************************************
*/

void  App_TaskStatHook (void)
{
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop

08001314 <App_TaskReturnHook>:
*/


#if OS_VERSION >= 289
void  App_TaskReturnHook (OS_TCB  *ptcb)
{
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop

08001318 <App_TaskSwHook>:
*********************************************************************************************************
*/

#if OS_TASK_SW_HOOK_EN > 0
void  App_TaskSwHook (void)
{
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop

0800131c <App_TCBInitHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 204
void  App_TCBInitHook (OS_TCB *ptcb)
{
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop

08001320 <App_TimeTickHook>:
*********************************************************************************************************
*/

#if OS_TIME_TICK_HOOK_EN > 0
void  App_TimeTickHook (void)
{
 8001320:	b508      	push	{r3, lr}
#if (APP_CFG_PROBE_OS_PLUGIN_EN == DEF_ENABLED) && (OS_PROBE_HOOKS_EN > 0)
    OSProbe_TickHook();
#endif
    HAL_IncTick();                                              /* STM32CubeF4 library function call.                   */
 8001322:	f000 fcab 	bl	8001c7c <HAL_IncTick>
 8001326:	bd08      	pop	{r3, pc}

08001328 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001328:	490f      	ldr	r1, [pc, #60]	; (8001368 <SystemInit+0x40>)
 800132a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800132e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <SystemInit+0x44>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	f042 0201 	orr.w	r2, r2, #1
 800133e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001340:	2000      	movs	r0, #0
 8001342:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800134a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800134e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001350:	4a07      	ldr	r2, [pc, #28]	; (8001370 <SystemInit+0x48>)
 8001352:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800135a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800135c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800135e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001362:	608b      	str	r3, [r1, #8]
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00
 800136c:	40023800 	.word	0x40023800
 8001370:	24003010 	.word	0x24003010

08001374 <Reset_Handler>:

    .section  .text.Reset_Handler
    .weak  Reset_Handler
    .type  Reset_Handler, %function
Reset_Handler:
    ldr sp, =_estack                        @ set stack pointer.
 8001374:	f8df d050 	ldr.w	sp, [pc, #80]	; 80013c8 <LoopFillZerobss+0x30>

                                            @ Copy the data segment initializers from flash to SRAM
    movs r1, #0
 8001378:	2100      	movs	r1, #0
    b LoopCopyDataInit
 800137a:	e003      	b.n	8001384 <LoopCopyDataInit>

0800137c <CopyDataInit>:

CopyDataInit:
    ldr r3, =_sidata
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <LoopFillZerobss+0x34>)
    ldr r3, [r3, r1]
 800137e:	585b      	ldr	r3, [r3, r1]
    str r3, [r0, r1]
 8001380:	5043      	str	r3, [r0, r1]
    adds r1, r1, #4
 8001382:	3104      	adds	r1, #4

08001384 <LoopCopyDataInit>:

LoopCopyDataInit:
    ldr r0, =_sdata
 8001384:	4812      	ldr	r0, [pc, #72]	; (80013d0 <LoopFillZerobss+0x38>)
    ldr r3, =_edata
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <LoopFillZerobss+0x3c>)
    adds r2, r0, r1
 8001388:	1842      	adds	r2, r0, r1
    cmp r2, r3
 800138a:	429a      	cmp	r2, r3
    bcc CopyDataInit
 800138c:	d3f6      	bcc.n	800137c <CopyDataInit>
    ldr r2, =_sbss
 800138e:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <LoopFillZerobss+0x40>)
    b LoopFillZerobss
 8001390:	e002      	b.n	8001398 <LoopFillZerobss>

08001392 <FillZerobss>:

                                            @ Zero fill the bss segment.
FillZerobss:
    movs r3, #0
 8001392:	2300      	movs	r3, #0
    str r3, [r2], #4
 8001394:	f842 3b04 	str.w	r3, [r2], #4

08001398 <LoopFillZerobss>:

LoopFillZerobss:
    ldr r3, = _ebss
 8001398:	4b10      	ldr	r3, [pc, #64]	; (80013dc <LoopFillZerobss+0x44>)
    cmp r2, r3
 800139a:	429a      	cmp	r2, r3
    bcc FillZerobss
 800139c:	d3f9      	bcc.n	8001392 <FillZerobss>

                                            @ Call the clock system intitialization function.
    bl  SystemInit
 800139e:	f7ff ffc3 	bl	8001328 <SystemInit>

#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
                                            @ Enable Floating Point Support at reset for FPU
    LDR.W   R0, =0xE000ED88                 @ Load address of CPACR register
 80013a2:	f8df 003c 	ldr.w	r0, [pc, #60]	; 80013e0 <LoopFillZerobss+0x48>
    LDR     R1, [R0]                        @ Read value at CPACR
 80013a6:	6801      	ldr	r1, [r0, #0]
    ORR     R1,  R1, #(0xF <<20)            @ Set bits 20-23 to enable CP10 and CP11 coprocessors
 80013a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
                                            @ Write back the modified CPACR value
    STR     R1, [R0]                        @ Wait for store to complete
 80013ac:	6001      	str	r1, [r0, #0]
    DSB
 80013ae:	f3bf 8f4f 	dsb	sy

                                            @ Disable automatic FP register content
                                            @ Disable lazy context switch
    LDR.W   R0, =0xE000EF34                 @ Load address to FPCCR register
 80013b2:	f8df 0030 	ldr.w	r0, [pc, #48]	; 80013e4 <LoopFillZerobss+0x4c>
    LDR     R1, [R0]
 80013b6:	6801      	ldr	r1, [r0, #0]
    AND     R1,  R1, #(0x3FFFFFFF)          @ Clear the LSPEN and ASPEN bits
 80013b8:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
    STR     R1, [R0]
 80013bc:	6001      	str	r1, [r0, #0]
    ISB                                     @ Reset pipeline now the FPU is enabled
 80013be:	f3bf 8f6f 	isb	sy
#endif
                                            @ Call static constructors
    @bl __libc_init_array
                                            @ Call the application's entry point.
    bl  main
 80013c2:	f7ff ff5b 	bl	800127c <main>
    bx  lr
 80013c6:	4770      	bx	lr

    .section  .text.Reset_Handler
    .weak  Reset_Handler
    .type  Reset_Handler, %function
Reset_Handler:
    ldr sp, =_estack                        @ set stack pointer.
 80013c8:	20020000 	.word	0x20020000
                                            @ Copy the data segment initializers from flash to SRAM
    movs r1, #0
    b LoopCopyDataInit

CopyDataInit:
    ldr r3, =_sidata
 80013cc:	0800779c 	.word	0x0800779c
    ldr r3, [r3, r1]
    str r3, [r0, r1]
    adds r1, r1, #4

LoopCopyDataInit:
    ldr r0, =_sdata
 80013d0:	20000000 	.word	0x20000000
    ldr r3, =_edata
 80013d4:	20000540 	.word	0x20000540
    adds r2, r0, r1
    cmp r2, r3
    bcc CopyDataInit
    ldr r2, =_sbss
 80013d8:	20000540 	.word	0x20000540
FillZerobss:
    movs r3, #0
    str r3, [r2], #4

LoopFillZerobss:
    ldr r3, = _ebss
 80013dc:	20003c40 	.word	0x20003c40
                                            @ Call the clock system intitialization function.
    bl  SystemInit

#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
                                            @ Enable Floating Point Support at reset for FPU
    LDR.W   R0, =0xE000ED88                 @ Load address of CPACR register
 80013e0:	e000ed88 	.word	0xe000ed88
    STR     R1, [R0]                        @ Wait for store to complete
    DSB

                                            @ Disable automatic FP register content
                                            @ Disable lazy context switch
    LDR.W   R0, =0xE000EF34                 @ Load address to FPCCR register
 80013e4:	e000ef34 	.word	0xe000ef34

080013e8 <App_NMI_ISR>:

@ Dummy Exception Handlers (infinite loops which can be modified)

    .section	.text.App_NMI_ISR
App_NMI_ISR:
	b	App_NMI_ISR
 80013e8:	e7fe      	b.n	80013e8 <App_NMI_ISR>

080013ea <App_Fault_ISR>:
	.size	App_NMI_ISR, .-App_NMI_ISR


    .section	.text.App_Fault_ISR
App_Fault_ISR:
	b	App_Fault_ISR
 80013ea:	e7fe      	b.n	80013ea <App_Fault_ISR>

080013ec <App_MemFault_ISR>:
	.size	App_Fault_ISR, .-App_Fault_ISR


    .section	.text.App_MemFault_ISR
App_MemFault_ISR:
	b	App_MemFault_ISR
 80013ec:	e7fe      	b.n	80013ec <App_MemFault_ISR>

080013ee <App_BusFault_ISR>:
	.size	App_MemFault_ISR, .-App_MemFault_ISR


    .section	.text.App_BusFault_ISR
App_BusFault_ISR:
	b	App_BusFault_ISR
 80013ee:	e7fe      	b.n	80013ee <App_BusFault_ISR>

080013f0 <App_UsageFault_ISR>:
	.size	App_BusFault_ISR, .-App_BusFault_ISR


    .section	.text.App_UsageFault_ISR
App_UsageFault_ISR:
	b	App_UsageFault_ISR
 80013f0:	e7fe      	b.n	80013f0 <App_UsageFault_ISR>

080013f2 <App_Spurious_ISR>:
	.size	App_UsageFault_ISR, .-App_UsageFault_ISR

    .section	.text.App_Spurious_ISR
App_Spurious_ISR:
	b	App_Spurious_ISR
 80013f2:	e7fe      	b.n	80013f2 <App_Spurious_ISR>

080013f4 <HAL_UART_MspInit>:
#include <bsp_user.h>

//extern int Usart2RxEnable;

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80013f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f6:	b087      	sub	sp, #28
    GPIO_InitTypeDef  GPIO_InitStructure;

    BSP_PeriphEn(BSP_PERIPH_ID_GPIOA);                          /* Configure GPIOG for LED1 and LED2                    */
 80013f8:	2000      	movs	r0, #0
 80013fa:	f000 fb83 	bl	8001b04 <BSP_PeriphEn>
    BSP_PeriphEn(BSP_PERIPH_ID_USART2);
 80013fe:	2071      	movs	r0, #113	; 0x71
 8001400:	f000 fb80 	bl	8001b04 <BSP_PeriphEn>

    GPIO_InitStructure.Pin       = GPIO_PIN_2;
 8001404:	2304      	movs	r3, #4
 8001406:	9301      	str	r3, [sp, #4]
	GPIO_InitStructure.Speed     = GPIO_SPEED_FAST;
 8001408:	2402      	movs	r4, #2
 800140a:	9404      	str	r4, [sp, #16]
	GPIO_InitStructure.Mode      = GPIO_MODE_AF_PP;
 800140c:	9402      	str	r4, [sp, #8]
	GPIO_InitStructure.Pull      = GPIO_PULLUP;
 800140e:	2501      	movs	r5, #1
 8001410:	9503      	str	r5, [sp, #12]
	GPIO_InitStructure.Alternate = GPIO_AF7_USART2;
 8001412:	2707      	movs	r7, #7
 8001414:	9705      	str	r7, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001416:	4e0c      	ldr	r6, [pc, #48]	; (8001448 <HAL_UART_MspInit+0x54>)
 8001418:	eb0d 0103 	add.w	r1, sp, r3
 800141c:	4630      	mov	r0, r6
 800141e:	f000 fc91 	bl	8001d44 <HAL_GPIO_Init>
															   /* Configure GPIOC.11 as input floating.                 */
	GPIO_InitStructure.Pin       = GPIO_PIN_3;
 8001422:	2308      	movs	r3, #8
 8001424:	9301      	str	r3, [sp, #4]
	GPIO_InitStructure.Mode      = GPIO_MODE_AF_PP;
 8001426:	9402      	str	r4, [sp, #8]
	GPIO_InitStructure.Alternate = GPIO_AF7_USART2;
 8001428:	9705      	str	r7, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800142a:	a901      	add	r1, sp, #4
 800142c:	4630      	mov	r0, r6
 800142e:	f000 fc89 	bl	8001d44 <HAL_GPIO_Init>

//	if (Usart2RxEnable == 1)
//	{
		HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 8001432:	462a      	mov	r2, r5
 8001434:	2100      	movs	r1, #0
 8001436:	2026      	movs	r0, #38	; 0x26
 8001438:	f000 fc46 	bl	8001cc8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 800143c:	2026      	movs	r0, #38	; 0x26
 800143e:	f000 fc75 	bl	8001d2c <HAL_NVIC_EnableIRQ>
//	}
}
 8001442:	b007      	add	sp, #28
 8001444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001446:	bf00      	nop
 8001448:	40020000 	.word	0x40020000

0800144c <UartInit>:
//static char printfBuff[128];

UART_HandleTypeDef UartHandle;

void UartInit(void)
{
 800144c:	b508      	push	{r3, lr}
	UartHandle.Instance          = USART2;
 800144e:	4808      	ldr	r0, [pc, #32]	; (8001470 <UartInit+0x24>)
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <UartInit+0x28>)
 8001452:	6003      	str	r3, [r0, #0]
	UartHandle.Init.BaudRate     = 115200;
 8001454:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001458:	6043      	str	r3, [r0, #4]
	UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 800145a:	2300      	movs	r3, #0
 800145c:	6083      	str	r3, [r0, #8]
	UartHandle.Init.StopBits     = UART_STOPBITS_1;
 800145e:	60c3      	str	r3, [r0, #12]
	UartHandle.Init.Parity       = UART_PARITY_NONE;
 8001460:	6103      	str	r3, [r0, #16]
	UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8001462:	6183      	str	r3, [r0, #24]
	UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8001464:	230c      	movs	r3, #12
 8001466:	6143      	str	r3, [r0, #20]
	//UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;

	HAL_UART_Init(&UartHandle);
 8001468:	f001 fac4 	bl	80029f4 <HAL_UART_Init>
 800146c:	bd08      	pop	{r3, pc}
 800146e:	bf00      	nop
 8001470:	20001aec 	.word	0x20001aec
 8001474:	40004400 	.word	0x40004400

08001478 <UartSendChar>:
}



void UartSendChar(char c)
{
 8001478:	b500      	push	{lr}
 800147a:	b083      	sub	sp, #12
 800147c:	a902      	add	r1, sp, #8
 800147e:	f801 0d01 	strb.w	r0, [r1, #-1]!
	HAL_UART_Transmit(&UartHandle,(unsigned char*)&c,1,1000);
 8001482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001486:	2201      	movs	r2, #1
 8001488:	4802      	ldr	r0, [pc, #8]	; (8001494 <UartSendChar+0x1c>)
 800148a:	f001 fae3 	bl	8002a54 <HAL_UART_Transmit>
}
 800148e:	b003      	add	sp, #12
 8001490:	f85d fb04 	ldr.w	pc, [sp], #4
 8001494:	20001aec 	.word	0x20001aec

08001498 <UartSendString>:

void UartSendString(char *s)
{
 8001498:	b538      	push	{r3, r4, r5, lr}
	while(*s != '\0')
 800149a:	7803      	ldrb	r3, [r0, #0]
 800149c:	b16b      	cbz	r3, 80014ba <UartSendString+0x22>
 800149e:	4604      	mov	r4, r0
	{
		if(*s == '\n')
			UartSendChar('\r');
 80014a0:	250d      	movs	r5, #13

void UartSendString(char *s)
{
	while(*s != '\0')
	{
		if(*s == '\n')
 80014a2:	2b0a      	cmp	r3, #10
 80014a4:	d102      	bne.n	80014ac <UartSendString+0x14>
			UartSendChar('\r');
 80014a6:	4628      	mov	r0, r5
 80014a8:	f7ff ffe6 	bl	8001478 <UartSendChar>
		UartSendChar(*s++);
 80014ac:	f814 0b01 	ldrb.w	r0, [r4], #1
 80014b0:	f7ff ffe2 	bl	8001478 <UartSendChar>
	HAL_UART_Transmit(&UartHandle,(unsigned char*)&c,1,1000);
}

void UartSendString(char *s)
{
	while(*s != '\0')
 80014b4:	7823      	ldrb	r3, [r4, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f3      	bne.n	80014a2 <UartSendString+0xa>
 80014ba:	bd38      	pop	{r3, r4, r5, pc}

080014bc <UserPrint>:
		UartSendChar(*s++);
	}
}

void UserPrint(const char *format, ...)
{
 80014bc:	b40f      	push	{r0, r1, r2, r3}
 80014be:	b500      	push	{lr}
 80014c0:	b0a3      	sub	sp, #140	; 0x8c
 80014c2:	aa24      	add	r2, sp, #144	; 0x90
 80014c4:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list     vArgs;
    //int         sz;
    char        printfBuff[128];

    va_start (vArgs, format);
 80014c8:	9221      	str	r2, [sp, #132]	; 0x84
    //sz = vsprintf (printfBuff, format, vArgs);
    vsprintf (printfBuff, format, vArgs);
 80014ca:	a801      	add	r0, sp, #4
 80014cc:	f004 f80e 	bl	80054ec <vsprintf>
    va_end (vArgs);

    UartSendString(printfBuff);
 80014d0:	a801      	add	r0, sp, #4
 80014d2:	f7ff ffe1 	bl	8001498 <UartSendString>
}
 80014d6:	b023      	add	sp, #140	; 0x8c
 80014d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80014dc:	b004      	add	sp, #16
 80014de:	4770      	bx	lr

080014e0 <BSP_Init>:
*                   regarding system frequency refer to product datasheet.
*********************************************************************************************************
*/

void  BSP_Init (void)
{
 80014e0:	b570      	push	{r4, r5, r6, lr}
 80014e2:	b098      	sub	sp, #96	; 0x60
    RCC_OscInitTypeDef  RCC_OscInitStruct;
    RCC_ClkInitTypeDef  RCC_ClkInitStruct;

    BSP_IntInit();
 80014e4:	f000 f91a 	bl	800171c <BSP_IntInit>

    HAL_RCC_DeInit();
 80014e8:	f000 fd2a 	bl	8001f40 <HAL_RCC_DeInit>

    __HAL_RCC_PWR_CLK_ENABLE();                                 /* Enable Power Control clock.                          */
 80014ec:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <BSP_Init+0xd4>)
 80014ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014f4:	641a      	str	r2, [r3, #64]	; 0x40
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	9b00      	ldr	r3, [sp, #0]
                                                                /* See Note 3.                                          */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001500:	4b2d      	ldr	r3, [pc, #180]	; (80015b8 <BSP_Init+0xd8>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001510:	9301      	str	r3, [sp, #4]
 8001512:	9b01      	ldr	r3, [sp, #4]

                                                                /* PLLCLK    = HSE * (PLLN / PLLM)      = 336MHz.       */
                                                                /* SYSCLK    = PLLCLK / PLLP            = 168MHz.       */
                                                                /* OTG_FSCLK = PLLCLK / PLLQ            =  48MHz.       */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001514:	2301      	movs	r3, #1
 8001516:	930c      	str	r3, [sp, #48]	; 0x30
    RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 8001518:	930d      	str	r3, [sp, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 800151a:	2402      	movs	r4, #2
 800151c:	9412      	str	r4, [sp, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 800151e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001522:	9313      	str	r3, [sp, #76]	; 0x4c
    RCC_OscInitStruct.PLL.PLLM       = BSP_BIT_RCC_PLLCFGR_PLLM;
 8001524:	2308      	movs	r3, #8
 8001526:	9314      	str	r3, [sp, #80]	; 0x50
    RCC_OscInitStruct.PLL.PLLN       = BSP_BIT_RCC_PLLCFGR_PLLN;
 8001528:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800152c:	9315      	str	r3, [sp, #84]	; 0x54
    RCC_OscInitStruct.PLL.PLLP       = BSP_BIT_RCC_PLLCFGR_PLLP;
 800152e:	9416      	str	r4, [sp, #88]	; 0x58
    RCC_OscInitStruct.PLL.PLLQ       = BSP_BIT_RCC_PLLCFGR_PLLQ;
 8001530:	2307      	movs	r3, #7
 8001532:	9317      	str	r3, [sp, #92]	; 0x5c
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001534:	a80c      	add	r0, sp, #48	; 0x30
 8001536:	f000 fd29 	bl	8001f8c <HAL_RCC_OscConfig>


    RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_SYSCLK |
 800153a:	230f      	movs	r3, #15
 800153c:	9307      	str	r3, [sp, #28]
                                       RCC_CLOCKTYPE_HCLK   |
                                       RCC_CLOCKTYPE_PCLK1  |
                                       RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 800153e:	9408      	str	r4, [sp, #32]
    RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;          /* HCLK    = AHBCLK  = PLL / AHBPRES(1) = 168MHz.       */
 8001540:	2300      	movs	r3, #0
 8001542:	9309      	str	r3, [sp, #36]	; 0x24
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;           /* APB1CLK = AHBCLK  / APB1DIV(4)       = 42MHz (max).  */
 8001544:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001548:	930a      	str	r3, [sp, #40]	; 0x28
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;           /* APB2CLK = AHBCLK  / APB2DIV(2)       = 84MHz.        */
 800154a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800154e:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001550:	2105      	movs	r1, #5
 8001552:	a807      	add	r0, sp, #28
 8001554:	f000 ff06 	bl	8002364 <HAL_RCC_ClockConfig>

                                                                /* STM32F405x/407x/415x/417x Revision Z devices: ...... */
    if (HAL_GetREVID() == 0x1001)                               /* ....prefetch is supported                            */
 8001558:	f000 fb9e 	bl	8001c98 <HAL_GetREVID>
 800155c:	f241 0301 	movw	r3, #4097	; 0x1001
 8001560:	4298      	cmp	r0, r3
 8001562:	d104      	bne.n	800156e <BSP_Init+0x8e>
    {
      __HAL_FLASH_PREFETCH_BUFFER_ENABLE();                     /* Enable the Flash prefetch                            */
 8001564:	4a15      	ldr	r2, [pc, #84]	; (80015bc <BSP_Init+0xdc>)
 8001566:	6813      	ldr	r3, [r2, #0]
 8001568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156c:	6013      	str	r3, [r2, #0]

static void  BSP_USB_OTG_Init()
{
    GPIO_InitTypeDef  gpio_init;

    BSP_PeriphEn(BSP_PERIPH_ID_GPIOC);                          /* Configure GPIOG for LED1 and LED2                    */
 800156e:	2002      	movs	r0, #2
 8001570:	f000 fac8 	bl	8001b04 <BSP_PeriphEn>

    gpio_init.Pin   = BSP_GPIOC_USBOTG_VBUS_ON;    
 8001574:	2401      	movs	r4, #1
 8001576:	9402      	str	r4, [sp, #8]
    gpio_init.Mode  = GPIO_MODE_OUTPUT_PP;
 8001578:	9403      	str	r4, [sp, #12]
    gpio_init.Pull  = GPIO_PULLUP;
 800157a:	9404      	str	r4, [sp, #16]
    gpio_init.Speed = GPIO_SPEED_HIGH;
 800157c:	2503      	movs	r5, #3
 800157e:	9505      	str	r5, [sp, #20]

    HAL_GPIO_Init(GPIOC, &gpio_init);    
 8001580:	4e0f      	ldr	r6, [pc, #60]	; (80015c0 <BSP_Init+0xe0>)
 8001582:	a902      	add	r1, sp, #8
 8001584:	4630      	mov	r0, r6
 8001586:	f000 fbdd 	bl	8001d44 <HAL_GPIO_Init>
    {
      __HAL_FLASH_PREFETCH_BUFFER_ENABLE();                     /* Enable the Flash prefetch                            */
    }

    BSP_USB_OTG_Init();
    HAL_GPIO_WritePin(GPIOC, BSP_GPIOC_USBOTG_VBUS_ON, GPIO_PIN_SET);
 800158a:	4622      	mov	r2, r4
 800158c:	4621      	mov	r1, r4
 800158e:	4630      	mov	r0, r6
 8001590:	f000 fcca 	bl	8001f28 <HAL_GPIO_WritePin>

static void  BSP_LED_Init()
{
    GPIO_InitTypeDef  gpio_init;

    BSP_PeriphEn(BSP_PERIPH_ID_GPIOD);                          /* Configure GPIOG for LED1 and LED2                    */
 8001594:	4628      	mov	r0, r5
 8001596:	f000 fab5 	bl	8001b04 <BSP_PeriphEn>

    gpio_init.Pin   = BSP_GPIOD_LED1 | BSP_GPIOD_LED2 | BSP_GPIOD_LED3 | BSP_GPIOD_LED4;    
 800159a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800159e:	9302      	str	r3, [sp, #8]
    gpio_init.Mode  = GPIO_MODE_OUTPUT_PP;
 80015a0:	9403      	str	r4, [sp, #12]
    gpio_init.Pull  = GPIO_PULLUP;
 80015a2:	9404      	str	r4, [sp, #16]
    gpio_init.Speed = GPIO_SPEED_HIGH;
 80015a4:	9505      	str	r5, [sp, #20]

    HAL_GPIO_Init(GPIOD, &gpio_init);    
 80015a6:	a902      	add	r1, sp, #8
 80015a8:	4806      	ldr	r0, [pc, #24]	; (80015c4 <BSP_Init+0xe4>)
 80015aa:	f000 fbcb 	bl	8001d44 <HAL_GPIO_Init>
#ifdef TRACE_EN                                                 /* See project / compiler preprocessor options.         */
    BSP_CPU_REG_DBGMCU_CR |=  BSP_DBGMCU_CR_TRACE_IOEN_MASK;    /* Enable tracing (see Note #2).                        */
    BSP_CPU_REG_DBGMCU_CR &= ~BSP_DBGMCU_CR_TRACE_MODE_MASK;    /* Clr trace mode sel bits.                             */
    BSP_CPU_REG_DBGMCU_CR |=  BSP_DBGMCU_CR_TRACE_MODE_SYNC_04; /* Cfg trace mode to synch 4-bit.                       */
#endif
}
 80015ae:	b018      	add	sp, #96	; 0x60
 80015b0:	bd70      	pop	{r4, r5, r6, pc}
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40007000 	.word	0x40007000
 80015bc:	40023c00 	.word	0x40023c00
 80015c0:	40020800 	.word	0x40020800
 80015c4:	40020c00 	.word	0x40020c00

080015c8 <BSP_CPU_ClkFreq>:
* Note(s)     : none.
*********************************************************************************************************
*/

CPU_INT32U  BSP_CPU_ClkFreq (void)
{
 80015c8:	b508      	push	{r3, lr}
    CPU_INT32U  hclk_freq;


    hclk_freq = HAL_RCC_GetHCLKFreq();
 80015ca:	f001 f855 	bl	8002678 <HAL_RCC_GetHCLKFreq>
    return (hclk_freq);
}
 80015ce:	bd08      	pop	{r3, pc}

080015d0 <BSP_Tick_Init>:
*
* Note(s)     : none.
*********************************************************************************************************
*/
void BSP_Tick_Init (void)
{
 80015d0:	b508      	push	{r3, lr}
CPU_INT32U  BSP_CPU_ClkFreq (void)
{
    CPU_INT32U  hclk_freq;


    hclk_freq = HAL_RCC_GetHCLKFreq();
 80015d2:	f001 f851 	bl	8002678 <HAL_RCC_GetHCLKFreq>
    cnts  = cpu_clk_freq / (CPU_INT32U)OSCfg_TickRate_Hz;       /* Determine nbr SysTick increments.                    */
#else
    cnts  = cpu_clk_freq / (CPU_INT32U)OS_TICKS_PER_SEC;        /* Determine nbr SysTick increments.                    */
#endif

    OS_CPU_SysTickInit(cnts);                                   /* Init uC/OS periodic time src (SysTick).              */
 80015d6:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <BSP_Tick_Init+0x14>)
 80015d8:	fba3 3000 	umull	r3, r0, r3, r0
 80015dc:	0940      	lsrs	r0, r0, #5
 80015de:	f001 fe61 	bl	80032a4 <OS_CPU_SysTickInit>
 80015e2:	bd08      	pop	{r3, pc}
 80015e4:	51eb851f 	.word	0x51eb851f

080015e8 <HAL_InitTick>:
* Note(s)     : none.
*********************************************************************************************************
*/

HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e8:	b508      	push	{r3, lr}
    HAL_NVIC_SetPriorityGrouping(0);
 80015ea:	2000      	movs	r0, #0
 80015ec:	f000 fb5a 	bl	8001ca4 <HAL_NVIC_SetPriorityGrouping>

    if (OSRunning > 0u) {                                       /*Check if multi-tasking has started.                   */
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <HAL_InitTick+0x18>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	b10b      	cbz	r3, 80015fa <HAL_InitTick+0x12>
        BSP_Tick_Init();
 80015f6:	f7ff ffeb 	bl	80015d0 <BSP_Tick_Init>
    }

    return (HAL_OK);
}
 80015fa:	2000      	movs	r0, #0
 80015fc:	bd08      	pop	{r3, pc}
 80015fe:	bf00      	nop
 8001600:	200021bd 	.word	0x200021bd

08001604 <BSP_LED_Off>:
//              break;
//     }
// }

void  BSP_LED_Off (CPU_INT08U led)
{
 8001604:	b508      	push	{r3, lr}
    switch (led) {
 8001606:	2804      	cmp	r0, #4
 8001608:	d826      	bhi.n	8001658 <BSP_LED_Off+0x54>
 800160a:	e8df f000 	tbb	[pc, r0]
 800160e:	0a03      	.short	0x0a03
 8001610:	1811      	.short	0x1811
 8001612:	1f          	.byte	0x1f
 8001613:	00          	.byte	0x00
        case 0u:
             HAL_GPIO_WritePin(GPIOD, (BSP_GPIOD_LED1 | BSP_GPIOD_LED2 | BSP_GPIOD_LED3 | BSP_GPIOD_LED4), GPIO_PIN_RESET);             
 8001614:	2200      	movs	r2, #0
 8001616:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800161a:	4810      	ldr	r0, [pc, #64]	; (800165c <BSP_LED_Off+0x58>)
 800161c:	f000 fc84 	bl	8001f28 <HAL_GPIO_WritePin>
             break;
 8001620:	bd08      	pop	{r3, pc}

        case 1u:
             HAL_GPIO_WritePin(GPIOD, BSP_GPIOD_LED1, GPIO_PIN_RESET);
 8001622:	2200      	movs	r2, #0
 8001624:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001628:	480c      	ldr	r0, [pc, #48]	; (800165c <BSP_LED_Off+0x58>)
 800162a:	f000 fc7d 	bl	8001f28 <HAL_GPIO_WritePin>
             break;
 800162e:	bd08      	pop	{r3, pc}


        case 2u:
             HAL_GPIO_WritePin(GPIOD, BSP_GPIOD_LED2, GPIO_PIN_RESET);
 8001630:	2200      	movs	r2, #0
 8001632:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001636:	4809      	ldr	r0, [pc, #36]	; (800165c <BSP_LED_Off+0x58>)
 8001638:	f000 fc76 	bl	8001f28 <HAL_GPIO_WritePin>
             break;
 800163c:	bd08      	pop	{r3, pc}


        case 3u:
             HAL_GPIO_WritePin(GPIOD, BSP_GPIOD_LED3, GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001644:	4805      	ldr	r0, [pc, #20]	; (800165c <BSP_LED_Off+0x58>)
 8001646:	f000 fc6f 	bl	8001f28 <HAL_GPIO_WritePin>
             break;
 800164a:	bd08      	pop	{r3, pc}


        case 4u:
             HAL_GPIO_WritePin(GPIOD, BSP_GPIOD_LED4, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001652:	4802      	ldr	r0, [pc, #8]	; (800165c <BSP_LED_Off+0x58>)
 8001654:	f000 fc68 	bl	8001f28 <HAL_GPIO_WritePin>
 8001658:	bd08      	pop	{r3, pc}
 800165a:	bf00      	nop
 800165c:	40020c00 	.word	0x40020c00

08001660 <BSP_LED_Toggle>:
//              break;
//     }
// }

void  BSP_LED_Toggle (CPU_INT08U  led)
{
 8001660:	b508      	push	{r3, lr}
    switch (led) {
 8001662:	2804      	cmp	r0, #4
 8001664:	d821      	bhi.n	80016aa <BSP_LED_Toggle+0x4a>
 8001666:	e8df f000 	tbb	[pc, r0]
 800166a:	0903      	.short	0x0903
 800166c:	150f      	.short	0x150f
 800166e:	1b          	.byte	0x1b
 800166f:	00          	.byte	0x00
        case 0u:
             HAL_GPIO_TogglePin(GPIOD, (BSP_GPIOD_LED1 | BSP_GPIOD_LED2 | BSP_GPIOD_LED3 | BSP_GPIOD_LED4));             
 8001670:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001674:	480d      	ldr	r0, [pc, #52]	; (80016ac <BSP_LED_Toggle+0x4c>)
 8001676:	f000 fc5d 	bl	8001f34 <HAL_GPIO_TogglePin>
             break;
 800167a:	bd08      	pop	{r3, pc}

        case 1u:
             HAL_GPIO_TogglePin(GPIOD,BSP_GPIOD_LED1);
 800167c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001680:	480a      	ldr	r0, [pc, #40]	; (80016ac <BSP_LED_Toggle+0x4c>)
 8001682:	f000 fc57 	bl	8001f34 <HAL_GPIO_TogglePin>
             break;
 8001686:	bd08      	pop	{r3, pc}


        case 2u:
             HAL_GPIO_TogglePin(GPIOD, BSP_GPIOD_LED2);
 8001688:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800168c:	4807      	ldr	r0, [pc, #28]	; (80016ac <BSP_LED_Toggle+0x4c>)
 800168e:	f000 fc51 	bl	8001f34 <HAL_GPIO_TogglePin>
             break;
 8001692:	bd08      	pop	{r3, pc}


        case 3u:
             HAL_GPIO_TogglePin(GPIOD, BSP_GPIOD_LED3);
 8001694:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001698:	4804      	ldr	r0, [pc, #16]	; (80016ac <BSP_LED_Toggle+0x4c>)
 800169a:	f000 fc4b 	bl	8001f34 <HAL_GPIO_TogglePin>
             break;
 800169e:	bd08      	pop	{r3, pc}


        case 4u:
             HAL_GPIO_TogglePin(GPIOD, BSP_GPIOD_LED4);
 80016a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016a4:	4801      	ldr	r0, [pc, #4]	; (80016ac <BSP_LED_Toggle+0x4c>)
 80016a6:	f000 fc45 	bl	8001f34 <HAL_GPIO_TogglePin>
 80016aa:	bd08      	pop	{r3, pc}
 80016ac:	40020c00 	.word	0x40020c00

080016b0 <BSP_IntHandlerDummy>:
* Note(s)     : none.
*********************************************************************************************************
*/

static  void  BSP_IntHandlerDummy (void)
{
 80016b0:	e7fe      	b.n	80016b0 <BSP_IntHandlerDummy>
 80016b2:	bf00      	nop

080016b4 <BSP_IntHandler>:
* Note(s)     : none.
*********************************************************************************************************
*/

static  void  BSP_IntHandler (CPU_DATA  int_id)
{
 80016b4:	b538      	push	{r3, r4, r5, lr}
 80016b6:	4604      	mov	r4, r0
    CPU_FNCT_VOID  isr;
    CPU_SR_ALLOC();


    CPU_CRITICAL_ENTER();                                       /* Tell the OS that we are starting an ISR            */
 80016b8:	f7fe fd8e 	bl	80001d8 <CPU_SR_Save>
 80016bc:	4605      	mov	r5, r0
 80016be:	f001 fba9 	bl	8002e14 <CPU_IntDisMeasStart>

    OSIntEnter();
 80016c2:	f001 fe47 	bl	8003354 <OSIntEnter>

    CPU_CRITICAL_EXIT();
 80016c6:	f001 fbbd 	bl	8002e44 <CPU_IntDisMeasStop>
 80016ca:	4628      	mov	r0, r5
 80016cc:	f7fe fd88 	bl	80001e0 <CPU_SR_Restore>

    if (int_id < BSP_INT_SRC_NBR) {
 80016d0:	2c51      	cmp	r4, #81	; 0x51
 80016d2:	d804      	bhi.n	80016de <BSP_IntHandler+0x2a>
        isr = BSP_IntVectTbl[int_id];
 80016d4:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <BSP_IntHandler+0x30>)
 80016d6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
        if (isr != (CPU_FNCT_VOID)0u) {
 80016da:	b103      	cbz	r3, 80016de <BSP_IntHandler+0x2a>
            isr();
 80016dc:	4798      	blx	r3
        }
    }

    OSIntExit();                                                /* Tell the OS that we are leaving the ISR            */
 80016de:	f001 fe49 	bl	8003374 <OSIntExit>
 80016e2:	bd38      	pop	{r3, r4, r5, pc}
 80016e4:	20001964 	.word	0x20001964

080016e8 <BSP_IntDisAll>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  BSP_IntDisAll (void)
{
 80016e8:	b508      	push	{r3, lr}
    CPU_IntDis();
 80016ea:	f7fe fd71 	bl	80001d0 <CPU_IntDis>
 80016ee:	bd08      	pop	{r3, pc}

080016f0 <BSP_IntVectSet>:
                      CPU_FNCT_VOID  isr)
{
    CPU_SR_ALLOC();


    if (int_id < BSP_INT_SRC_NBR) {
 80016f0:	2851      	cmp	r0, #81	; 0x51
 80016f2:	d810      	bhi.n	8001716 <BSP_IntVectSet+0x26>
*********************************************************************************************************
*/

void  BSP_IntVectSet (CPU_DATA       int_id,
                      CPU_FNCT_VOID  isr)
{
 80016f4:	b570      	push	{r4, r5, r6, lr}
 80016f6:	460d      	mov	r5, r1
 80016f8:	4604      	mov	r4, r0
    CPU_SR_ALLOC();


    if (int_id < BSP_INT_SRC_NBR) {
        CPU_CRITICAL_ENTER();
 80016fa:	f7fe fd6d 	bl	80001d8 <CPU_SR_Save>
 80016fe:	4606      	mov	r6, r0
 8001700:	f001 fb88 	bl	8002e14 <CPU_IntDisMeasStart>
        BSP_IntVectTbl[int_id] = isr;
 8001704:	4b04      	ldr	r3, [pc, #16]	; (8001718 <BSP_IntVectSet+0x28>)
 8001706:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
        CPU_CRITICAL_EXIT();
 800170a:	f001 fb9b 	bl	8002e44 <CPU_IntDisMeasStop>
 800170e:	4630      	mov	r0, r6
 8001710:	f7fe fd66 	bl	80001e0 <CPU_SR_Restore>
 8001714:	bd70      	pop	{r4, r5, r6, pc}
 8001716:	4770      	bx	lr
 8001718:	20001964 	.word	0x20001964

0800171c <BSP_IntInit>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  BSP_IntInit (void)
{
 800171c:	b538      	push	{r3, r4, r5, lr}
    CPU_DATA  int_id;


    for (int_id = 0u; int_id < BSP_INT_SRC_NBR; int_id++) {
 800171e:	2400      	movs	r4, #0
        BSP_IntVectSet(int_id, BSP_IntHandlerDummy);
 8001720:	4d04      	ldr	r5, [pc, #16]	; (8001734 <BSP_IntInit+0x18>)
 8001722:	4629      	mov	r1, r5
 8001724:	4620      	mov	r0, r4
 8001726:	f7ff ffe3 	bl	80016f0 <BSP_IntVectSet>
void  BSP_IntInit (void)
{
    CPU_DATA  int_id;


    for (int_id = 0u; int_id < BSP_INT_SRC_NBR; int_id++) {
 800172a:	3401      	adds	r4, #1
 800172c:	2c52      	cmp	r4, #82	; 0x52
 800172e:	d1f8      	bne.n	8001722 <BSP_IntInit+0x6>
        BSP_IntVectSet(int_id, BSP_IntHandlerDummy);
    }
}
 8001730:	bd38      	pop	{r3, r4, r5, pc}
 8001732:	bf00      	nop
 8001734:	080016b1 	.word	0x080016b1

08001738 <BSP_IntHandlerWWDG>:
*
* Note(s)     : none.
*********************************************************************************************************
*/

void  BSP_IntHandlerWWDG               (void)  { BSP_IntHandler(BSP_INT_ID_WWDG);                }
 8001738:	b508      	push	{r3, lr}
 800173a:	2000      	movs	r0, #0
 800173c:	f7ff ffba 	bl	80016b4 <BSP_IntHandler>
 8001740:	bd08      	pop	{r3, pc}
 8001742:	bf00      	nop

08001744 <BSP_IntHandlerPVD>:
void  BSP_IntHandlerPVD                (void)  { BSP_IntHandler(BSP_INT_ID_PVD);                 }
 8001744:	b508      	push	{r3, lr}
 8001746:	2001      	movs	r0, #1
 8001748:	f7ff ffb4 	bl	80016b4 <BSP_IntHandler>
 800174c:	bd08      	pop	{r3, pc}
 800174e:	bf00      	nop

08001750 <BSP_IntHandlerTAMP_STAMP>:
void  BSP_IntHandlerTAMP_STAMP         (void)  { BSP_IntHandler(BSP_INT_ID_TAMP_STAMP);          }
 8001750:	b508      	push	{r3, lr}
 8001752:	2002      	movs	r0, #2
 8001754:	f7ff ffae 	bl	80016b4 <BSP_IntHandler>
 8001758:	bd08      	pop	{r3, pc}
 800175a:	bf00      	nop

0800175c <BSP_IntHandlerRTC_WKUP>:
void  BSP_IntHandlerRTC_WKUP           (void)  { BSP_IntHandler(BSP_INT_ID_RTC_WKUP);            }
 800175c:	b508      	push	{r3, lr}
 800175e:	2003      	movs	r0, #3
 8001760:	f7ff ffa8 	bl	80016b4 <BSP_IntHandler>
 8001764:	bd08      	pop	{r3, pc}
 8001766:	bf00      	nop

08001768 <BSP_IntHandlerFLASH>:
void  BSP_IntHandlerFLASH              (void)  { BSP_IntHandler(BSP_INT_ID_FLASH);               }
 8001768:	b508      	push	{r3, lr}
 800176a:	2004      	movs	r0, #4
 800176c:	f7ff ffa2 	bl	80016b4 <BSP_IntHandler>
 8001770:	bd08      	pop	{r3, pc}
 8001772:	bf00      	nop

08001774 <BSP_IntHandlerRCC>:
void  BSP_IntHandlerRCC                (void)  { BSP_IntHandler(BSP_INT_ID_RCC);                 }
 8001774:	b508      	push	{r3, lr}
 8001776:	2005      	movs	r0, #5
 8001778:	f7ff ff9c 	bl	80016b4 <BSP_IntHandler>
 800177c:	bd08      	pop	{r3, pc}
 800177e:	bf00      	nop

08001780 <BSP_IntHandlerEXTI0>:
void  BSP_IntHandlerEXTI0              (void)  { BSP_IntHandler(BSP_INT_ID_EXTI0);               }
 8001780:	b508      	push	{r3, lr}
 8001782:	2006      	movs	r0, #6
 8001784:	f7ff ff96 	bl	80016b4 <BSP_IntHandler>
 8001788:	bd08      	pop	{r3, pc}
 800178a:	bf00      	nop

0800178c <BSP_IntHandlerEXTI1>:
void  BSP_IntHandlerEXTI1              (void)  { BSP_IntHandler(BSP_INT_ID_EXTI1);               }
 800178c:	b508      	push	{r3, lr}
 800178e:	2007      	movs	r0, #7
 8001790:	f7ff ff90 	bl	80016b4 <BSP_IntHandler>
 8001794:	bd08      	pop	{r3, pc}
 8001796:	bf00      	nop

08001798 <BSP_IntHandlerEXTI2>:
void  BSP_IntHandlerEXTI2              (void)  { BSP_IntHandler(BSP_INT_ID_EXTI2);               }
 8001798:	b508      	push	{r3, lr}
 800179a:	2008      	movs	r0, #8
 800179c:	f7ff ff8a 	bl	80016b4 <BSP_IntHandler>
 80017a0:	bd08      	pop	{r3, pc}
 80017a2:	bf00      	nop

080017a4 <BSP_IntHandlerEXTI3>:
void  BSP_IntHandlerEXTI3              (void)  { BSP_IntHandler(BSP_INT_ID_EXTI3);               }
 80017a4:	b508      	push	{r3, lr}
 80017a6:	2009      	movs	r0, #9
 80017a8:	f7ff ff84 	bl	80016b4 <BSP_IntHandler>
 80017ac:	bd08      	pop	{r3, pc}
 80017ae:	bf00      	nop

080017b0 <BSP_IntHandlerEXTI4>:
void  BSP_IntHandlerEXTI4              (void)  { BSP_IntHandler(BSP_INT_ID_EXTI4);               }
 80017b0:	b508      	push	{r3, lr}
 80017b2:	200a      	movs	r0, #10
 80017b4:	f7ff ff7e 	bl	80016b4 <BSP_IntHandler>
 80017b8:	bd08      	pop	{r3, pc}
 80017ba:	bf00      	nop

080017bc <BSP_IntHandlerDMA1_CH0>:
void  BSP_IntHandlerDMA1_CH0           (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_CH0);            }
 80017bc:	b508      	push	{r3, lr}
 80017be:	200b      	movs	r0, #11
 80017c0:	f7ff ff78 	bl	80016b4 <BSP_IntHandler>
 80017c4:	bd08      	pop	{r3, pc}
 80017c6:	bf00      	nop

080017c8 <BSP_IntHandlerDMA1_CH1>:
void  BSP_IntHandlerDMA1_CH1           (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_CH1);            }
 80017c8:	b508      	push	{r3, lr}
 80017ca:	200c      	movs	r0, #12
 80017cc:	f7ff ff72 	bl	80016b4 <BSP_IntHandler>
 80017d0:	bd08      	pop	{r3, pc}
 80017d2:	bf00      	nop

080017d4 <BSP_IntHandlerDMA1_CH2>:
void  BSP_IntHandlerDMA1_CH2           (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_CH2);            }
 80017d4:	b508      	push	{r3, lr}
 80017d6:	200d      	movs	r0, #13
 80017d8:	f7ff ff6c 	bl	80016b4 <BSP_IntHandler>
 80017dc:	bd08      	pop	{r3, pc}
 80017de:	bf00      	nop

080017e0 <BSP_IntHandlerDMA1_CH3>:
void  BSP_IntHandlerDMA1_CH3           (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_CH3);            }
 80017e0:	b508      	push	{r3, lr}
 80017e2:	200e      	movs	r0, #14
 80017e4:	f7ff ff66 	bl	80016b4 <BSP_IntHandler>
 80017e8:	bd08      	pop	{r3, pc}
 80017ea:	bf00      	nop

080017ec <BSP_IntHandlerDMA1_CH4>:
void  BSP_IntHandlerDMA1_CH4           (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_CH4);            }
 80017ec:	b508      	push	{r3, lr}
 80017ee:	200f      	movs	r0, #15
 80017f0:	f7ff ff60 	bl	80016b4 <BSP_IntHandler>
 80017f4:	bd08      	pop	{r3, pc}
 80017f6:	bf00      	nop

080017f8 <BSP_IntHandlerDMA1_CH5>:
void  BSP_IntHandlerDMA1_CH5           (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_CH5);            }
 80017f8:	b508      	push	{r3, lr}
 80017fa:	2010      	movs	r0, #16
 80017fc:	f7ff ff5a 	bl	80016b4 <BSP_IntHandler>
 8001800:	bd08      	pop	{r3, pc}
 8001802:	bf00      	nop

08001804 <BSP_IntHandlerDMA1_CH6>:
void  BSP_IntHandlerDMA1_CH6           (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_CH6);            }
 8001804:	b508      	push	{r3, lr}
 8001806:	2011      	movs	r0, #17
 8001808:	f7ff ff54 	bl	80016b4 <BSP_IntHandler>
 800180c:	bd08      	pop	{r3, pc}
 800180e:	bf00      	nop

08001810 <BSP_IntHandlerADC>:
void  BSP_IntHandlerADC                (void)  { BSP_IntHandler(BSP_INT_ID_ADC);                 }
 8001810:	b508      	push	{r3, lr}
 8001812:	2012      	movs	r0, #18
 8001814:	f7ff ff4e 	bl	80016b4 <BSP_IntHandler>
 8001818:	bd08      	pop	{r3, pc}
 800181a:	bf00      	nop

0800181c <BSP_IntHandlerCAN1_TX>:
void  BSP_IntHandlerCAN1_TX            (void)  { BSP_IntHandler(BSP_INT_ID_CAN1_TX);             }
 800181c:	b508      	push	{r3, lr}
 800181e:	2013      	movs	r0, #19
 8001820:	f7ff ff48 	bl	80016b4 <BSP_IntHandler>
 8001824:	bd08      	pop	{r3, pc}
 8001826:	bf00      	nop

08001828 <BSP_IntHandlerCAN1_RX0>:
void  BSP_IntHandlerCAN1_RX0           (void)  { BSP_IntHandler(BSP_INT_ID_CAN1_RX0);            }
 8001828:	b508      	push	{r3, lr}
 800182a:	2014      	movs	r0, #20
 800182c:	f7ff ff42 	bl	80016b4 <BSP_IntHandler>
 8001830:	bd08      	pop	{r3, pc}
 8001832:	bf00      	nop

08001834 <BSP_IntHandlerCAN1_RX1>:
void  BSP_IntHandlerCAN1_RX1           (void)  { BSP_IntHandler(BSP_INT_ID_CAN1_RX1);            }
 8001834:	b508      	push	{r3, lr}
 8001836:	2015      	movs	r0, #21
 8001838:	f7ff ff3c 	bl	80016b4 <BSP_IntHandler>
 800183c:	bd08      	pop	{r3, pc}
 800183e:	bf00      	nop

08001840 <BSP_IntHandlerCAN1_SCE>:
void  BSP_IntHandlerCAN1_SCE           (void)  { BSP_IntHandler(BSP_INT_ID_CAN1_SCE);            }
 8001840:	b508      	push	{r3, lr}
 8001842:	2016      	movs	r0, #22
 8001844:	f7ff ff36 	bl	80016b4 <BSP_IntHandler>
 8001848:	bd08      	pop	{r3, pc}
 800184a:	bf00      	nop

0800184c <BSP_IntHandlerEXTI9_5>:
void  BSP_IntHandlerEXTI9_5            (void)  { BSP_IntHandler(BSP_INT_ID_EXTI9_5);             }
 800184c:	b508      	push	{r3, lr}
 800184e:	2017      	movs	r0, #23
 8001850:	f7ff ff30 	bl	80016b4 <BSP_IntHandler>
 8001854:	bd08      	pop	{r3, pc}
 8001856:	bf00      	nop

08001858 <BSP_IntHandlerTIM1_BRK_TIM9>:
void  BSP_IntHandlerTIM1_BRK_TIM9      (void)  { BSP_IntHandler(BSP_INT_ID_TIM1_BRK_TIM9);       }
 8001858:	b508      	push	{r3, lr}
 800185a:	2018      	movs	r0, #24
 800185c:	f7ff ff2a 	bl	80016b4 <BSP_IntHandler>
 8001860:	bd08      	pop	{r3, pc}
 8001862:	bf00      	nop

08001864 <BSP_IntHandlerTIM1_UP_TIM10>:
void  BSP_IntHandlerTIM1_UP_TIM10      (void)  { BSP_IntHandler(BSP_INT_ID_TIM1_UP_TIM10);       }
 8001864:	b508      	push	{r3, lr}
 8001866:	2019      	movs	r0, #25
 8001868:	f7ff ff24 	bl	80016b4 <BSP_IntHandler>
 800186c:	bd08      	pop	{r3, pc}
 800186e:	bf00      	nop

08001870 <BSP_IntHandlerTIM1_TRG_COM_TIM11>:
void  BSP_IntHandlerTIM1_TRG_COM_TIM11 (void)  { BSP_IntHandler(BSP_INT_ID_TIM1_TRG_COM_TIM11);  }
 8001870:	b508      	push	{r3, lr}
 8001872:	201a      	movs	r0, #26
 8001874:	f7ff ff1e 	bl	80016b4 <BSP_IntHandler>
 8001878:	bd08      	pop	{r3, pc}
 800187a:	bf00      	nop

0800187c <BSP_IntHandlerTIM1_CC>:
void  BSP_IntHandlerTIM1_CC            (void)  { BSP_IntHandler(BSP_INT_ID_TIM1_CC);             }
 800187c:	b508      	push	{r3, lr}
 800187e:	201b      	movs	r0, #27
 8001880:	f7ff ff18 	bl	80016b4 <BSP_IntHandler>
 8001884:	bd08      	pop	{r3, pc}
 8001886:	bf00      	nop

08001888 <BSP_IntHandlerTIM2>:
void  BSP_IntHandlerTIM2               (void)  { BSP_IntHandler(BSP_INT_ID_TIM2);                }
 8001888:	b508      	push	{r3, lr}
 800188a:	201c      	movs	r0, #28
 800188c:	f7ff ff12 	bl	80016b4 <BSP_IntHandler>
 8001890:	bd08      	pop	{r3, pc}
 8001892:	bf00      	nop

08001894 <BSP_IntHandlerTIM3>:
void  BSP_IntHandlerTIM3               (void)  { BSP_IntHandler(BSP_INT_ID_TIM3);                }
 8001894:	b508      	push	{r3, lr}
 8001896:	201d      	movs	r0, #29
 8001898:	f7ff ff0c 	bl	80016b4 <BSP_IntHandler>
 800189c:	bd08      	pop	{r3, pc}
 800189e:	bf00      	nop

080018a0 <BSP_IntHandlerTIM4>:
void  BSP_IntHandlerTIM4               (void)  { BSP_IntHandler(BSP_INT_ID_TIM4);                }
 80018a0:	b508      	push	{r3, lr}
 80018a2:	201e      	movs	r0, #30
 80018a4:	f7ff ff06 	bl	80016b4 <BSP_IntHandler>
 80018a8:	bd08      	pop	{r3, pc}
 80018aa:	bf00      	nop

080018ac <BSP_IntHandlerI2C1_EV>:
void  BSP_IntHandlerI2C1_EV            (void)  { BSP_IntHandler(BSP_INT_ID_I2C1_EV);             }
 80018ac:	b508      	push	{r3, lr}
 80018ae:	201f      	movs	r0, #31
 80018b0:	f7ff ff00 	bl	80016b4 <BSP_IntHandler>
 80018b4:	bd08      	pop	{r3, pc}
 80018b6:	bf00      	nop

080018b8 <BSP_IntHandlerI2C1_ER>:
void  BSP_IntHandlerI2C1_ER            (void)  { BSP_IntHandler(BSP_INT_ID_I2C1_ER);             }
 80018b8:	b508      	push	{r3, lr}
 80018ba:	2020      	movs	r0, #32
 80018bc:	f7ff fefa 	bl	80016b4 <BSP_IntHandler>
 80018c0:	bd08      	pop	{r3, pc}
 80018c2:	bf00      	nop

080018c4 <BSP_IntHandlerI2C2_EV>:
void  BSP_IntHandlerI2C2_EV            (void)  { BSP_IntHandler(BSP_INT_ID_I2C2_EV);             }
 80018c4:	b508      	push	{r3, lr}
 80018c6:	2021      	movs	r0, #33	; 0x21
 80018c8:	f7ff fef4 	bl	80016b4 <BSP_IntHandler>
 80018cc:	bd08      	pop	{r3, pc}
 80018ce:	bf00      	nop

080018d0 <BSP_IntHandlerI2C2_ER>:
void  BSP_IntHandlerI2C2_ER            (void)  { BSP_IntHandler(BSP_INT_ID_I2C2_ER);             }
 80018d0:	b508      	push	{r3, lr}
 80018d2:	2022      	movs	r0, #34	; 0x22
 80018d4:	f7ff feee 	bl	80016b4 <BSP_IntHandler>
 80018d8:	bd08      	pop	{r3, pc}
 80018da:	bf00      	nop

080018dc <BSP_IntHandlerSPI1>:
void  BSP_IntHandlerSPI1               (void)  { BSP_IntHandler(BSP_INT_ID_SPI1);                }
 80018dc:	b508      	push	{r3, lr}
 80018de:	2023      	movs	r0, #35	; 0x23
 80018e0:	f7ff fee8 	bl	80016b4 <BSP_IntHandler>
 80018e4:	bd08      	pop	{r3, pc}
 80018e6:	bf00      	nop

080018e8 <BSP_IntHandlerSPI2>:
void  BSP_IntHandlerSPI2               (void)  { BSP_IntHandler(BSP_INT_ID_SPI2);                }
 80018e8:	b508      	push	{r3, lr}
 80018ea:	2024      	movs	r0, #36	; 0x24
 80018ec:	f7ff fee2 	bl	80016b4 <BSP_IntHandler>
 80018f0:	bd08      	pop	{r3, pc}
 80018f2:	bf00      	nop

080018f4 <BSP_IntHandlerUSART1>:
void  BSP_IntHandlerUSART1             (void)  { BSP_IntHandler(BSP_INT_ID_USART1);              }
 80018f4:	b508      	push	{r3, lr}
 80018f6:	2025      	movs	r0, #37	; 0x25
 80018f8:	f7ff fedc 	bl	80016b4 <BSP_IntHandler>
 80018fc:	bd08      	pop	{r3, pc}
 80018fe:	bf00      	nop

08001900 <BSP_IntHandlerUSART3>:
void  BSP_IntHandlerUSART2             (void)  { BSP_IntHandler(BSP_INT_ID_USART2);              }
void  BSP_IntHandlerUSART3             (void)  { BSP_IntHandler(BSP_INT_ID_USART3);              }
 8001900:	b508      	push	{r3, lr}
 8001902:	2027      	movs	r0, #39	; 0x27
 8001904:	f7ff fed6 	bl	80016b4 <BSP_IntHandler>
 8001908:	bd08      	pop	{r3, pc}
 800190a:	bf00      	nop

0800190c <BSP_IntHandlerEXTI15_10>:
void  BSP_IntHandlerEXTI15_10          (void)  { BSP_IntHandler(BSP_INT_ID_EXTI15_10);           }
 800190c:	b508      	push	{r3, lr}
 800190e:	2028      	movs	r0, #40	; 0x28
 8001910:	f7ff fed0 	bl	80016b4 <BSP_IntHandler>
 8001914:	bd08      	pop	{r3, pc}
 8001916:	bf00      	nop

08001918 <BSP_IntHandlerRTCAlarm>:
void  BSP_IntHandlerRTCAlarm           (void)  { BSP_IntHandler(BSP_INT_ID_RTC_ALARM);           }
 8001918:	b508      	push	{r3, lr}
 800191a:	2029      	movs	r0, #41	; 0x29
 800191c:	f7ff feca 	bl	80016b4 <BSP_IntHandler>
 8001920:	bd08      	pop	{r3, pc}
 8001922:	bf00      	nop

08001924 <BSP_IntHandlerOTG_FS_WKUP>:
void  BSP_IntHandlerOTG_FS_WKUP        (void)  { BSP_IntHandler(BSP_INT_ID_OTG_FS_WKUP);         }
 8001924:	b508      	push	{r3, lr}
 8001926:	202a      	movs	r0, #42	; 0x2a
 8001928:	f7ff fec4 	bl	80016b4 <BSP_IntHandler>
 800192c:	bd08      	pop	{r3, pc}
 800192e:	bf00      	nop

08001930 <BSP_IntHandlerTIM8_BRK_TIM12>:
void  BSP_IntHandlerTIM8_BRK_TIM12     (void)  { BSP_IntHandler(BSP_INT_ID_TIM8_BRK_TIM12);      }
 8001930:	b508      	push	{r3, lr}
 8001932:	202b      	movs	r0, #43	; 0x2b
 8001934:	f7ff febe 	bl	80016b4 <BSP_IntHandler>
 8001938:	bd08      	pop	{r3, pc}
 800193a:	bf00      	nop

0800193c <BSP_IntHandlerTIM8_UP_TIM13>:
void  BSP_IntHandlerTIM8_UP_TIM13      (void)  { BSP_IntHandler(BSP_INT_ID_TIM8_UP_TIM13);       }
 800193c:	b508      	push	{r3, lr}
 800193e:	202c      	movs	r0, #44	; 0x2c
 8001940:	f7ff feb8 	bl	80016b4 <BSP_IntHandler>
 8001944:	bd08      	pop	{r3, pc}
 8001946:	bf00      	nop

08001948 <BSP_IntHandlerTIM8_TRG_COM_TIM14>:
void  BSP_IntHandlerTIM8_TRG_COM_TIM14 (void)  { BSP_IntHandler(BSP_INT_ID_TIM8_TRG_COM_TIM14);  }
 8001948:	b508      	push	{r3, lr}
 800194a:	202d      	movs	r0, #45	; 0x2d
 800194c:	f7ff feb2 	bl	80016b4 <BSP_IntHandler>
 8001950:	bd08      	pop	{r3, pc}
 8001952:	bf00      	nop

08001954 <BSP_IntHandlerTIM8_CC>:
void  BSP_IntHandlerTIM8_CC            (void)  { BSP_IntHandler(BSP_INT_ID_TIM8_CC);             }
 8001954:	b508      	push	{r3, lr}
 8001956:	202e      	movs	r0, #46	; 0x2e
 8001958:	f7ff feac 	bl	80016b4 <BSP_IntHandler>
 800195c:	bd08      	pop	{r3, pc}
 800195e:	bf00      	nop

08001960 <BSP_IntHandlerDMA1_STREAM7>:
void  BSP_IntHandlerDMA1_STREAM7       (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_STREAM7);        }
 8001960:	b508      	push	{r3, lr}
 8001962:	202f      	movs	r0, #47	; 0x2f
 8001964:	f7ff fea6 	bl	80016b4 <BSP_IntHandler>
 8001968:	bd08      	pop	{r3, pc}
 800196a:	bf00      	nop

0800196c <BSP_IntHandlerFSMC>:
void  BSP_IntHandlerFSMC               (void)  { BSP_IntHandler(BSP_INT_ID_FSMC);                }
 800196c:	b508      	push	{r3, lr}
 800196e:	2030      	movs	r0, #48	; 0x30
 8001970:	f7ff fea0 	bl	80016b4 <BSP_IntHandler>
 8001974:	bd08      	pop	{r3, pc}
 8001976:	bf00      	nop

08001978 <BSP_IntHandlerSDIO>:
void  BSP_IntHandlerSDIO               (void)  { BSP_IntHandler(BSP_INT_ID_SDIO);                }
 8001978:	b508      	push	{r3, lr}
 800197a:	2031      	movs	r0, #49	; 0x31
 800197c:	f7ff fe9a 	bl	80016b4 <BSP_IntHandler>
 8001980:	bd08      	pop	{r3, pc}
 8001982:	bf00      	nop

08001984 <BSP_IntHandlerTIM5>:
void  BSP_IntHandlerTIM5               (void)  { BSP_IntHandler(BSP_INT_ID_TIM5);                }
 8001984:	b508      	push	{r3, lr}
 8001986:	2032      	movs	r0, #50	; 0x32
 8001988:	f7ff fe94 	bl	80016b4 <BSP_IntHandler>
 800198c:	bd08      	pop	{r3, pc}
 800198e:	bf00      	nop

08001990 <BSP_IntHandlerSPI3>:
void  BSP_IntHandlerSPI3               (void)  { BSP_IntHandler(BSP_INT_ID_SPI3);                }
 8001990:	b508      	push	{r3, lr}
 8001992:	2033      	movs	r0, #51	; 0x33
 8001994:	f7ff fe8e 	bl	80016b4 <BSP_IntHandler>
 8001998:	bd08      	pop	{r3, pc}
 800199a:	bf00      	nop

0800199c <BSP_IntHandlerUSART4>:
void  BSP_IntHandlerUSART4             (void)  { BSP_IntHandler(BSP_INT_ID_USART4);              }
 800199c:	b508      	push	{r3, lr}
 800199e:	2034      	movs	r0, #52	; 0x34
 80019a0:	f7ff fe88 	bl	80016b4 <BSP_IntHandler>
 80019a4:	bd08      	pop	{r3, pc}
 80019a6:	bf00      	nop

080019a8 <BSP_IntHandlerUSART5>:
void  BSP_IntHandlerUSART5             (void)  { BSP_IntHandler(BSP_INT_ID_USART5);              }
 80019a8:	b508      	push	{r3, lr}
 80019aa:	2035      	movs	r0, #53	; 0x35
 80019ac:	f7ff fe82 	bl	80016b4 <BSP_IntHandler>
 80019b0:	bd08      	pop	{r3, pc}
 80019b2:	bf00      	nop

080019b4 <BSP_IntHandlerTIM6_DAC>:
void  BSP_IntHandlerTIM6_DAC           (void)  { BSP_IntHandler(BSP_INT_ID_TIM6_DAC);            }
 80019b4:	b508      	push	{r3, lr}
 80019b6:	2036      	movs	r0, #54	; 0x36
 80019b8:	f7ff fe7c 	bl	80016b4 <BSP_IntHandler>
 80019bc:	bd08      	pop	{r3, pc}
 80019be:	bf00      	nop

080019c0 <BSP_IntHandlerTIM7>:
void  BSP_IntHandlerTIM7               (void)  { BSP_IntHandler(BSP_INT_ID_TIM7);                }
 80019c0:	b508      	push	{r3, lr}
 80019c2:	2037      	movs	r0, #55	; 0x37
 80019c4:	f7ff fe76 	bl	80016b4 <BSP_IntHandler>
 80019c8:	bd08      	pop	{r3, pc}
 80019ca:	bf00      	nop

080019cc <BSP_IntHandlerDMA2_CH0>:
void  BSP_IntHandlerDMA2_CH0           (void)  { BSP_IntHandler(BSP_INT_ID_DMA2_CH0);            }
 80019cc:	b508      	push	{r3, lr}
 80019ce:	2038      	movs	r0, #56	; 0x38
 80019d0:	f7ff fe70 	bl	80016b4 <BSP_IntHandler>
 80019d4:	bd08      	pop	{r3, pc}
 80019d6:	bf00      	nop

080019d8 <BSP_IntHandlerDMA2_CH1>:
void  BSP_IntHandlerDMA2_CH1           (void)  { BSP_IntHandler(BSP_INT_ID_DMA2_CH1);            }
 80019d8:	b508      	push	{r3, lr}
 80019da:	2039      	movs	r0, #57	; 0x39
 80019dc:	f7ff fe6a 	bl	80016b4 <BSP_IntHandler>
 80019e0:	bd08      	pop	{r3, pc}
 80019e2:	bf00      	nop

080019e4 <BSP_IntHandlerDMA2_CH2>:
void  BSP_IntHandlerDMA2_CH2           (void)  { BSP_IntHandler(BSP_INT_ID_DMA2_CH2);            }
 80019e4:	b508      	push	{r3, lr}
 80019e6:	203a      	movs	r0, #58	; 0x3a
 80019e8:	f7ff fe64 	bl	80016b4 <BSP_IntHandler>
 80019ec:	bd08      	pop	{r3, pc}
 80019ee:	bf00      	nop

080019f0 <BSP_IntHandlerDMA2_CH3>:
void  BSP_IntHandlerDMA2_CH3           (void)  { BSP_IntHandler(BSP_INT_ID_DMA2_CH3);            }
 80019f0:	b508      	push	{r3, lr}
 80019f2:	203b      	movs	r0, #59	; 0x3b
 80019f4:	f7ff fe5e 	bl	80016b4 <BSP_IntHandler>
 80019f8:	bd08      	pop	{r3, pc}
 80019fa:	bf00      	nop

080019fc <BSP_IntHandlerDMA2_CH4>:
void  BSP_IntHandlerDMA2_CH4           (void)  { BSP_IntHandler(BSP_INT_ID_DMA2_CH4);            }
 80019fc:	b508      	push	{r3, lr}
 80019fe:	203c      	movs	r0, #60	; 0x3c
 8001a00:	f7ff fe58 	bl	80016b4 <BSP_IntHandler>
 8001a04:	bd08      	pop	{r3, pc}
 8001a06:	bf00      	nop

08001a08 <BSP_IntHandlerETH>:
void  BSP_IntHandlerETH                (void)  { BSP_IntHandler(BSP_INT_ID_ETH);                 }
 8001a08:	b508      	push	{r3, lr}
 8001a0a:	203d      	movs	r0, #61	; 0x3d
 8001a0c:	f7ff fe52 	bl	80016b4 <BSP_IntHandler>
 8001a10:	bd08      	pop	{r3, pc}
 8001a12:	bf00      	nop

08001a14 <BSP_IntHandlerETHWakeup>:
void  BSP_IntHandlerETHWakeup          (void)  { BSP_IntHandler(BSP_INT_ID_ETH_WKUP);            }
 8001a14:	b508      	push	{r3, lr}
 8001a16:	203e      	movs	r0, #62	; 0x3e
 8001a18:	f7ff fe4c 	bl	80016b4 <BSP_IntHandler>
 8001a1c:	bd08      	pop	{r3, pc}
 8001a1e:	bf00      	nop

08001a20 <BSP_IntHandlerCAN2_TX>:
void  BSP_IntHandlerCAN2_TX            (void)  { BSP_IntHandler(BSP_INT_ID_CAN2_TX);             }
 8001a20:	b508      	push	{r3, lr}
 8001a22:	203f      	movs	r0, #63	; 0x3f
 8001a24:	f7ff fe46 	bl	80016b4 <BSP_IntHandler>
 8001a28:	bd08      	pop	{r3, pc}
 8001a2a:	bf00      	nop

08001a2c <BSP_IntHandlerCAN2_RX0>:
void  BSP_IntHandlerCAN2_RX0           (void)  { BSP_IntHandler(BSP_INT_ID_CAN2_RX0);            }
 8001a2c:	b508      	push	{r3, lr}
 8001a2e:	2040      	movs	r0, #64	; 0x40
 8001a30:	f7ff fe40 	bl	80016b4 <BSP_IntHandler>
 8001a34:	bd08      	pop	{r3, pc}
 8001a36:	bf00      	nop

08001a38 <BSP_IntHandlerCAN2_RX1>:
void  BSP_IntHandlerCAN2_RX1           (void)  { BSP_IntHandler(BSP_INT_ID_CAN2_RX1);            }
 8001a38:	b508      	push	{r3, lr}
 8001a3a:	2041      	movs	r0, #65	; 0x41
 8001a3c:	f7ff fe3a 	bl	80016b4 <BSP_IntHandler>
 8001a40:	bd08      	pop	{r3, pc}
 8001a42:	bf00      	nop

08001a44 <BSP_IntHandlerCAN2_SCE>:
void  BSP_IntHandlerCAN2_SCE           (void)  { BSP_IntHandler(BSP_INT_ID_CAN2_SCE);            }
 8001a44:	b508      	push	{r3, lr}
 8001a46:	2042      	movs	r0, #66	; 0x42
 8001a48:	f7ff fe34 	bl	80016b4 <BSP_IntHandler>
 8001a4c:	bd08      	pop	{r3, pc}
 8001a4e:	bf00      	nop

08001a50 <BSP_IntHandlerOTG_FS>:
void  BSP_IntHandlerOTG_FS             (void)  { BSP_IntHandler(BSP_INT_ID_OTG_FS);              }
 8001a50:	b508      	push	{r3, lr}
 8001a52:	2043      	movs	r0, #67	; 0x43
 8001a54:	f7ff fe2e 	bl	80016b4 <BSP_IntHandler>
 8001a58:	bd08      	pop	{r3, pc}
 8001a5a:	bf00      	nop

08001a5c <BSP_IntHandlerDMA2_CH5>:
void  BSP_IntHandlerDMA2_CH5           (void)  { BSP_IntHandler(BSP_INT_ID_DMA2_CH5);            }
 8001a5c:	b508      	push	{r3, lr}
 8001a5e:	2044      	movs	r0, #68	; 0x44
 8001a60:	f7ff fe28 	bl	80016b4 <BSP_IntHandler>
 8001a64:	bd08      	pop	{r3, pc}
 8001a66:	bf00      	nop

08001a68 <BSP_IntHandlerDMA2_CH6>:
void  BSP_IntHandlerDMA2_CH6           (void)  { BSP_IntHandler(BSP_INT_ID_DMA2_CH6);            }
 8001a68:	b508      	push	{r3, lr}
 8001a6a:	2045      	movs	r0, #69	; 0x45
 8001a6c:	f7ff fe22 	bl	80016b4 <BSP_IntHandler>
 8001a70:	bd08      	pop	{r3, pc}
 8001a72:	bf00      	nop

08001a74 <BSP_IntHandlerDMA2_CH7>:
void  BSP_IntHandlerDMA2_CH7           (void)  { BSP_IntHandler(BSP_INT_ID_DMA2_CH7);            }
 8001a74:	b508      	push	{r3, lr}
 8001a76:	2046      	movs	r0, #70	; 0x46
 8001a78:	f7ff fe1c 	bl	80016b4 <BSP_IntHandler>
 8001a7c:	bd08      	pop	{r3, pc}
 8001a7e:	bf00      	nop

08001a80 <BSP_IntHandlerUSART6>:
void  BSP_IntHandlerUSART6             (void)  { BSP_IntHandler(BSP_INT_ID_USART6);              }
 8001a80:	b508      	push	{r3, lr}
 8001a82:	2047      	movs	r0, #71	; 0x47
 8001a84:	f7ff fe16 	bl	80016b4 <BSP_IntHandler>
 8001a88:	bd08      	pop	{r3, pc}
 8001a8a:	bf00      	nop

08001a8c <BSP_IntHandlerI2C3_EV>:
void  BSP_IntHandlerI2C3_EV            (void)  { BSP_IntHandler(BSP_INT_ID_I2C3_EV);             }
 8001a8c:	b508      	push	{r3, lr}
 8001a8e:	2048      	movs	r0, #72	; 0x48
 8001a90:	f7ff fe10 	bl	80016b4 <BSP_IntHandler>
 8001a94:	bd08      	pop	{r3, pc}
 8001a96:	bf00      	nop

08001a98 <BSP_IntHandlerI2C3_ER>:
void  BSP_IntHandlerI2C3_ER            (void)  { BSP_IntHandler(BSP_INT_ID_I2C3_ER);             }
 8001a98:	b508      	push	{r3, lr}
 8001a9a:	2049      	movs	r0, #73	; 0x49
 8001a9c:	f7ff fe0a 	bl	80016b4 <BSP_IntHandler>
 8001aa0:	bd08      	pop	{r3, pc}
 8001aa2:	bf00      	nop

08001aa4 <BSP_IntHandlerOTG_HS_EP1_OUT>:
void  BSP_IntHandlerOTG_HS_EP1_OUT     (void)  { BSP_IntHandler(BSP_INT_ID_OTG_HS_EP1_OUT);      }
 8001aa4:	b508      	push	{r3, lr}
 8001aa6:	204a      	movs	r0, #74	; 0x4a
 8001aa8:	f7ff fe04 	bl	80016b4 <BSP_IntHandler>
 8001aac:	bd08      	pop	{r3, pc}
 8001aae:	bf00      	nop

08001ab0 <BSP_IntHandlerOTG_HS_EP1_IN>:
void  BSP_IntHandlerOTG_HS_EP1_IN      (void)  { BSP_IntHandler(BSP_INT_ID_OTG_HS_EP1_IN);       }
 8001ab0:	b508      	push	{r3, lr}
 8001ab2:	204b      	movs	r0, #75	; 0x4b
 8001ab4:	f7ff fdfe 	bl	80016b4 <BSP_IntHandler>
 8001ab8:	bd08      	pop	{r3, pc}
 8001aba:	bf00      	nop

08001abc <BSP_IntHandlerOTG_HS_WKUP>:
void  BSP_IntHandlerOTG_HS_WKUP        (void)  { BSP_IntHandler(BSP_INT_ID_OTG_HS_WKUP);         }
 8001abc:	b508      	push	{r3, lr}
 8001abe:	204c      	movs	r0, #76	; 0x4c
 8001ac0:	f7ff fdf8 	bl	80016b4 <BSP_IntHandler>
 8001ac4:	bd08      	pop	{r3, pc}
 8001ac6:	bf00      	nop

08001ac8 <BSP_IntHandlerOTG_HS>:
void  BSP_IntHandlerOTG_HS             (void)  { BSP_IntHandler(BSP_INT_ID_OTG_HS);              }
 8001ac8:	b508      	push	{r3, lr}
 8001aca:	204d      	movs	r0, #77	; 0x4d
 8001acc:	f7ff fdf2 	bl	80016b4 <BSP_IntHandler>
 8001ad0:	bd08      	pop	{r3, pc}
 8001ad2:	bf00      	nop

08001ad4 <BSP_IntHandlerDCMI>:
void  BSP_IntHandlerDCMI               (void)  { BSP_IntHandler(BSP_INT_ID_DCMI);                }
 8001ad4:	b508      	push	{r3, lr}
 8001ad6:	204e      	movs	r0, #78	; 0x4e
 8001ad8:	f7ff fdec 	bl	80016b4 <BSP_IntHandler>
 8001adc:	bd08      	pop	{r3, pc}
 8001ade:	bf00      	nop

08001ae0 <BSP_IntHandlerCRYP>:
void  BSP_IntHandlerCRYP               (void)  { BSP_IntHandler(BSP_INT_ID_CRYP);                }
 8001ae0:	b508      	push	{r3, lr}
 8001ae2:	204f      	movs	r0, #79	; 0x4f
 8001ae4:	f7ff fde6 	bl	80016b4 <BSP_IntHandler>
 8001ae8:	bd08      	pop	{r3, pc}
 8001aea:	bf00      	nop

08001aec <BSP_IntHandlerHASH_RNG>:
void  BSP_IntHandlerHASH_RNG           (void)  { BSP_IntHandler(BSP_INT_ID_HASH_RNG);            }
 8001aec:	b508      	push	{r3, lr}
 8001aee:	2050      	movs	r0, #80	; 0x50
 8001af0:	f7ff fde0 	bl	80016b4 <BSP_IntHandler>
 8001af4:	bd08      	pop	{r3, pc}
 8001af6:	bf00      	nop

08001af8 <BSP_IntHandlerFPU>:
void  BSP_IntHandlerFPU                (void)  { BSP_IntHandler(BSP_INT_ID_FPU);                 }
 8001af8:	b508      	push	{r3, lr}
 8001afa:	2051      	movs	r0, #81	; 0x51
 8001afc:	f7ff fdda 	bl	80016b4 <BSP_IntHandler>
 8001b00:	bd08      	pop	{r3, pc}
 8001b02:	bf00      	nop

08001b04 <BSP_PeriphEn>:
*********************************************************************************************************
*/

void  BSP_PeriphEn (CPU_DATA  pwr_clk_id)
{
    switch (pwr_clk_id) {
 8001b04:	2892      	cmp	r0, #146	; 0x92
 8001b06:	d873      	bhi.n	8001bf0 <BSP_PeriphEn+0xec>
 8001b08:	e8df f000 	tbb	[pc, r0]
 8001b0c:	4a4a4a4a 	.word	0x4a4a4a4a
 8001b10:	4a4a4a4a 	.word	0x4a4a4a4a
 8001b14:	7272724a 	.word	0x7272724a
 8001b18:	7272724a 	.word	0x7272724a
 8001b1c:	724a7272 	.word	0x724a7272
 8001b20:	724a4a4a 	.word	0x724a4a4a
 8001b24:	4a4a4a72 	.word	0x4a4a4a72
 8001b28:	724a4a4a 	.word	0x724a4a4a
 8001b2c:	72727252 	.word	0x72727252
 8001b30:	52525252 	.word	0x52525252
 8001b34:	72727272 	.word	0x72727272
 8001b38:	72727272 	.word	0x72727272
 8001b3c:	72727272 	.word	0x72727272
 8001b40:	72727272 	.word	0x72727272
 8001b44:	72727272 	.word	0x72727272
 8001b48:	72727272 	.word	0x72727272
 8001b4c:	7272725b 	.word	0x7272725b
 8001b50:	72727272 	.word	0x72727272
 8001b54:	72727272 	.word	0x72727272
 8001b58:	72727272 	.word	0x72727272
 8001b5c:	72727272 	.word	0x72727272
 8001b60:	72727272 	.word	0x72727272
 8001b64:	72727272 	.word	0x72727272
 8001b68:	72727272 	.word	0x72727272
 8001b6c:	61616161 	.word	0x61616161
 8001b70:	61616161 	.word	0x61616161
 8001b74:	61727261 	.word	0x61727261
 8001b78:	61617272 	.word	0x61617272
 8001b7c:	61616172 	.word	0x61616172
 8001b80:	61616161 	.word	0x61616161
 8001b84:	72616172 	.word	0x72616172
 8001b88:	72726161 	.word	0x72726161
 8001b8c:	72726a6a 	.word	0x72726a6a
 8001b90:	72726a6a 	.word	0x72726a6a
 8001b94:	6a6a6a6a 	.word	0x6a6a6a6a
 8001b98:	726a726a 	.word	0x726a726a
 8001b9c:	6a6a      	.short	0x6a6a
 8001b9e:	6a          	.byte	0x6a
 8001b9f:	00          	.byte	0x00
        case BSP_PERIPH_ID_ETHMACPTP:
        case BSP_PERIPH_ID_ETHMACTX:
        case BSP_PERIPH_ID_ETHMACRX:
        case BSP_PERIPH_ID_OTGHS:
        case BSP_PERIPH_ID_OTGHSULPI:
             BSP_PERIPH_REG_RCC_AHB1ENR |= DEF_BIT(pwr_clk_id);
 8001ba0:	4914      	ldr	r1, [pc, #80]	; (8001bf4 <BSP_PeriphEn+0xf0>)
 8001ba2:	680b      	ldr	r3, [r1, #0]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	fa02 f000 	lsl.w	r0, r2, r0
 8001baa:	4318      	orrs	r0, r3
 8001bac:	6008      	str	r0, [r1, #0]
             break;
 8001bae:	4770      	bx	lr
        case BSP_PERIPH_ID_DCMI:
        case BSP_PERIPH_ID_CRYP:
        case BSP_PERIPH_ID_HASH:
        case BSP_PERIPH_ID_RNG:
        case BSP_PERIPH_ID_OTGFS:
             BSP_PERIPH_REG_RCC_AHB2ENR |= DEF_BIT(pwr_clk_id - 32u);
 8001bb0:	4911      	ldr	r1, [pc, #68]	; (8001bf8 <BSP_PeriphEn+0xf4>)
 8001bb2:	680b      	ldr	r3, [r1, #0]
 8001bb4:	3820      	subs	r0, #32
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	fa02 f000 	lsl.w	r0, r2, r0
 8001bbc:	4318      	orrs	r0, r3
 8001bbe:	6008      	str	r0, [r1, #0]
             break;
 8001bc0:	4770      	bx	lr

        case BSP_PERIPH_ID_FSMC:
             BSP_PERIPH_REG_RCC_AHB3ENR |= DEF_BIT(pwr_clk_id - 64u);
 8001bc2:	4a0e      	ldr	r2, [pc, #56]	; (8001bfc <BSP_PeriphEn+0xf8>)
 8001bc4:	6813      	ldr	r3, [r2, #0]
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6013      	str	r3, [r2, #0]
             break;
 8001bcc:	4770      	bx	lr
        case BSP_PERIPH_ID_I2C3:
        case BSP_PERIPH_ID_CAN1:
        case BSP_PERIPH_ID_CAN2:
        case BSP_PERIPH_ID_PWR:
        case BSP_PERIPH_ID_DAC:
             BSP_PERIPH_REG_RCC_APB1ENR |= DEF_BIT(pwr_clk_id - 96u);
 8001bce:	490c      	ldr	r1, [pc, #48]	; (8001c00 <BSP_PeriphEn+0xfc>)
 8001bd0:	680b      	ldr	r3, [r1, #0]
 8001bd2:	3860      	subs	r0, #96	; 0x60
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	fa02 f000 	lsl.w	r0, r2, r0
 8001bda:	4318      	orrs	r0, r3
 8001bdc:	6008      	str	r0, [r1, #0]
             break;
 8001bde:	4770      	bx	lr
        case BSP_PERIPH_ID_SPI1:
        case BSP_PERIPH_ID_SYSCFG:
        case BSP_PERIPH_ID_TIM9:
        case BSP_PERIPH_ID_TIM10:
        case BSP_PERIPH_ID_TIM11:
             BSP_PERIPH_REG_RCC_APB2ENR |= DEF_BIT(pwr_clk_id - 128u);
 8001be0:	4908      	ldr	r1, [pc, #32]	; (8001c04 <BSP_PeriphEn+0x100>)
 8001be2:	680b      	ldr	r3, [r1, #0]
 8001be4:	3880      	subs	r0, #128	; 0x80
 8001be6:	2201      	movs	r2, #1
 8001be8:	fa02 f000 	lsl.w	r0, r2, r0
 8001bec:	4318      	orrs	r0, r3
 8001bee:	6008      	str	r0, [r1, #0]
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40023830 	.word	0x40023830
 8001bf8:	40023834 	.word	0x40023834
 8001bfc:	40023838 	.word	0x40023838
 8001c00:	40023840 	.word	0x40023840
 8001c04:	40023844 	.word	0x40023844

08001c08 <CPU_TS_TmrInit>:
*********************************************************************************************************
*/

#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
void  CPU_TS_TmrInit (void)
{
 8001c08:	b508      	push	{r3, lr}
    CPU_INT32U  fclk_freq;


    fclk_freq = BSP_CPU_ClkFreq();
 8001c0a:	f7ff fcdd 	bl	80015c8 <BSP_CPU_ClkFreq>

    CPU_REG_DEM_CR     |= (CPU_INT32U)CPU_BIT_DEM_CR_TRCENA;    /* Enable Cortex-M4's DWT CYCCNT reg.                   */
 8001c0e:	4a08      	ldr	r2, [pc, #32]	; (8001c30 <CPU_TS_TmrInit+0x28>)
 8001c10:	6813      	ldr	r3, [r2, #0]
 8001c12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c16:	6013      	str	r3, [r2, #0]
    CPU_REG_DWT_CYCCNT  = (CPU_INT32U)0u;
 8001c18:	2200      	movs	r2, #0
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <CPU_TS_TmrInit+0x2c>)
 8001c1c:	601a      	str	r2, [r3, #0]
    CPU_REG_DWT_CR     |= (CPU_INT32U)CPU_BIT_DWT_CR_CYCCNTENA;
 8001c1e:	4a06      	ldr	r2, [pc, #24]	; (8001c38 <CPU_TS_TmrInit+0x30>)
 8001c20:	6813      	ldr	r3, [r2, #0]
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	6013      	str	r3, [r2, #0]

    CPU_TS_TmrFreqSet((CPU_TS_TMR_FREQ)fclk_freq);
 8001c28:	f001 f8cc 	bl	8002dc4 <CPU_TS_TmrFreqSet>
 8001c2c:	bd08      	pop	{r3, pc}
 8001c2e:	bf00      	nop
 8001c30:	e000edfc 	.word	0xe000edfc
 8001c34:	e0001004 	.word	0xe0001004
 8001c38:	e0001000 	.word	0xe0001000

08001c3c <CPU_TS_TmrRd>:
CPU_TS_TMR  CPU_TS_TmrRd (void)
{
    CPU_TS_TMR  ts_tmr_cnts;


    ts_tmr_cnts = (CPU_TS_TMR)CPU_REG_DWT_CYCCNT;
 8001c3c:	4b01      	ldr	r3, [pc, #4]	; (8001c44 <CPU_TS_TmrRd+0x8>)
 8001c3e:	6818      	ldr	r0, [r3, #0]

    return (ts_tmr_cnts);
}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e0001004 	.word	0xe0001004

08001c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c48:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_Init+0x30>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c52:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c5a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c62:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c64:	2003      	movs	r0, #3
 8001c66:	f000 f81d 	bl	8001ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c6a:	200f      	movs	r0, #15
 8001c6c:	f7ff fcbc 	bl	80015e8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001c70:	f000 f964 	bl	8001f3c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8001c74:	2000      	movs	r0, #0
 8001c76:	bd08      	pop	{r3, pc}
 8001c78:	40023c00 	.word	0x40023c00

08001c7c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001c7c:	4a02      	ldr	r2, [pc, #8]	; (8001c88 <HAL_IncTick+0xc>)
 8001c7e:	6813      	ldr	r3, [r2, #0]
 8001c80:	3301      	adds	r3, #1
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20001aac 	.word	0x20001aac

08001c8c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001c8c:	4b01      	ldr	r3, [pc, #4]	; (8001c94 <HAL_GetTick+0x8>)
 8001c8e:	6818      	ldr	r0, [r3, #0]
}
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	20001aac 	.word	0x20001aac

08001c98 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8001c98:	4b01      	ldr	r3, [pc, #4]	; (8001ca0 <HAL_GetREVID+0x8>)
 8001c9a:	6818      	ldr	r0, [r3, #0]
}
 8001c9c:	0c00      	lsrs	r0, r0, #16
 8001c9e:	4770      	bx	lr
 8001ca0:	e0042000 	.word	0xe0042000

08001ca4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca4:	4a07      	ldr	r2, [pc, #28]	; (8001cc4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001ca6:	68d3      	ldr	r3, [r2, #12]
 8001ca8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cac:	041b      	lsls	r3, r3, #16
 8001cae:	0c1b      	lsrs	r3, r3, #16
 8001cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 8001cb8:	0200      	lsls	r0, r0, #8
 8001cba:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001cbe:	4303      	orrs	r3, r0
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8001cc0:	60d3      	str	r3, [r2, #12]
 8001cc2:	4770      	bx	lr
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cc8:	b430      	push	{r4, r5}

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 8001cca:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <HAL_NVIC_SetPriority+0x5c>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8001cd2:	f1c3 0407 	rsb	r4, r3, #7
 8001cd6:	2c04      	cmp	r4, #4
 8001cd8:	bf28      	it	cs
 8001cda:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8001cdc:	1d1d      	adds	r5, r3, #4
 8001cde:	2d06      	cmp	r5, #6
 8001ce0:	bf8c      	ite	hi
 8001ce2:	3b03      	subhi	r3, #3
 8001ce4:	2300      	movls	r3, #0

  return (
 8001ce6:	2501      	movs	r5, #1
 8001ce8:	fa05 f404 	lsl.w	r4, r5, r4
 8001cec:	3c01      	subs	r4, #1
 8001cee:	400c      	ands	r4, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	fa05 f303 	lsl.w	r3, r5, r3
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	401a      	ands	r2, r3
 8001cfa:	4322      	orrs	r2, r4
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
 8001cfc:	2800      	cmp	r0, #0
 8001cfe:	da06      	bge.n	8001d0e <HAL_NVIC_SetPriority+0x46>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001d00:	f000 000f 	and.w	r0, r0, #15
 8001d04:	0112      	lsls	r2, r2, #4
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <HAL_NVIC_SetPriority+0x60>)
 8001d0a:	541a      	strb	r2, [r3, r0]
 8001d0c:	e007      	b.n	8001d1e <HAL_NVIC_SetPriority+0x56>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001d0e:	0112      	lsls	r2, r2, #4
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001d16:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001d1a:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001d1e:	bc30      	pop	{r4, r5}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000ed00 	.word	0xe000ed00
 8001d28:	e000ed14 	.word	0xe000ed14

08001d2c <HAL_NVIC_EnableIRQ>:
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001d2c:	0942      	lsrs	r2, r0, #5
 8001d2e:	f000 001f 	and.w	r0, r0, #31
 8001d32:	2301      	movs	r3, #1
 8001d34:	fa03 f000 	lsl.w	r0, r3, r0
 8001d38:	4b01      	ldr	r3, [pc, #4]	; (8001d40 <HAL_NVIC_EnableIRQ+0x14>)
 8001d3a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001d3e:	4770      	bx	lr
 8001d40:	e000e100 	.word	0xe000e100

08001d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d48:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d4a:	2400      	movs	r4, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4c:	4f6e      	ldr	r7, [pc, #440]	; (8001f08 <HAL_GPIO_Init+0x1c4>)

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d4e:	f8df e1c4 	ldr.w	lr, [pc, #452]	; 8001f14 <HAL_GPIO_Init+0x1d0>
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d52:	4e6e      	ldr	r6, [pc, #440]	; (8001f0c <HAL_GPIO_Init+0x1c8>)
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d54:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 8001f18 <HAL_GPIO_Init+0x1d4>
 8001d58:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8001f1c <HAL_GPIO_Init+0x1d8>
 8001d5c:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 8001f20 <HAL_GPIO_Init+0x1dc>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d60:	f04f 0801 	mov.w	r8, #1
 8001d64:	fa08 f804 	lsl.w	r8, r8, r4
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8001d68:	680b      	ldr	r3, [r1, #0]
 8001d6a:	ea38 0303 	bics.w	r3, r8, r3
 8001d6e:	f040 80c3 	bne.w	8001ef8 <HAL_GPIO_Init+0x1b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d72:	684b      	ldr	r3, [r1, #4]
 8001d74:	f023 0310 	bic.w	r3, r3, #16
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d111      	bne.n	8001da0 <HAL_GPIO_Init+0x5c>
 8001d7c:	08e5      	lsrs	r5, r4, #3
 8001d7e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d82:	f8d5 b020 	ldr.w	fp, [r5, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d86:	f004 0307 	and.w	r3, r4, #7
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	220f      	movs	r2, #15
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	ea2b 0b02 	bic.w	fp, fp, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d94:	690a      	ldr	r2, [r1, #16]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	ea43 030b 	orr.w	r3, r3, fp
        GPIOx->AFR[position >> 3] = temp;
 8001d9e:	622b      	str	r3, [r5, #32]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001da0:	6802      	ldr	r2, [r0, #0]
 8001da2:	0065      	lsls	r5, r4, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001da4:	2303      	movs	r3, #3
 8001da6:	40ab      	lsls	r3, r5
 8001da8:	43db      	mvns	r3, r3
 8001daa:	ea02 0b03 	and.w	fp, r2, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001dae:	684a      	ldr	r2, [r1, #4]
 8001db0:	f002 0203 	and.w	r2, r2, #3
 8001db4:	40aa      	lsls	r2, r5
 8001db6:	ea42 020b 	orr.w	r2, r2, fp
      GPIOx->MODER = temp;
 8001dba:	6002      	str	r2, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dbc:	684a      	ldr	r2, [r1, #4]
 8001dbe:	f022 0210 	bic.w	r2, r2, #16
 8001dc2:	3a01      	subs	r2, #1
 8001dc4:	2a01      	cmp	r2, #1
 8001dc6:	d811      	bhi.n	8001dec <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dc8:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001dca:	ea03 0b02 	and.w	fp, r3, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 8001dce:	68ca      	ldr	r2, [r1, #12]
 8001dd0:	40aa      	lsls	r2, r5
 8001dd2:	ea42 020b 	orr.w	r2, r2, fp
        GPIOx->OSPEEDR = temp;
 8001dd6:	6082      	str	r2, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd8:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dda:	ea22 0b08 	bic.w	fp, r2, r8
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001dde:	684a      	ldr	r2, [r1, #4]
 8001de0:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001de4:	40a2      	lsls	r2, r4
 8001de6:	ea42 020b 	orr.w	r2, r2, fp
        GPIOx->OTYPER = temp;
 8001dea:	6042      	str	r2, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dec:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001dee:	4013      	ands	r3, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001df0:	688a      	ldr	r2, [r1, #8]
 8001df2:	fa02 f505 	lsl.w	r5, r2, r5
 8001df6:	432b      	orrs	r3, r5
      GPIOx->PUPDR = temp;
 8001df8:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dfa:	684b      	ldr	r3, [r1, #4]
 8001dfc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001e00:	d07a      	beq.n	8001ef8 <HAL_GPIO_Init+0x1b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e08:	647b      	str	r3, [r7, #68]	; 0x44
 8001e0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e10:	9303      	str	r3, [sp, #12]
 8001e12:	9b03      	ldr	r3, [sp, #12]
 8001e14:	f024 0303 	bic.w	r3, r4, #3
 8001e18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001e1c:	f503 339c 	add.w	r3, r3, #79872	; 0x13800

        temp = SYSCFG->EXTICR[position >> 2];
 8001e20:	f8d3 b008 	ldr.w	fp, [r3, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e24:	f004 0503 	and.w	r5, r4, #3
 8001e28:	00ad      	lsls	r5, r5, #2
 8001e2a:	220f      	movs	r2, #15
 8001e2c:	40aa      	lsls	r2, r5
 8001e2e:	ea2b 0202 	bic.w	r2, fp, r2
 8001e32:	9201      	str	r2, [sp, #4]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e34:	4570      	cmp	r0, lr
 8001e36:	d01d      	beq.n	8001e74 <HAL_GPIO_Init+0x130>
 8001e38:	4560      	cmp	r0, ip
 8001e3a:	d01e      	beq.n	8001e7a <HAL_GPIO_Init+0x136>
 8001e3c:	4548      	cmp	r0, r9
 8001e3e:	d01f      	beq.n	8001e80 <HAL_GPIO_Init+0x13c>
 8001e40:	4550      	cmp	r0, sl
 8001e42:	d020      	beq.n	8001e86 <HAL_GPIO_Init+0x142>
 8001e44:	4a32      	ldr	r2, [pc, #200]	; (8001f10 <HAL_GPIO_Init+0x1cc>)
 8001e46:	4290      	cmp	r0, r2
 8001e48:	d020      	beq.n	8001e8c <HAL_GPIO_Init+0x148>
 8001e4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e4e:	4290      	cmp	r0, r2
 8001e50:	d01f      	beq.n	8001e92 <HAL_GPIO_Init+0x14e>
 8001e52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e56:	4290      	cmp	r0, r2
 8001e58:	d01e      	beq.n	8001e98 <HAL_GPIO_Init+0x154>
 8001e5a:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 8001f24 <HAL_GPIO_Init+0x1e0>
 8001e5e:	4558      	cmp	r0, fp
 8001e60:	d01d      	beq.n	8001e9e <HAL_GPIO_Init+0x15a>
 8001e62:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 8001e66:	4558      	cmp	r0, fp
 8001e68:	bf0c      	ite	eq
 8001e6a:	f04f 0b08 	moveq.w	fp, #8
 8001e6e:	f04f 0b09 	movne.w	fp, #9
 8001e72:	e016      	b.n	8001ea2 <HAL_GPIO_Init+0x15e>
 8001e74:	f04f 0b00 	mov.w	fp, #0
 8001e78:	e013      	b.n	8001ea2 <HAL_GPIO_Init+0x15e>
 8001e7a:	f04f 0b01 	mov.w	fp, #1
 8001e7e:	e010      	b.n	8001ea2 <HAL_GPIO_Init+0x15e>
 8001e80:	f04f 0b02 	mov.w	fp, #2
 8001e84:	e00d      	b.n	8001ea2 <HAL_GPIO_Init+0x15e>
 8001e86:	f04f 0b03 	mov.w	fp, #3
 8001e8a:	e00a      	b.n	8001ea2 <HAL_GPIO_Init+0x15e>
 8001e8c:	f04f 0b04 	mov.w	fp, #4
 8001e90:	e007      	b.n	8001ea2 <HAL_GPIO_Init+0x15e>
 8001e92:	f04f 0b05 	mov.w	fp, #5
 8001e96:	e004      	b.n	8001ea2 <HAL_GPIO_Init+0x15e>
 8001e98:	f04f 0b06 	mov.w	fp, #6
 8001e9c:	e001      	b.n	8001ea2 <HAL_GPIO_Init+0x15e>
 8001e9e:	f04f 0b07 	mov.w	fp, #7
 8001ea2:	fa0b f505 	lsl.w	r5, fp, r5
 8001ea6:	9a01      	ldr	r2, [sp, #4]
 8001ea8:	4315      	orrs	r5, r2
        SYSCFG->EXTICR[position >> 2] = temp;
 8001eaa:	609d      	str	r5, [r3, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eac:	6833      	ldr	r3, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8001eae:	ea6f 0508 	mvn.w	r5, r8
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eb2:	684a      	ldr	r2, [r1, #4]
 8001eb4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8001eb8:	bf0c      	ite	eq
 8001eba:	402b      	andeq	r3, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8001ebc:	ea48 0303 	orrne.w	r3, r8, r3
        }
        EXTI->IMR = temp;
 8001ec0:	6033      	str	r3, [r6, #0]

        temp = EXTI->EMR;
 8001ec2:	6873      	ldr	r3, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ec4:	684a      	ldr	r2, [r1, #4]
 8001ec6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8001eca:	bf0c      	ite	eq
 8001ecc:	402b      	andeq	r3, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8001ece:	ea48 0303 	orrne.w	r3, r8, r3
        }
        EXTI->EMR = temp;
 8001ed2:	6073      	str	r3, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ed4:	68b2      	ldr	r2, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ed6:	684b      	ldr	r3, [r1, #4]
 8001ed8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8001edc:	bf0c      	ite	eq
 8001ede:	402a      	andeq	r2, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8001ee0:	ea48 0202 	orrne.w	r2, r8, r2
        }
        EXTI->RTSR = temp;
 8001ee4:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8001ee6:	68f3      	ldr	r3, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ee8:	684a      	ldr	r2, [r1, #4]
 8001eea:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8001eee:	bf0c      	ite	eq
 8001ef0:	402b      	andeq	r3, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8001ef2:	ea48 0303 	orrne.w	r3, r8, r3
        }
        EXTI->FTSR = temp;
 8001ef6:	60f3      	str	r3, [r6, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ef8:	3401      	adds	r4, #1
 8001efa:	2c10      	cmp	r4, #16
 8001efc:	f47f af30 	bne.w	8001d60 <HAL_GPIO_Init+0x1c>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8001f00:	b005      	add	sp, #20
 8001f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f06:	bf00      	nop
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40013c00 	.word	0x40013c00
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40020000 	.word	0x40020000
 8001f18:	40020400 	.word	0x40020400
 8001f1c:	40020800 	.word	0x40020800
 8001f20:	40020c00 	.word	0x40020c00
 8001f24:	40021c00 	.word	0x40021c00

08001f28 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f28:	b10a      	cbz	r2, 8001f2e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f2a:	6181      	str	r1, [r0, #24]
 8001f2c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f2e:	0409      	lsls	r1, r1, #16
 8001f30:	6181      	str	r1, [r0, #24]
 8001f32:	4770      	bx	lr

08001f34 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001f34:	6943      	ldr	r3, [r0, #20]
 8001f36:	4059      	eors	r1, r3
 8001f38:	6141      	str	r1, [r0, #20]
 8001f3a:	4770      	bx	lr

08001f3c <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop

08001f40 <HAL_RCC_DeInit>:
  * @retval None
  */
void HAL_RCC_DeInit(void)
{
  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSITRIM_4); 
 8001f40:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <HAL_RCC_DeInit+0x44>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	f042 0281 	orr.w	r2, r2, #129	; 0x81
 8001f48:	601a      	str	r2, [r3, #0]
  
  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	6099      	str	r1, [r3, #8]
  
  /* Reset HSEON, CSSON, PLLON, PLLI2S */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLLON| RCC_CR_PLLI2SON); 
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	f022 62a1 	bic.w	r2, r2, #84410368	; 0x5080000
 8001f54:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f58:	601a      	str	r2, [r3, #0]
  
  /* Reset PLLCFGR register */
  CLEAR_REG(RCC->PLLCFGR);
 8001f5a:	6059      	str	r1, [r3, #4]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2); 
 8001f5c:	6858      	ldr	r0, [r3, #4]
 8001f5e:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <HAL_RCC_DeInit+0x48>)
 8001f60:	4302      	orrs	r2, r0
 8001f62:	605a      	str	r2, [r3, #4]
  
  /* Reset PLLI2SCFGR register */
  CLEAR_REG(RCC->PLLI2SCFGR);
 8001f64:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  SET_BIT(RCC->PLLI2SCFGR,  RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1);
 8001f68:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001f6c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001f70:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001f74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  
  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f7e:	601a      	str	r2, [r3, #0]
  
  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR); 
 8001f80:	60d9      	str	r1, [r3, #12]
 8001f82:	4770      	bx	lr
 8001f84:	40023800 	.word	0x40023800
 8001f88:	04003010 	.word	0x04003010

08001f8c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	4604      	mov	r4, r0
 uint32_t tickstart = 0;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f92:	6803      	ldr	r3, [r0, #0]
 8001f94:	f013 0f01 	tst.w	r3, #1
 8001f98:	d055      	beq.n	8002046 <HAL_RCC_OscConfig+0xba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f9a:	4bab      	ldr	r3, [pc, #684]	; (8002248 <HAL_RCC_OscConfig+0x2bc>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d00a      	beq.n	8001fbc <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fa6:	4ba8      	ldr	r3, [pc, #672]	; (8002248 <HAL_RCC_OscConfig+0x2bc>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	d10d      	bne.n	8001fce <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fb2:	4ba5      	ldr	r3, [pc, #660]	; (8002248 <HAL_RCC_OscConfig+0x2bc>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001fba:	d008      	beq.n	8001fce <HAL_RCC_OscConfig+0x42>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fbc:	4ba2      	ldr	r3, [pc, #648]	; (8002248 <HAL_RCC_OscConfig+0x2bc>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001fc4:	d03f      	beq.n	8002046 <HAL_RCC_OscConfig+0xba>
 8001fc6:	6863      	ldr	r3, [r4, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d13c      	bne.n	8002046 <HAL_RCC_OscConfig+0xba>
 8001fcc:	e1a0      	b.n	8002310 <HAL_RCC_OscConfig+0x384>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	4b9e      	ldr	r3, [pc, #632]	; (800224c <HAL_RCC_OscConfig+0x2c0>)
 8001fd2:	701a      	strb	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd4:	f7ff fe5a 	bl	8001c8c <HAL_GetTick>
 8001fd8:	4607      	mov	r7, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fda:	4d9b      	ldr	r5, [pc, #620]	; (8002248 <HAL_RCC_OscConfig+0x2bc>)
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fdc:	f241 3688 	movw	r6, #5000	; 0x1388
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe0:	e005      	b.n	8001fee <HAL_RCC_OscConfig+0x62>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe2:	f7ff fe53 	bl	8001c8c <HAL_GetTick>
 8001fe6:	1bc0      	subs	r0, r0, r7
 8001fe8:	42b0      	cmp	r0, r6
 8001fea:	f200 8193 	bhi.w	8002314 <HAL_RCC_OscConfig+0x388>
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fee:	682b      	ldr	r3, [r5, #0]
 8001ff0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001ff4:	d1f5      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x56>
          return HAL_TIMEOUT;
        }       
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff6:	7922      	ldrb	r2, [r4, #4]
 8001ff8:	4b94      	ldr	r3, [pc, #592]	; (800224c <HAL_RCC_OscConfig+0x2c0>)
 8001ffa:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ffc:	6863      	ldr	r3, [r4, #4]
 8001ffe:	b18b      	cbz	r3, 8002024 <HAL_RCC_OscConfig+0x98>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002000:	f7ff fe44 	bl	8001c8c <HAL_GetTick>
 8002004:	4607      	mov	r7, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002006:	4d90      	ldr	r5, [pc, #576]	; (8002248 <HAL_RCC_OscConfig+0x2bc>)
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002008:	f241 3688 	movw	r6, #5000	; 0x1388
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200c:	e005      	b.n	800201a <HAL_RCC_OscConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800200e:	f7ff fe3d 	bl	8001c8c <HAL_GetTick>
 8002012:	1bc0      	subs	r0, r0, r7
 8002014:	42b0      	cmp	r0, r6
 8002016:	f200 817f 	bhi.w	8002318 <HAL_RCC_OscConfig+0x38c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201a:	682b      	ldr	r3, [r5, #0]
 800201c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002020:	d0f5      	beq.n	800200e <HAL_RCC_OscConfig+0x82>
 8002022:	e010      	b.n	8002046 <HAL_RCC_OscConfig+0xba>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002024:	f7ff fe32 	bl	8001c8c <HAL_GetTick>
 8002028:	4607      	mov	r7, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800202a:	4d87      	ldr	r5, [pc, #540]	; (8002248 <HAL_RCC_OscConfig+0x2bc>)
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800202c:	f241 3688 	movw	r6, #5000	; 0x1388
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002030:	e005      	b.n	800203e <HAL_RCC_OscConfig+0xb2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002032:	f7ff fe2b 	bl	8001c8c <HAL_GetTick>
 8002036:	1bc0      	subs	r0, r0, r7
 8002038:	42b0      	cmp	r0, r6
 800203a:	f200 816f 	bhi.w	800231c <HAL_RCC_OscConfig+0x390>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203e:	682b      	ldr	r3, [r5, #0]
 8002040:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002044:	d1f5      	bne.n	8002032 <HAL_RCC_OscConfig+0xa6>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002046:	6823      	ldr	r3, [r4, #0]
 8002048:	f013 0f02 	tst.w	r3, #2
 800204c:	d05e      	beq.n	800210c <HAL_RCC_OscConfig+0x180>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800204e:	4b7e      	ldr	r3, [pc, #504]	; (8002248 <HAL_RCC_OscConfig+0x2bc>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f013 0f0c 	tst.w	r3, #12
 8002056:	d00a      	beq.n	800206e <HAL_RCC_OscConfig+0xe2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002058:	4b7b      	ldr	r3, [pc, #492]	; (8002248 <HAL_RCC_OscConfig+0x2bc>)
 800205a:	689b      	ldr	r3, [r3, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800205c:	f003 030c 	and.w	r3, r3, #12
 8002060:	2b08      	cmp	r3, #8
 8002062:	d11d      	bne.n	80020a0 <HAL_RCC_OscConfig+0x114>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002064:	4b78      	ldr	r3, [pc, #480]	; (8002248 <HAL_RCC_OscConfig+0x2bc>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800206c:	d118      	bne.n	80020a0 <HAL_RCC_OscConfig+0x114>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800206e:	4b76      	ldr	r3, [pc, #472]	; (8002248 <HAL_RCC_OscConfig+0x2bc>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f013 0f02 	tst.w	r3, #2
 8002076:	d003      	beq.n	8002080 <HAL_RCC_OscConfig+0xf4>
 8002078:	68e3      	ldr	r3, [r4, #12]
 800207a:	2b01      	cmp	r3, #1
 800207c:	f040 8150 	bne.w	8002320 <HAL_RCC_OscConfig+0x394>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002080:	4871      	ldr	r0, [pc, #452]	; (8002248 <HAL_RCC_OscConfig+0x2bc>)
 8002082:	6802      	ldr	r2, [r0, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	23f8      	movs	r3, #248	; 0xf8
 8002086:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800208a:	fab3 f383 	clz	r3, r3
 800208e:	b2db      	uxtb	r3, r3
 8002090:	6921      	ldr	r1, [r4, #16]
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800209a:	4313      	orrs	r3, r2
 800209c:	6003      	str	r3, [r0, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800209e:	e035      	b.n	800210c <HAL_RCC_OscConfig+0x180>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020a0:	68e3      	ldr	r3, [r4, #12]
 80020a2:	b30b      	cbz	r3, 80020e8 <HAL_RCC_OscConfig+0x15c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020a4:	2201      	movs	r2, #1
 80020a6:	4b6a      	ldr	r3, [pc, #424]	; (8002250 <HAL_RCC_OscConfig+0x2c4>)
 80020a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020aa:	f7ff fdef 	bl	8001c8c <HAL_GetTick>
 80020ae:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b0:	4d65      	ldr	r5, [pc, #404]	; (8002248 <HAL_RCC_OscConfig+0x2bc>)
 80020b2:	e005      	b.n	80020c0 <HAL_RCC_OscConfig+0x134>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020b4:	f7ff fdea 	bl	8001c8c <HAL_GetTick>
 80020b8:	1b80      	subs	r0, r0, r6
 80020ba:	2864      	cmp	r0, #100	; 0x64
 80020bc:	f200 8132 	bhi.w	8002324 <HAL_RCC_OscConfig+0x398>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c0:	682b      	ldr	r3, [r5, #0]
 80020c2:	f013 0f02 	tst.w	r3, #2
 80020c6:	d0f5      	beq.n	80020b4 <HAL_RCC_OscConfig+0x128>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c8:	485f      	ldr	r0, [pc, #380]	; (8002248 <HAL_RCC_OscConfig+0x2bc>)
 80020ca:	6802      	ldr	r2, [r0, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020cc:	23f8      	movs	r3, #248	; 0xf8
 80020ce:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80020d2:	fab3 f383 	clz	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	6921      	ldr	r1, [r4, #16]
 80020da:	fa01 f303 	lsl.w	r3, r1, r3
 80020de:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80020e2:	4313      	orrs	r3, r2
 80020e4:	6003      	str	r3, [r0, #0]
 80020e6:	e011      	b.n	800210c <HAL_RCC_OscConfig+0x180>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020e8:	2200      	movs	r2, #0
 80020ea:	4b59      	ldr	r3, [pc, #356]	; (8002250 <HAL_RCC_OscConfig+0x2c4>)
 80020ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ee:	f7ff fdcd 	bl	8001c8c <HAL_GetTick>
 80020f2:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f4:	4d54      	ldr	r5, [pc, #336]	; (8002248 <HAL_RCC_OscConfig+0x2bc>)
 80020f6:	e005      	b.n	8002104 <HAL_RCC_OscConfig+0x178>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f8:	f7ff fdc8 	bl	8001c8c <HAL_GetTick>
 80020fc:	1b80      	subs	r0, r0, r6
 80020fe:	2864      	cmp	r0, #100	; 0x64
 8002100:	f200 8112 	bhi.w	8002328 <HAL_RCC_OscConfig+0x39c>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002104:	682b      	ldr	r3, [r5, #0]
 8002106:	f013 0f02 	tst.w	r3, #2
 800210a:	d1f5      	bne.n	80020f8 <HAL_RCC_OscConfig+0x16c>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800210c:	6823      	ldr	r3, [r4, #0]
 800210e:	f013 0f08 	tst.w	r3, #8
 8002112:	d026      	beq.n	8002162 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002114:	6963      	ldr	r3, [r4, #20]
 8002116:	b193      	cbz	r3, 800213e <HAL_RCC_OscConfig+0x1b2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002118:	2201      	movs	r2, #1
 800211a:	4b4e      	ldr	r3, [pc, #312]	; (8002254 <HAL_RCC_OscConfig+0x2c8>)
 800211c:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211e:	f7ff fdb5 	bl	8001c8c <HAL_GetTick>
 8002122:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002124:	4d48      	ldr	r5, [pc, #288]	; (8002248 <HAL_RCC_OscConfig+0x2bc>)
 8002126:	e005      	b.n	8002134 <HAL_RCC_OscConfig+0x1a8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002128:	f7ff fdb0 	bl	8001c8c <HAL_GetTick>
 800212c:	1b80      	subs	r0, r0, r6
 800212e:	2864      	cmp	r0, #100	; 0x64
 8002130:	f200 80fc 	bhi.w	800232c <HAL_RCC_OscConfig+0x3a0>
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002134:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002136:	f013 0f02 	tst.w	r3, #2
 800213a:	d0f5      	beq.n	8002128 <HAL_RCC_OscConfig+0x19c>
 800213c:	e011      	b.n	8002162 <HAL_RCC_OscConfig+0x1d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800213e:	2200      	movs	r2, #0
 8002140:	4b44      	ldr	r3, [pc, #272]	; (8002254 <HAL_RCC_OscConfig+0x2c8>)
 8002142:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002144:	f7ff fda2 	bl	8001c8c <HAL_GetTick>
 8002148:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214a:	4d3f      	ldr	r5, [pc, #252]	; (8002248 <HAL_RCC_OscConfig+0x2bc>)
 800214c:	e005      	b.n	800215a <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800214e:	f7ff fd9d 	bl	8001c8c <HAL_GetTick>
 8002152:	1b80      	subs	r0, r0, r6
 8002154:	2864      	cmp	r0, #100	; 0x64
 8002156:	f200 80eb 	bhi.w	8002330 <HAL_RCC_OscConfig+0x3a4>
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800215a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800215c:	f013 0f02 	tst.w	r3, #2
 8002160:	d1f5      	bne.n	800214e <HAL_RCC_OscConfig+0x1c2>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002162:	6823      	ldr	r3, [r4, #0]
 8002164:	f013 0f04 	tst.w	r3, #4
 8002168:	d059      	beq.n	800221e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800216a:	4b37      	ldr	r3, [pc, #220]	; (8002248 <HAL_RCC_OscConfig+0x2bc>)
 800216c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800216e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002172:	641a      	str	r2, [r3, #64]	; 0x40
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800217e:	4a36      	ldr	r2, [pc, #216]	; (8002258 <HAL_RCC_OscConfig+0x2cc>)
 8002180:	6813      	ldr	r3, [r2, #0]
 8002182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002186:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002188:	f7ff fd80 	bl	8001c8c <HAL_GetTick>
 800218c:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800218e:	4d32      	ldr	r5, [pc, #200]	; (8002258 <HAL_RCC_OscConfig+0x2cc>)
 8002190:	e005      	b.n	800219e <HAL_RCC_OscConfig+0x212>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002192:	f7ff fd7b 	bl	8001c8c <HAL_GetTick>
 8002196:	1b80      	subs	r0, r0, r6
 8002198:	2864      	cmp	r0, #100	; 0x64
 800219a:	f200 80cb 	bhi.w	8002334 <HAL_RCC_OscConfig+0x3a8>
    PWR->CR |= PWR_CR_DBP;
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800219e:	682b      	ldr	r3, [r5, #0]
 80021a0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80021a4:	d0f5      	beq.n	8002192 <HAL_RCC_OscConfig+0x206>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80021a6:	2200      	movs	r2, #0
 80021a8:	4b2c      	ldr	r3, [pc, #176]	; (800225c <HAL_RCC_OscConfig+0x2d0>)
 80021aa:	701a      	strb	r2, [r3, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021ac:	f7ff fd6e 	bl	8001c8c <HAL_GetTick>
 80021b0:	4607      	mov	r7, r0
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b2:	4d25      	ldr	r5, [pc, #148]	; (8002248 <HAL_RCC_OscConfig+0x2bc>)
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b4:	f241 3688 	movw	r6, #5000	; 0x1388
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b8:	e005      	b.n	80021c6 <HAL_RCC_OscConfig+0x23a>
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ba:	f7ff fd67 	bl	8001c8c <HAL_GetTick>
 80021be:	1bc0      	subs	r0, r0, r7
 80021c0:	42b0      	cmp	r0, r6
 80021c2:	f200 80b9 	bhi.w	8002338 <HAL_RCC_OscConfig+0x3ac>
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80021c8:	f013 0f02 	tst.w	r3, #2
 80021cc:	d1f5      	bne.n	80021ba <HAL_RCC_OscConfig+0x22e>
        return HAL_TIMEOUT;
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ce:	7a22      	ldrb	r2, [r4, #8]
 80021d0:	4b22      	ldr	r3, [pc, #136]	; (800225c <HAL_RCC_OscConfig+0x2d0>)
 80021d2:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021d4:	68a3      	ldr	r3, [r4, #8]
 80021d6:	b18b      	cbz	r3, 80021fc <HAL_RCC_OscConfig+0x270>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d8:	f7ff fd58 	bl	8001c8c <HAL_GetTick>
 80021dc:	4607      	mov	r7, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021de:	4d1a      	ldr	r5, [pc, #104]	; (8002248 <HAL_RCC_OscConfig+0x2bc>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e0:	f241 3688 	movw	r6, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e4:	e005      	b.n	80021f2 <HAL_RCC_OscConfig+0x266>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e6:	f7ff fd51 	bl	8001c8c <HAL_GetTick>
 80021ea:	1bc0      	subs	r0, r0, r7
 80021ec:	42b0      	cmp	r0, r6
 80021ee:	f200 80a5 	bhi.w	800233c <HAL_RCC_OscConfig+0x3b0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80021f4:	f013 0f02 	tst.w	r3, #2
 80021f8:	d0f5      	beq.n	80021e6 <HAL_RCC_OscConfig+0x25a>
 80021fa:	e010      	b.n	800221e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fc:	f7ff fd46 	bl	8001c8c <HAL_GetTick>
 8002200:	4607      	mov	r7, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002202:	4d11      	ldr	r5, [pc, #68]	; (8002248 <HAL_RCC_OscConfig+0x2bc>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002204:	f241 3688 	movw	r6, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002208:	e005      	b.n	8002216 <HAL_RCC_OscConfig+0x28a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220a:	f7ff fd3f 	bl	8001c8c <HAL_GetTick>
 800220e:	1bc0      	subs	r0, r0, r7
 8002210:	42b0      	cmp	r0, r6
 8002212:	f200 8095 	bhi.w	8002340 <HAL_RCC_OscConfig+0x3b4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002216:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002218:	f013 0f02 	tst.w	r3, #2
 800221c:	d1f5      	bne.n	800220a <HAL_RCC_OscConfig+0x27e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800221e:	69a3      	ldr	r3, [r4, #24]
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 808f 	beq.w	8002344 <HAL_RCC_OscConfig+0x3b8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002226:	4a08      	ldr	r2, [pc, #32]	; (8002248 <HAL_RCC_OscConfig+0x2bc>)
 8002228:	6892      	ldr	r2, [r2, #8]
 800222a:	f002 020c 	and.w	r2, r2, #12
 800222e:	2a08      	cmp	r2, #8
 8002230:	f000 808a 	beq.w	8002348 <HAL_RCC_OscConfig+0x3bc>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002234:	2b02      	cmp	r3, #2
 8002236:	d158      	bne.n	80022ea <HAL_RCC_OscConfig+0x35e>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002238:	2200      	movs	r2, #0
 800223a:	4b09      	ldr	r3, [pc, #36]	; (8002260 <HAL_RCC_OscConfig+0x2d4>)
 800223c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223e:	f7ff fd25 	bl	8001c8c <HAL_GetTick>
 8002242:	4606      	mov	r6, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002244:	4d00      	ldr	r5, [pc, #0]	; (8002248 <HAL_RCC_OscConfig+0x2bc>)
 8002246:	e012      	b.n	800226e <HAL_RCC_OscConfig+0x2e2>
 8002248:	40023800 	.word	0x40023800
 800224c:	40023802 	.word	0x40023802
 8002250:	42470000 	.word	0x42470000
 8002254:	42470e80 	.word	0x42470e80
 8002258:	40007000 	.word	0x40007000
 800225c:	40023870 	.word	0x40023870
 8002260:	42470060 	.word	0x42470060
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002264:	f7ff fd12 	bl	8001c8c <HAL_GetTick>
 8002268:	1b80      	subs	r0, r0, r6
 800226a:	2864      	cmp	r0, #100	; 0x64
 800226c:	d86e      	bhi.n	800234c <HAL_RCC_OscConfig+0x3c0>
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226e:	682b      	ldr	r3, [r5, #0]
 8002270:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002274:	d1f6      	bne.n	8002264 <HAL_RCC_OscConfig+0x2d8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002276:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800227a:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800227e:	fab3 f383 	clz	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	f44f 3540 	mov.w	r5, #196608	; 0x30000
 8002286:	fa95 f5a5 	rbit	r5, r5
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800228a:	fab5 f585 	clz	r5, r5
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228e:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8002292:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002296:	fab1 f081 	clz	r0, r1
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800229a:	69e1      	ldr	r1, [r4, #28]
 800229c:	6a22      	ldr	r2, [r4, #32]
 800229e:	4311      	orrs	r1, r2
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	4319      	orrs	r1, r3
 80022aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80022ac:	085b      	lsrs	r3, r3, #1
 80022ae:	1e5a      	subs	r2, r3, #1
 80022b0:	b2eb      	uxtb	r3, r5
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	430b      	orrs	r3, r1
 80022b8:	b2c1      	uxtb	r1, r0
 80022ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80022bc:	408a      	lsls	r2, r1
 80022be:	4313      	orrs	r3, r2
 80022c0:	4a26      	ldr	r2, [pc, #152]	; (800235c <HAL_RCC_OscConfig+0x3d0>)
 80022c2:	6053      	str	r3, [r2, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c4:	2201      	movs	r2, #1
 80022c6:	4b26      	ldr	r3, [pc, #152]	; (8002360 <HAL_RCC_OscConfig+0x3d4>)
 80022c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ca:	f7ff fcdf 	bl	8001c8c <HAL_GetTick>
 80022ce:	4605      	mov	r5, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d0:	4c22      	ldr	r4, [pc, #136]	; (800235c <HAL_RCC_OscConfig+0x3d0>)
 80022d2:	e004      	b.n	80022de <HAL_RCC_OscConfig+0x352>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d4:	f7ff fcda 	bl	8001c8c <HAL_GetTick>
 80022d8:	1b40      	subs	r0, r0, r5
 80022da:	2864      	cmp	r0, #100	; 0x64
 80022dc:	d838      	bhi.n	8002350 <HAL_RCC_OscConfig+0x3c4>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022de:	6823      	ldr	r3, [r4, #0]
 80022e0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80022e4:	d0f6      	beq.n	80022d4 <HAL_RCC_OscConfig+0x348>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80022e6:	2000      	movs	r0, #0
 80022e8:	e035      	b.n	8002356 <HAL_RCC_OscConfig+0x3ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ea:	2200      	movs	r2, #0
 80022ec:	4b1c      	ldr	r3, [pc, #112]	; (8002360 <HAL_RCC_OscConfig+0x3d4>)
 80022ee:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f0:	f7ff fccc 	bl	8001c8c <HAL_GetTick>
 80022f4:	4605      	mov	r5, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f6:	4c19      	ldr	r4, [pc, #100]	; (800235c <HAL_RCC_OscConfig+0x3d0>)
 80022f8:	e004      	b.n	8002304 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022fa:	f7ff fcc7 	bl	8001c8c <HAL_GetTick>
 80022fe:	1b40      	subs	r0, r0, r5
 8002300:	2864      	cmp	r0, #100	; 0x64
 8002302:	d827      	bhi.n	8002354 <HAL_RCC_OscConfig+0x3c8>
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002304:	6823      	ldr	r3, [r4, #0]
 8002306:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800230a:	d1f6      	bne.n	80022fa <HAL_RCC_OscConfig+0x36e>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800230c:	2000      	movs	r0, #0
 800230e:	e022      	b.n	8002356 <HAL_RCC_OscConfig+0x3ca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
      {
        return HAL_ERROR;
 8002310:	2001      	movs	r0, #1
 8002312:	e020      	b.n	8002356 <HAL_RCC_OscConfig+0x3ca>
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8002314:	2003      	movs	r0, #3
 8002316:	e01e      	b.n	8002356 <HAL_RCC_OscConfig+0x3ca>
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002318:	2003      	movs	r0, #3
 800231a:	e01c      	b.n	8002356 <HAL_RCC_OscConfig+0x3ca>
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 800231c:	2003      	movs	r0, #3
 800231e:	e01a      	b.n	8002356 <HAL_RCC_OscConfig+0x3ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
      {
        return HAL_ERROR;
 8002320:	2001      	movs	r0, #1
 8002322:	e018      	b.n	8002356 <HAL_RCC_OscConfig+0x3ca>
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002324:	2003      	movs	r0, #3
 8002326:	e016      	b.n	8002356 <HAL_RCC_OscConfig+0x3ca>
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002328:	2003      	movs	r0, #3
 800232a:	e014      	b.n	8002356 <HAL_RCC_OscConfig+0x3ca>
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 800232c:	2003      	movs	r0, #3
 800232e:	e012      	b.n	8002356 <HAL_RCC_OscConfig+0x3ca>
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8002330:	2003      	movs	r0, #3
 8002332:	e010      	b.n	8002356 <HAL_RCC_OscConfig+0x3ca>
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
      {
        return HAL_TIMEOUT;
 8002334:	2003      	movs	r0, #3
 8002336:	e00e      	b.n	8002356 <HAL_RCC_OscConfig+0x3ca>
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
      {
        return HAL_TIMEOUT;
 8002338:	2003      	movs	r0, #3
 800233a:	e00c      	b.n	8002356 <HAL_RCC_OscConfig+0x3ca>
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 800233c:	2003      	movs	r0, #3
 800233e:	e00a      	b.n	8002356 <HAL_RCC_OscConfig+0x3ca>
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8002340:	2003      	movs	r0, #3
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x3ca>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002344:	2000      	movs	r0, #0
 8002346:	e006      	b.n	8002356 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002348:	2001      	movs	r0, #1
 800234a:	e004      	b.n	8002356 <HAL_RCC_OscConfig+0x3ca>
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 800234c:	2003      	movs	r0, #3
 800234e:	e002      	b.n	8002356 <HAL_RCC_OscConfig+0x3ca>
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002350:	2003      	movs	r0, #3
 8002352:	e000      	b.n	8002356 <HAL_RCC_OscConfig+0x3ca>
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002354:	2003      	movs	r0, #3
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8002356:	b003      	add	sp, #12
 8002358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800
 8002360:	42470060 	.word	0x42470060

08002364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002368:	4604      	mov	r4, r0
 800236a:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800236c:	4ba0      	ldr	r3, [pc, #640]	; (80025f0 <HAL_RCC_ClockConfig+0x28c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 030f 	and.w	r3, r3, #15
 8002374:	428b      	cmp	r3, r1
 8002376:	d278      	bcs.n	800246a <HAL_RCC_ClockConfig+0x106>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002378:	b2ca      	uxtb	r2, r1
 800237a:	4b9d      	ldr	r3, [pc, #628]	; (80025f0 <HAL_RCC_ClockConfig+0x28c>)
 800237c:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 030f 	and.w	r3, r3, #15
 8002384:	4299      	cmp	r1, r3
 8002386:	f040 8103 	bne.w	8002590 <HAL_RCC_ClockConfig+0x22c>
    {
      return HAL_ERROR;
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800238a:	6803      	ldr	r3, [r0, #0]
 800238c:	f013 0f02 	tst.w	r3, #2
 8002390:	d006      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x3c>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002392:	4998      	ldr	r1, [pc, #608]	; (80025f4 <HAL_RCC_ClockConfig+0x290>)
 8002394:	688b      	ldr	r3, [r1, #8]
 8002396:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800239a:	6883      	ldr	r3, [r0, #8]
 800239c:	4313      	orrs	r3, r2
 800239e:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023a0:	6823      	ldr	r3, [r4, #0]
 80023a2:	f013 0f01 	tst.w	r3, #1
 80023a6:	f000 80d6 	beq.w	8002556 <HAL_RCC_ClockConfig+0x1f2>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023aa:	6863      	ldr	r3, [r4, #4]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d105      	bne.n	80023bc <HAL_RCC_ClockConfig+0x58>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b0:	4a90      	ldr	r2, [pc, #576]	; (80025f4 <HAL_RCC_ClockConfig+0x290>)
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80023b8:	d10f      	bne.n	80023da <HAL_RCC_ClockConfig+0x76>
 80023ba:	e0ec      	b.n	8002596 <HAL_RCC_ClockConfig+0x232>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80023bc:	1e9a      	subs	r2, r3, #2
 80023be:	2a01      	cmp	r2, #1
 80023c0:	d805      	bhi.n	80023ce <HAL_RCC_ClockConfig+0x6a>
              (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c2:	4a8c      	ldr	r2, [pc, #560]	; (80025f4 <HAL_RCC_ClockConfig+0x290>)
 80023c4:	6812      	ldr	r2, [r2, #0]
 80023c6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80023ca:	d106      	bne.n	80023da <HAL_RCC_ClockConfig+0x76>
 80023cc:	e0e6      	b.n	800259c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ce:	4a89      	ldr	r2, [pc, #548]	; (80025f4 <HAL_RCC_ClockConfig+0x290>)
 80023d0:	6812      	ldr	r2, [r2, #0]
 80023d2:	f012 0f02 	tst.w	r2, #2
 80023d6:	f000 80e4 	beq.w	80025a2 <HAL_RCC_ClockConfig+0x23e>
        {
          return HAL_ERROR;
        }
      }

      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023da:	4986      	ldr	r1, [pc, #536]	; (80025f4 <HAL_RCC_ClockConfig+0x290>)
 80023dc:	688a      	ldr	r2, [r1, #8]
 80023de:	f022 0203 	bic.w	r2, r2, #3
 80023e2:	4313      	orrs	r3, r2
 80023e4:	608b      	str	r3, [r1, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e6:	f7ff fc51 	bl	8001c8c <HAL_GetTick>
 80023ea:	4605      	mov	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ec:	6863      	ldr	r3, [r4, #4]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d10f      	bne.n	8002412 <HAL_RCC_ClockConfig+0xae>
 80023f2:	e005      	b.n	8002400 <HAL_RCC_ClockConfig+0x9c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f4:	f7ff fc4a 	bl	8001c8c <HAL_GetTick>
 80023f8:	1b40      	subs	r0, r0, r5
 80023fa:	42b8      	cmp	r0, r7
 80023fc:	d903      	bls.n	8002406 <HAL_RCC_ClockConfig+0xa2>
 80023fe:	e0d3      	b.n	80025a8 <HAL_RCC_ClockConfig+0x244>
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002400:	4e7c      	ldr	r6, [pc, #496]	; (80025f4 <HAL_RCC_ClockConfig+0x290>)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002402:	f241 3788 	movw	r7, #5000	; 0x1388
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002406:	68b3      	ldr	r3, [r6, #8]
 8002408:	f003 030c 	and.w	r3, r3, #12
 800240c:	2b04      	cmp	r3, #4
 800240e:	d1f1      	bne.n	80023f4 <HAL_RCC_ClockConfig+0x90>
 8002410:	e0a1      	b.n	8002556 <HAL_RCC_ClockConfig+0x1f2>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002412:	2b02      	cmp	r3, #2
 8002414:	d10f      	bne.n	8002436 <HAL_RCC_ClockConfig+0xd2>
 8002416:	e005      	b.n	8002424 <HAL_RCC_ClockConfig+0xc0>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002418:	f7ff fc38 	bl	8001c8c <HAL_GetTick>
 800241c:	1b40      	subs	r0, r0, r5
 800241e:	42b8      	cmp	r0, r7
 8002420:	d903      	bls.n	800242a <HAL_RCC_ClockConfig+0xc6>
 8002422:	e0c4      	b.n	80025ae <HAL_RCC_ClockConfig+0x24a>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002424:	4e73      	ldr	r6, [pc, #460]	; (80025f4 <HAL_RCC_ClockConfig+0x290>)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002426:	f241 3788 	movw	r7, #5000	; 0x1388
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800242a:	68b3      	ldr	r3, [r6, #8]
 800242c:	f003 030c 	and.w	r3, r3, #12
 8002430:	2b08      	cmp	r3, #8
 8002432:	d1f1      	bne.n	8002418 <HAL_RCC_ClockConfig+0xb4>
 8002434:	e08f      	b.n	8002556 <HAL_RCC_ClockConfig+0x1f2>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8002436:	2b03      	cmp	r3, #3
 8002438:	d10f      	bne.n	800245a <HAL_RCC_ClockConfig+0xf6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 800243a:	4e6e      	ldr	r6, [pc, #440]	; (80025f4 <HAL_RCC_ClockConfig+0x290>)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800243c:	f241 3488 	movw	r4, #5000	; 0x1388
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8002440:	68b3      	ldr	r3, [r6, #8]
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002442:	f7ff fc23 	bl	8001c8c <HAL_GetTick>
 8002446:	1b40      	subs	r0, r0, r5
 8002448:	42a0      	cmp	r0, r4
 800244a:	d9f9      	bls.n	8002440 <HAL_RCC_ClockConfig+0xdc>
 800244c:	e0b2      	b.n	80025b4 <HAL_RCC_ClockConfig+0x250>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800244e:	f7ff fc1d 	bl	8001c8c <HAL_GetTick>
 8002452:	1b40      	subs	r0, r0, r5
 8002454:	42b8      	cmp	r0, r7
 8002456:	d903      	bls.n	8002460 <HAL_RCC_ClockConfig+0xfc>
 8002458:	e0af      	b.n	80025ba <HAL_RCC_ClockConfig+0x256>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800245a:	4e66      	ldr	r6, [pc, #408]	; (80025f4 <HAL_RCC_ClockConfig+0x290>)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800245c:	f241 3788 	movw	r7, #5000	; 0x1388
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002460:	68b3      	ldr	r3, [r6, #8]
 8002462:	f013 0f0c 	tst.w	r3, #12
 8002466:	d1f2      	bne.n	800244e <HAL_RCC_ClockConfig+0xea>
 8002468:	e075      	b.n	8002556 <HAL_RCC_ClockConfig+0x1f2>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800246a:	6803      	ldr	r3, [r0, #0]
 800246c:	f013 0f02 	tst.w	r3, #2
 8002470:	d006      	beq.n	8002480 <HAL_RCC_ClockConfig+0x11c>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002472:	4960      	ldr	r1, [pc, #384]	; (80025f4 <HAL_RCC_ClockConfig+0x290>)
 8002474:	688b      	ldr	r3, [r1, #8]
 8002476:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800247a:	6883      	ldr	r3, [r0, #8]
 800247c:	4313      	orrs	r3, r2
 800247e:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002480:	6823      	ldr	r3, [r4, #0]
 8002482:	f013 0f01 	tst.w	r3, #1
 8002486:	d05e      	beq.n	8002546 <HAL_RCC_ClockConfig+0x1e2>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002488:	6863      	ldr	r3, [r4, #4]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d105      	bne.n	800249a <HAL_RCC_ClockConfig+0x136>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248e:	4a59      	ldr	r2, [pc, #356]	; (80025f4 <HAL_RCC_ClockConfig+0x290>)
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002496:	d10f      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x154>
 8002498:	e092      	b.n	80025c0 <HAL_RCC_ClockConfig+0x25c>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) || 
 800249a:	1e9a      	subs	r2, r3, #2
 800249c:	2a01      	cmp	r2, #1
 800249e:	d805      	bhi.n	80024ac <HAL_RCC_ClockConfig+0x148>
              (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a0:	4a54      	ldr	r2, [pc, #336]	; (80025f4 <HAL_RCC_ClockConfig+0x290>)
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80024a8:	d106      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x154>
 80024aa:	e08c      	b.n	80025c6 <HAL_RCC_ClockConfig+0x262>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ac:	4a51      	ldr	r2, [pc, #324]	; (80025f4 <HAL_RCC_ClockConfig+0x290>)
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	f012 0f02 	tst.w	r2, #2
 80024b4:	f000 808a 	beq.w	80025cc <HAL_RCC_ClockConfig+0x268>
        {
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024b8:	494e      	ldr	r1, [pc, #312]	; (80025f4 <HAL_RCC_ClockConfig+0x290>)
 80024ba:	688a      	ldr	r2, [r1, #8]
 80024bc:	f022 0203 	bic.w	r2, r2, #3
 80024c0:	4313      	orrs	r3, r2
 80024c2:	608b      	str	r3, [r1, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c4:	f7ff fbe2 	bl	8001c8c <HAL_GetTick>
 80024c8:	4606      	mov	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ca:	6863      	ldr	r3, [r4, #4]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d10f      	bne.n	80024f0 <HAL_RCC_ClockConfig+0x18c>
 80024d0:	e005      	b.n	80024de <HAL_RCC_ClockConfig+0x17a>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d2:	f7ff fbdb 	bl	8001c8c <HAL_GetTick>
 80024d6:	1b80      	subs	r0, r0, r6
 80024d8:	4540      	cmp	r0, r8
 80024da:	d903      	bls.n	80024e4 <HAL_RCC_ClockConfig+0x180>
 80024dc:	e079      	b.n	80025d2 <HAL_RCC_ClockConfig+0x26e>
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80024de:	4f45      	ldr	r7, [pc, #276]	; (80025f4 <HAL_RCC_ClockConfig+0x290>)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e0:	f241 3888 	movw	r8, #5000	; 0x1388
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f003 030c 	and.w	r3, r3, #12
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d1f1      	bne.n	80024d2 <HAL_RCC_ClockConfig+0x16e>
 80024ee:	e02a      	b.n	8002546 <HAL_RCC_ClockConfig+0x1e2>
          {
            return HAL_TIMEOUT;
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d10f      	bne.n	8002514 <HAL_RCC_ClockConfig+0x1b0>
 80024f4:	e005      	b.n	8002502 <HAL_RCC_ClockConfig+0x19e>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f6:	f7ff fbc9 	bl	8001c8c <HAL_GetTick>
 80024fa:	1b80      	subs	r0, r0, r6
 80024fc:	4540      	cmp	r0, r8
 80024fe:	d903      	bls.n	8002508 <HAL_RCC_ClockConfig+0x1a4>
 8002500:	e06a      	b.n	80025d8 <HAL_RCC_ClockConfig+0x274>
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002502:	4f3c      	ldr	r7, [pc, #240]	; (80025f4 <HAL_RCC_ClockConfig+0x290>)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002504:	f241 3888 	movw	r8, #5000	; 0x1388
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	2b08      	cmp	r3, #8
 8002510:	d1f1      	bne.n	80024f6 <HAL_RCC_ClockConfig+0x192>
 8002512:	e018      	b.n	8002546 <HAL_RCC_ClockConfig+0x1e2>
          {
            return HAL_TIMEOUT;
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8002514:	2b03      	cmp	r3, #3
 8002516:	d10f      	bne.n	8002538 <HAL_RCC_ClockConfig+0x1d4>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8002518:	4d36      	ldr	r5, [pc, #216]	; (80025f4 <HAL_RCC_ClockConfig+0x290>)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800251a:	f241 3488 	movw	r4, #5000	; 0x1388
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 800251e:	68ab      	ldr	r3, [r5, #8]
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002520:	f7ff fbb4 	bl	8001c8c <HAL_GetTick>
 8002524:	1b80      	subs	r0, r0, r6
 8002526:	42a0      	cmp	r0, r4
 8002528:	d9f9      	bls.n	800251e <HAL_RCC_ClockConfig+0x1ba>
 800252a:	e058      	b.n	80025de <HAL_RCC_ClockConfig+0x27a>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800252c:	f7ff fbae 	bl	8001c8c <HAL_GetTick>
 8002530:	1b80      	subs	r0, r0, r6
 8002532:	4540      	cmp	r0, r8
 8002534:	d903      	bls.n	800253e <HAL_RCC_ClockConfig+0x1da>
 8002536:	e055      	b.n	80025e4 <HAL_RCC_ClockConfig+0x280>
          } 
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002538:	4f2e      	ldr	r7, [pc, #184]	; (80025f4 <HAL_RCC_ClockConfig+0x290>)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800253a:	f241 3888 	movw	r8, #5000	; 0x1388
          } 
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	f013 0f0c 	tst.w	r3, #12
 8002544:	d1f2      	bne.n	800252c <HAL_RCC_ClockConfig+0x1c8>
        }
      }
    }
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002546:	b2ea      	uxtb	r2, r5
 8002548:	4b29      	ldr	r3, [pc, #164]	; (80025f0 <HAL_RCC_ClockConfig+0x28c>)
 800254a:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	429d      	cmp	r5, r3
 8002554:	d149      	bne.n	80025ea <HAL_RCC_ClockConfig+0x286>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002556:	6823      	ldr	r3, [r4, #0]
 8002558:	f013 0f04 	tst.w	r3, #4
 800255c:	d006      	beq.n	800256c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800255e:	4925      	ldr	r1, [pc, #148]	; (80025f4 <HAL_RCC_ClockConfig+0x290>)
 8002560:	688b      	ldr	r3, [r1, #8]
 8002562:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002566:	68e3      	ldr	r3, [r4, #12]
 8002568:	4313      	orrs	r3, r2
 800256a:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800256c:	6823      	ldr	r3, [r4, #0]
 800256e:	f013 0f08 	tst.w	r3, #8
 8002572:	d007      	beq.n	8002584 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002574:	4a1f      	ldr	r2, [pc, #124]	; (80025f4 <HAL_RCC_ClockConfig+0x290>)
 8002576:	6893      	ldr	r3, [r2, #8]
 8002578:	6921      	ldr	r1, [r4, #16]
 800257a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800257e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002582:	6093      	str	r3, [r2, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002584:	200f      	movs	r0, #15
 8002586:	f7ff f82f 	bl	80015e8 <HAL_InitTick>
  
  return HAL_OK;
 800258a:	2000      	movs	r0, #0
 800258c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
    {
      return HAL_ERROR;
 8002590:	2001      	movs	r0, #1
 8002592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
        {
          return HAL_ERROR;
 8002596:	2001      	movs	r0, #1
 8002598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          return HAL_ERROR;
 800259c:	2001      	movs	r0, #1
 800259e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
        {
          return HAL_ERROR;
 80025a2:	2001      	movs	r0, #1
 80025a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 80025a8:	2003      	movs	r0, #3
 80025aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 80025ae:	2003      	movs	r0, #3
 80025b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 80025b4:	2003      	movs	r0, #3
 80025b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 80025ba:	2003      	movs	r0, #3
 80025bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
        {
          return HAL_ERROR;
 80025c0:	2001      	movs	r0, #1
 80025c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          return HAL_ERROR;
 80025c6:	2001      	movs	r0, #1
 80025c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
        {
          return HAL_ERROR;
 80025cc:	2001      	movs	r0, #1
 80025ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 80025d2:	2003      	movs	r0, #3
 80025d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 80025d8:	2003      	movs	r0, #3
 80025da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 80025de:	2003      	movs	r0, #3
 80025e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 80025e4:	2003      	movs	r0, #3
 80025e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
    {
      return HAL_ERROR;
 80025ea:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 80025ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025f0:	40023c00 	.word	0x40023c00
 80025f4:	40023800 	.word	0x40023800

080025f8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025f8:	4b1c      	ldr	r3, [pc, #112]	; (800266c <HAL_RCC_GetSysClockFreq+0x74>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	2b04      	cmp	r3, #4
 8002602:	d002      	beq.n	800260a <HAL_RCC_GetSysClockFreq+0x12>
 8002604:	2b08      	cmp	r3, #8
 8002606:	d002      	beq.n	800260e <HAL_RCC_GetSysClockFreq+0x16>
 8002608:	e02e      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0x70>
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800260a:	4819      	ldr	r0, [pc, #100]	; (8002670 <HAL_RCC_GetSysClockFreq+0x78>)
 800260c:	4770      	bx	lr
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800260e:	4a17      	ldr	r2, [pc, #92]	; (800266c <HAL_RCC_GetSysClockFreq+0x74>)
 8002610:	6853      	ldr	r3, [r2, #4]
 8002612:	f003 033f 	and.w	r3, r3, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002616:	6852      	ldr	r2, [r2, #4]
 8002618:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800261c:	4a13      	ldr	r2, [pc, #76]	; (800266c <HAL_RCC_GetSysClockFreq+0x74>)
 800261e:	6851      	ldr	r1, [r2, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002620:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002624:	fa92 f0a2 	rbit	r0, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002628:	fab0 f080 	clz	r0, r0
 800262c:	ea02 0201 	and.w	r2, r2, r1
 8002630:	b2c0      	uxtb	r0, r0
 8002632:	fa22 f000 	lsr.w	r0, r2, r0
 8002636:	bf14      	ite	ne
 8002638:	4a0d      	ldrne	r2, [pc, #52]	; (8002670 <HAL_RCC_GetSysClockFreq+0x78>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800263a:	4a0e      	ldreq	r2, [pc, #56]	; (8002674 <HAL_RCC_GetSysClockFreq+0x7c>)
 800263c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002640:	fb03 f300 	mul.w	r3, r3, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8002644:	4a09      	ldr	r2, [pc, #36]	; (800266c <HAL_RCC_GetSysClockFreq+0x74>)
 8002646:	6850      	ldr	r0, [r2, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002648:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800264c:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002650:	fab1 f181 	clz	r1, r1
      
      sysclockfreq = pllvco/pllp;
 8002654:	f400 3240 	and.w	r2, r0, #196608	; 0x30000
 8002658:	b2c8      	uxtb	r0, r1
 800265a:	fa22 f000 	lsr.w	r0, r2, r0
 800265e:	3001      	adds	r0, #1
 8002660:	0040      	lsls	r0, r0, #1
 8002662:	fbb3 f0f0 	udiv	r0, r3, r0
      break;
 8002666:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002668:	4802      	ldr	r0, [pc, #8]	; (8002674 <HAL_RCC_GetSysClockFreq+0x7c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800266a:	4770      	bx	lr
 800266c:	40023800 	.word	0x40023800
 8002670:	007a1200 	.word	0x007a1200
 8002674:	00f42400 	.word	0x00f42400

08002678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002678:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800267a:	f7ff ffbd 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 800267e:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002680:	689a      	ldr	r2, [r3, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	23f0      	movs	r3, #240	; 0xf0
 8002684:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002688:	fab3 f383 	clz	r3, r3
 800268c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	fa22 f303 	lsr.w	r3, r2, r3
 8002696:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <HAL_RCC_GetHCLKFreq+0x30>)
 8002698:	5cd3      	ldrb	r3, [r2, r3]
 800269a:	40d8      	lsrs	r0, r3
 800269c:	4b03      	ldr	r3, [pc, #12]	; (80026ac <HAL_RCC_GetHCLKFreq+0x34>)
 800269e:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 80026a0:	bd08      	pop	{r3, pc}
 80026a2:	bf00      	nop
 80026a4:	40023800 	.word	0x40023800
 80026a8:	08007478 	.word	0x08007478
 80026ac:	20000000 	.word	0x20000000

080026b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 80026b0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80026b2:	f7ff ffe1 	bl	8002678 <HAL_RCC_GetHCLKFreq>
 80026b6:	4b08      	ldr	r3, [pc, #32]	; (80026d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026b8:	689a      	ldr	r2, [r3, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ba:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80026be:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	fa22 f303 	lsr.w	r3, r2, r3
 80026d0:	4a02      	ldr	r2, [pc, #8]	; (80026dc <HAL_RCC_GetPCLK1Freq+0x2c>)
 80026d2:	5cd3      	ldrb	r3, [r2, r3]
}
 80026d4:	40d8      	lsrs	r0, r3
 80026d6:	bd08      	pop	{r3, pc}
 80026d8:	40023800 	.word	0x40023800
 80026dc:	08007478 	.word	0x08007478

080026e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026e0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80026e2:	f7ff ffc9 	bl	8002678 <HAL_RCC_GetHCLKFreq>
 80026e6:	4b08      	ldr	r3, [pc, #32]	; (8002708 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026e8:	689a      	ldr	r2, [r3, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80026ee:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	f402 4260 	and.w	r2, r2, #57344	; 0xe000
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002700:	4a02      	ldr	r2, [pc, #8]	; (800270c <HAL_RCC_GetPCLK2Freq+0x2c>)
 8002702:	5cd3      	ldrb	r3, [r2, r3]
} 
 8002704:	40d8      	lsrs	r0, r3
 8002706:	bd08      	pop	{r3, pc}
 8002708:	40023800 	.word	0x40023800
 800270c:	08007478 	.word	0x08007478

08002710 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002714:	4604      	mov	r4, r0
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002716:	6801      	ldr	r1, [r0, #0]
 8002718:	690b      	ldr	r3, [r1, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800271a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800271e:	68c3      	ldr	r3, [r0, #12]
 8002720:	4313      	orrs	r3, r2
  
  /* Write to USART CR2 */
  huart->Instance->CR2 = (uint32_t)tmpreg;
 8002722:	610b      	str	r3, [r1, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8002724:	6800      	ldr	r0, [r0, #0]
 8002726:	68c3      	ldr	r3, [r0, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002728:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800272c:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002730:	68a1      	ldr	r1, [r4, #8]
 8002732:	6922      	ldr	r2, [r4, #16]
 8002734:	4311      	orrs	r1, r2
 8002736:	6962      	ldr	r2, [r4, #20]
 8002738:	4311      	orrs	r1, r2
 800273a:	69e2      	ldr	r2, [r4, #28]
 800273c:	430a      	orrs	r2, r1
 800273e:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  huart->Instance->CR1 = (uint32_t)tmpreg;
 8002740:	60c3      	str	r3, [r0, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8002742:	6821      	ldr	r1, [r4, #0]
 8002744:	694b      	ldr	r3, [r1, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8002746:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800274a:	69a3      	ldr	r3, [r4, #24]
 800274c:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  huart->Instance->CR3 = (uint32_t)tmpreg;
 800274e:	614b      	str	r3, [r1, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002750:	69e3      	ldr	r3, [r4, #28]
 8002752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002756:	d170      	bne.n	800283a <UART_SetConfig+0x12a>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002758:	6826      	ldr	r6, [r4, #0]
 800275a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800275e:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8002762:	429e      	cmp	r6, r3
 8002764:	d003      	beq.n	800276e <UART_SetConfig+0x5e>
 8002766:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800276a:	429e      	cmp	r6, r3
 800276c:	d132      	bne.n	80027d4 <UART_SetConfig+0xc4>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800276e:	f7ff ffb7 	bl	80026e0 <HAL_RCC_GetPCLK2Freq>
 8002772:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002776:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800277a:	6865      	ldr	r5, [r4, #4]
 800277c:	006d      	lsls	r5, r5, #1
 800277e:	fbb0 f5f5 	udiv	r5, r0, r5
 8002782:	4f65      	ldr	r7, [pc, #404]	; (8002918 <UART_SetConfig+0x208>)
 8002784:	fba7 3505 	umull	r3, r5, r7, r5
 8002788:	096d      	lsrs	r5, r5, #5
 800278a:	012d      	lsls	r5, r5, #4
 800278c:	f7ff ffa8 	bl	80026e0 <HAL_RCC_GetPCLK2Freq>
 8002790:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002794:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002798:	6863      	ldr	r3, [r4, #4]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	fbb0 f8f3 	udiv	r8, r0, r3
 80027a0:	f7ff ff9e 	bl	80026e0 <HAL_RCC_GetPCLK2Freq>
 80027a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027ac:	6863      	ldr	r3, [r4, #4]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80027b4:	fba7 2303 	umull	r2, r3, r7, r3
 80027b8:	095b      	lsrs	r3, r3, #5
 80027ba:	2264      	movs	r2, #100	; 0x64
 80027bc:	fb02 8313 	mls	r3, r2, r3, r8
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	3332      	adds	r3, #50	; 0x32
 80027c4:	fba7 2303 	umull	r2, r3, r7, r3
 80027c8:	f3c3 1343 	ubfx	r3, r3, #5, #4
 80027cc:	432b      	orrs	r3, r5
 80027ce:	60b3      	str	r3, [r6, #8]
 80027d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80027d4:	f7ff ff6c 	bl	80026b0 <HAL_RCC_GetPCLK1Freq>
 80027d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027e0:	6865      	ldr	r5, [r4, #4]
 80027e2:	006d      	lsls	r5, r5, #1
 80027e4:	fbb0 f5f5 	udiv	r5, r0, r5
 80027e8:	4f4b      	ldr	r7, [pc, #300]	; (8002918 <UART_SetConfig+0x208>)
 80027ea:	fba7 3505 	umull	r3, r5, r7, r5
 80027ee:	096d      	lsrs	r5, r5, #5
 80027f0:	012d      	lsls	r5, r5, #4
 80027f2:	f7ff ff5d 	bl	80026b0 <HAL_RCC_GetPCLK1Freq>
 80027f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027fe:	6863      	ldr	r3, [r4, #4]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	fbb0 f8f3 	udiv	r8, r0, r3
 8002806:	f7ff ff53 	bl	80026b0 <HAL_RCC_GetPCLK1Freq>
 800280a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800280e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002812:	6863      	ldr	r3, [r4, #4]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	fbb0 f3f3 	udiv	r3, r0, r3
 800281a:	fba7 2303 	umull	r2, r3, r7, r3
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	2264      	movs	r2, #100	; 0x64
 8002822:	fb02 8313 	mls	r3, r2, r3, r8
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	3332      	adds	r3, #50	; 0x32
 800282a:	fba7 2303 	umull	r2, r3, r7, r3
 800282e:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8002832:	432b      	orrs	r3, r5
 8002834:	60b3      	str	r3, [r6, #8]
 8002836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800283a:	6826      	ldr	r6, [r4, #0]
 800283c:	4b37      	ldr	r3, [pc, #220]	; (800291c <UART_SetConfig+0x20c>)
 800283e:	429e      	cmp	r6, r3
 8002840:	d003      	beq.n	800284a <UART_SetConfig+0x13a>
 8002842:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002846:	429e      	cmp	r6, r3
 8002848:	d132      	bne.n	80028b0 <UART_SetConfig+0x1a0>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800284a:	f7ff ff49 	bl	80026e0 <HAL_RCC_GetPCLK2Freq>
 800284e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002852:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002856:	6865      	ldr	r5, [r4, #4]
 8002858:	00ad      	lsls	r5, r5, #2
 800285a:	fbb0 f5f5 	udiv	r5, r0, r5
 800285e:	4f2e      	ldr	r7, [pc, #184]	; (8002918 <UART_SetConfig+0x208>)
 8002860:	fba7 3505 	umull	r3, r5, r7, r5
 8002864:	096d      	lsrs	r5, r5, #5
 8002866:	012d      	lsls	r5, r5, #4
 8002868:	f7ff ff3a 	bl	80026e0 <HAL_RCC_GetPCLK2Freq>
 800286c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002870:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002874:	6863      	ldr	r3, [r4, #4]
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	fbb0 f8f3 	udiv	r8, r0, r3
 800287c:	f7ff ff30 	bl	80026e0 <HAL_RCC_GetPCLK2Freq>
 8002880:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002884:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002888:	6863      	ldr	r3, [r4, #4]
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002890:	fba7 2303 	umull	r2, r3, r7, r3
 8002894:	095b      	lsrs	r3, r3, #5
 8002896:	2264      	movs	r2, #100	; 0x64
 8002898:	fb02 8313 	mls	r3, r2, r3, r8
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	3332      	adds	r3, #50	; 0x32
 80028a0:	fba7 2303 	umull	r2, r3, r7, r3
 80028a4:	f3c3 1343 	ubfx	r3, r3, #5, #4
 80028a8:	432b      	orrs	r3, r5
 80028aa:	60b3      	str	r3, [r6, #8]
 80028ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80028b0:	f7ff fefe 	bl	80026b0 <HAL_RCC_GetPCLK1Freq>
 80028b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028bc:	6865      	ldr	r5, [r4, #4]
 80028be:	00ad      	lsls	r5, r5, #2
 80028c0:	fbb0 f5f5 	udiv	r5, r0, r5
 80028c4:	4f14      	ldr	r7, [pc, #80]	; (8002918 <UART_SetConfig+0x208>)
 80028c6:	fba7 3505 	umull	r3, r5, r7, r5
 80028ca:	096d      	lsrs	r5, r5, #5
 80028cc:	012d      	lsls	r5, r5, #4
 80028ce:	f7ff feef 	bl	80026b0 <HAL_RCC_GetPCLK1Freq>
 80028d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028da:	6863      	ldr	r3, [r4, #4]
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	fbb0 f8f3 	udiv	r8, r0, r3
 80028e2:	f7ff fee5 	bl	80026b0 <HAL_RCC_GetPCLK1Freq>
 80028e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028ee:	6863      	ldr	r3, [r4, #4]
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f6:	fba7 2303 	umull	r2, r3, r7, r3
 80028fa:	095a      	lsrs	r2, r3, #5
 80028fc:	2364      	movs	r3, #100	; 0x64
 80028fe:	fb03 8312 	mls	r3, r3, r2, r8
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	3332      	adds	r3, #50	; 0x32
 8002906:	fba7 2303 	umull	r2, r3, r7, r3
 800290a:	f3c3 1343 	ubfx	r3, r3, #5, #4
 800290e:	432b      	orrs	r3, r5
 8002910:	60b3      	str	r3, [r6, #8]
 8002912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002916:	bf00      	nop
 8002918:	51eb851f 	.word	0x51eb851f
 800291c:	40011000 	.word	0x40011000

08002920 <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 8002920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002924:	4606      	mov	r6, r0
 8002926:	460d      	mov	r5, r1
 8002928:	4690      	mov	r8, r2
 800292a:	461c      	mov	r4, r3
  uint32_t tickstart = 0;

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800292c:	f7ff f9ae 	bl	8001c8c <HAL_GetTick>
 8002930:	4607      	mov	r7, r0

  /* Wait until flag is set */
  if(Status == RESET)
 8002932:	f1b8 0f00 	cmp.w	r8, #0
 8002936:	d026      	beq.n	8002986 <UART_WaitOnFlagUntilTimeout+0x66>
 8002938:	e053      	b.n	80029e2 <UART_WaitOnFlagUntilTimeout+0xc2>
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800293a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800293e:	d023      	beq.n	8002988 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002940:	b124      	cbz	r4, 800294c <UART_WaitOnFlagUntilTimeout+0x2c>
 8002942:	f7ff f9a3 	bl	8001c8c <HAL_GetTick>
 8002946:	1bc0      	subs	r0, r0, r7
 8002948:	4284      	cmp	r4, r0
 800294a:	d21c      	bcs.n	8002986 <UART_WaitOnFlagUntilTimeout+0x66>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800294c:	6832      	ldr	r2, [r6, #0]
 800294e:	68d3      	ldr	r3, [r2, #12]
 8002950:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002954:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002956:	6832      	ldr	r2, [r6, #0]
 8002958:	68d3      	ldr	r3, [r2, #12]
 800295a:	f023 0320 	bic.w	r3, r3, #32
 800295e:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002960:	6832      	ldr	r2, [r6, #0]
 8002962:	68d3      	ldr	r3, [r2, #12]
 8002964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002968:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800296a:	6832      	ldr	r2, [r6, #0]
 800296c:	6953      	ldr	r3, [r2, #20]
 800296e:	f023 0301 	bic.w	r3, r3, #1
 8002972:	6153      	str	r3, [r2, #20]

          huart->State= HAL_UART_STATE_READY;
 8002974:	2301      	movs	r3, #1
 8002976:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800297a:	2300      	movs	r3, #0
 800297c:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38

          return HAL_TIMEOUT;
 8002980:	2003      	movs	r0, #3
 8002982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  tickstart = HAL_GetTick();

  /* Wait until flag is set */
  if(Status == RESET)
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8002986:	6832      	ldr	r2, [r6, #0]
 8002988:	6813      	ldr	r3, [r2, #0]
 800298a:	ea35 0303 	bics.w	r3, r5, r3
 800298e:	d1d4      	bne.n	800293a <UART_WaitOnFlagUntilTimeout+0x1a>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002990:	2000      	movs	r0, #0
 8002992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002996:	f1b4 3fff 	cmp.w	r4, #4294967295
 800299a:	d023      	beq.n	80029e4 <UART_WaitOnFlagUntilTimeout+0xc4>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800299c:	b124      	cbz	r4, 80029a8 <UART_WaitOnFlagUntilTimeout+0x88>
 800299e:	f7ff f975 	bl	8001c8c <HAL_GetTick>
 80029a2:	1bc0      	subs	r0, r0, r7
 80029a4:	4284      	cmp	r4, r0
 80029a6:	d21c      	bcs.n	80029e2 <UART_WaitOnFlagUntilTimeout+0xc2>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029a8:	6832      	ldr	r2, [r6, #0]
 80029aa:	68d3      	ldr	r3, [r2, #12]
 80029ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029b0:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80029b2:	6832      	ldr	r2, [r6, #0]
 80029b4:	68d3      	ldr	r3, [r2, #12]
 80029b6:	f023 0320 	bic.w	r3, r3, #32
 80029ba:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80029bc:	6832      	ldr	r2, [r6, #0]
 80029be:	68d3      	ldr	r3, [r2, #12]
 80029c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029c4:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80029c6:	6832      	ldr	r2, [r6, #0]
 80029c8:	6953      	ldr	r3, [r2, #20]
 80029ca:	f023 0301 	bic.w	r3, r3, #1
 80029ce:	6153      	str	r3, [r2, #20]

          huart->State= HAL_UART_STATE_READY;
 80029d0:	2301      	movs	r3, #1
 80029d2:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029d6:	2300      	movs	r3, #0
 80029d8:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
        
          return HAL_TIMEOUT;
 80029dc:	2003      	movs	r0, #3
 80029de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      }
    }
  }
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 80029e2:	6832      	ldr	r2, [r6, #0]
 80029e4:	6813      	ldr	r3, [r2, #0]
 80029e6:	ea35 0303 	bics.w	r3, r5, r3
 80029ea:	d0d4      	beq.n	8002996 <UART_WaitOnFlagUntilTimeout+0x76>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80029ec:	2000      	movs	r0, #0
}
 80029ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029f2:	bf00      	nop

080029f4 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
 80029f4:	b358      	cbz	r0, 8002a4e <HAL_UART_Init+0x5a>
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029f6:	b510      	push	{r4, lr}
 80029f8:	4604      	mov	r4, r0
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->State == HAL_UART_STATE_RESET)
 80029fa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80029fe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002a02:	d104      	bne.n	8002a0e <HAL_UART_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a04:	2300      	movs	r3, #0
 8002a06:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8002a0a:	f7fe fcf3 	bl	80013f4 <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a14:	6822      	ldr	r2, [r4, #0]
 8002a16:	68d3      	ldr	r3, [r2, #12]
 8002a18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a1c:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a1e:	4620      	mov	r0, r4
 8002a20:	f7ff fe76 	bl	8002710 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8002a24:	6822      	ldr	r2, [r4, #0]
 8002a26:	6913      	ldr	r3, [r2, #16]
 8002a28:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002a2c:	6113      	str	r3, [r2, #16]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8002a2e:	6822      	ldr	r2, [r4, #0]
 8002a30:	6953      	ldr	r3, [r2, #20]
 8002a32:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002a36:	6153      	str	r3, [r2, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a38:	6822      	ldr	r2, [r4, #0]
 8002a3a:	68d3      	ldr	r3, [r2, #12]
 8002a3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a40:	60d3      	str	r3, [r2, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a42:	2000      	movs	r0, #0
 8002a44:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8002a46:	2301      	movs	r3, #1
 8002a48:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8002a4c:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8002a4e:	2001      	movs	r0, #1
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop

08002a54 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a58:	4604      	mov	r4, r0
 8002a5a:	460d      	mov	r5, r1
 8002a5c:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tmp1 = 0;
  
  tmp1 = huart->State;
 8002a5e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002a62:	b2db      	uxtb	r3, r3
  if((tmp1 == HAL_UART_STATE_READY) || (tmp1 == HAL_UART_STATE_BUSY_RX))
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d001      	beq.n	8002a6c <HAL_UART_Transmit+0x18>
 8002a68:	2b22      	cmp	r3, #34	; 0x22
 8002a6a:	d154      	bne.n	8002b16 <HAL_UART_Transmit+0xc2>
  {
    if((pData == NULL ) || (Size == 0)) 
 8002a6c:	2d00      	cmp	r5, #0
 8002a6e:	d054      	beq.n	8002b1a <HAL_UART_Transmit+0xc6>
 8002a70:	2a00      	cmp	r2, #0
 8002a72:	d054      	beq.n	8002b1e <HAL_UART_Transmit+0xca>
    {
      return  HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8002a74:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d052      	beq.n	8002b22 <HAL_UART_Transmit+0xce>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a82:	2300      	movs	r3, #0
 8002a84:	63e3      	str	r3, [r4, #60]	; 0x3c
    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8002a86:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b22      	cmp	r3, #34	; 0x22
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8002a8e:	bf0c      	ite	eq
 8002a90:	2332      	moveq	r3, #50	; 0x32
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8002a92:	2312      	movne	r3, #18
 8002a94:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    }

    huart->TxXferSize = Size;
 8002a98:	84a2      	strh	r2, [r4, #36]	; 0x24
          pData +=1;
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002a9a:	f04f 0800 	mov.w	r8, #0
 8002a9e:	2780      	movs	r7, #128	; 0x80

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0)
    {
      huart->TxXferCount--;
 8002aa0:	3a01      	subs	r2, #1
 8002aa2:	84e2      	strh	r2, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002aa4:	68a3      	ldr	r3, [r4, #8]
 8002aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aaa:	d112      	bne.n	8002ad2 <HAL_UART_Transmit+0x7e>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002aac:	4633      	mov	r3, r6
 8002aae:	4642      	mov	r2, r8
 8002ab0:	4639      	mov	r1, r7
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	f7ff ff34 	bl	8002920 <UART_WaitOnFlagUntilTimeout>
 8002ab8:	2800      	cmp	r0, #0
 8002aba:	d134      	bne.n	8002b26 <HAL_UART_Transmit+0xd2>
        { 
          return HAL_TIMEOUT;
        }
        tmp = (uint16_t*) pData;
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002abc:	6822      	ldr	r2, [r4, #0]
 8002abe:	882b      	ldrh	r3, [r5, #0]
 8002ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac4:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002ac6:	6923      	ldr	r3, [r4, #16]
 8002ac8:	b90b      	cbnz	r3, 8002ace <HAL_UART_Transmit+0x7a>
        {
          pData +=2;
 8002aca:	3502      	adds	r5, #2
 8002acc:	e00c      	b.n	8002ae8 <HAL_UART_Transmit+0x94>
        }
        else
        { 
          pData +=1;
 8002ace:	3501      	adds	r5, #1
 8002ad0:	e00a      	b.n	8002ae8 <HAL_UART_Transmit+0x94>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002ad2:	4633      	mov	r3, r6
 8002ad4:	4642      	mov	r2, r8
 8002ad6:	4639      	mov	r1, r7
 8002ad8:	4620      	mov	r0, r4
 8002ada:	f7ff ff21 	bl	8002920 <UART_WaitOnFlagUntilTimeout>
 8002ade:	bb20      	cbnz	r0, 8002b2a <HAL_UART_Transmit+0xd6>
        {
          return HAL_TIMEOUT;
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002ae0:	6823      	ldr	r3, [r4, #0]
 8002ae2:	782a      	ldrb	r2, [r5, #0]
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	3501      	adds	r5, #1
      huart->State = HAL_UART_STATE_BUSY_TX;
    }

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0)
 8002ae8:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002aea:	2a00      	cmp	r2, #0
 8002aec:	d1d8      	bne.n	8002aa0 <HAL_UART_Transmit+0x4c>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8002aee:	4633      	mov	r3, r6
 8002af0:	2140      	movs	r1, #64	; 0x40
 8002af2:	4620      	mov	r0, r4
 8002af4:	f7ff ff14 	bl	8002920 <UART_WaitOnFlagUntilTimeout>
 8002af8:	4603      	mov	r3, r0
 8002afa:	b9c0      	cbnz	r0, 8002b2e <HAL_UART_Transmit+0xda>
    { 
      return HAL_TIMEOUT;
    }
    
    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002afc:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	2a32      	cmp	r2, #50	; 0x32
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8002b04:	bf0c      	ite	eq
 8002b06:	2222      	moveq	r2, #34	; 0x22
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8002b08:	2201      	movne	r2, #1
 8002b0a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    }
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    
    return HAL_OK;
 8002b14:	e00c      	b.n	8002b30 <HAL_UART_Transmit+0xdc>
  }
  else
  {
    return HAL_BUSY;   
 8002b16:	2302      	movs	r3, #2
 8002b18:	e00a      	b.n	8002b30 <HAL_UART_Transmit+0xdc>
  tmp1 = huart->State;
  if((tmp1 == HAL_UART_STATE_READY) || (tmp1 == HAL_UART_STATE_BUSY_RX))
  {
    if((pData == NULL ) || (Size == 0)) 
    {
      return  HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e008      	b.n	8002b30 <HAL_UART_Transmit+0xdc>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e006      	b.n	8002b30 <HAL_UART_Transmit+0xdc>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8002b22:	2302      	movs	r3, #2
 8002b24:	e004      	b.n	8002b30 <HAL_UART_Transmit+0xdc>
      huart->TxXferCount--;
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
        { 
          return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e002      	b.n	8002b30 <HAL_UART_Transmit+0xdc>
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e000      	b.n	8002b30 <HAL_UART_Transmit+0xdc>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
    { 
      return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
  }
  else
  {
    return HAL_BUSY;   
  }
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b36:	bf00      	nop

08002b38 <HAL_UART_Receive_IT>:
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  uint32_t tmp = 0;
  
  tmp = huart->State;  
 8002b38:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002b3c:	b2db      	uxtb	r3, r3
  if((tmp == HAL_UART_STATE_READY) || (tmp == HAL_UART_STATE_BUSY_TX))
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d001      	beq.n	8002b46 <HAL_UART_Receive_IT+0xe>
 8002b42:	2b12      	cmp	r3, #18
 8002b44:	d12c      	bne.n	8002ba0 <HAL_UART_Receive_IT+0x68>
  {
    if((pData == NULL ) || (Size == 0)) 
 8002b46:	2900      	cmp	r1, #0
 8002b48:	d02c      	beq.n	8002ba4 <HAL_UART_Receive_IT+0x6c>
 8002b4a:	2a00      	cmp	r2, #0
 8002b4c:	d02c      	beq.n	8002ba8 <HAL_UART_Receive_IT+0x70>
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8002b4e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d02a      	beq.n	8002bac <HAL_UART_Receive_IT+0x74>
 8002b56:	2301      	movs	r3, #1
 8002b58:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 8002b5c:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8002b5e:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002b60:	85c2      	strh	r2, [r0, #46]	; 0x2e
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b62:	2300      	movs	r3, #0
 8002b64:	63c3      	str	r3, [r0, #60]	; 0x3c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX) 
 8002b66:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b12      	cmp	r3, #18
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8002b6e:	bf0c      	ite	eq
 8002b70:	2332      	moveq	r3, #50	; 0x32
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8002b72:	2322      	movne	r3, #34	; 0x22
 8002b74:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    }
    
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b78:	6802      	ldr	r2, [r0, #0]
 8002b7a:	68d3      	ldr	r3, [r2, #12]
 8002b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b80:	60d3      	str	r3, [r2, #12]
    
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002b82:	6802      	ldr	r2, [r0, #0]
 8002b84:	6953      	ldr	r3, [r2, #20]
 8002b86:	f043 0301 	orr.w	r3, r3, #1
 8002b8a:	6153      	str	r3, [r2, #20]
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    
    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002b92:	6801      	ldr	r1, [r0, #0]
 8002b94:	68ca      	ldr	r2, [r1, #12]
 8002b96:	f042 0220 	orr.w	r2, r2, #32
 8002b9a:	60ca      	str	r2, [r1, #12]
    
    return HAL_OK;
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY; 
 8002ba0:	2002      	movs	r0, #2
 8002ba2:	4770      	bx	lr
  tmp = huart->State;  
  if((tmp == HAL_UART_STATE_READY) || (tmp == HAL_UART_STATE_BUSY_TX))
  {
    if((pData == NULL ) || (Size == 0)) 
    {
      return HAL_ERROR;
 8002ba4:	2001      	movs	r0, #1
 8002ba6:	4770      	bx	lr
 8002ba8:	2001      	movs	r0, #1
 8002baa:	4770      	bx	lr
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8002bac:	2002      	movs	r0, #2
  }
  else
  {
    return HAL_BUSY; 
  }
}
 8002bae:	4770      	bx	lr

08002bb0 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop

08002bb4 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop

08002bb8 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bb8:	b510      	push	{r4, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	4604      	mov	r4, r0
  uint32_t tmp1 = 0, tmp2 = 0;

  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8002bbe:	6803      	ldr	r3, [r0, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 8002bc2:	68d9      	ldr	r1, [r3, #12]
  /* UART parity error interrupt occurred ------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 8002bc4:	f012 0f01 	tst.w	r2, #1
 8002bc8:	d00b      	beq.n	8002be2 <HAL_UART_IRQHandler+0x2a>
 8002bca:	f411 7f80 	tst.w	r1, #256	; 0x100
 8002bce:	d008      	beq.n	8002be2 <HAL_UART_IRQHandler+0x2a>
  { 
    __HAL_UART_CLEAR_PEFLAG(huart);
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	9200      	str	r2, [sp, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	9200      	str	r2, [sp, #0]
 8002bd8:	9a00      	ldr	r2, [sp, #0]
    
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bda:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002bdc:	f042 0201 	orr.w	r2, r2, #1
 8002be0:	63c2      	str	r2, [r0, #60]	; 0x3c
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 8002be2:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8002be4:	6959      	ldr	r1, [r3, #20]
  /* UART frame error interrupt occurred -------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 8002be6:	f012 0f02 	tst.w	r2, #2
 8002bea:	d00b      	beq.n	8002c04 <HAL_UART_IRQHandler+0x4c>
 8002bec:	f011 0f01 	tst.w	r1, #1
 8002bf0:	d008      	beq.n	8002c04 <HAL_UART_IRQHandler+0x4c>
  { 
    __HAL_UART_CLEAR_FEFLAG(huart);
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	9201      	str	r2, [sp, #4]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	9201      	str	r2, [sp, #4]
 8002bfa:	9a01      	ldr	r2, [sp, #4]
    
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bfc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002bfe:	f042 0204 	orr.w	r2, r2, #4
 8002c02:	63e2      	str	r2, [r4, #60]	; 0x3c
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 8002c04:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8002c06:	6959      	ldr	r1, [r3, #20]
  /* UART noise error interrupt occurred -------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 8002c08:	f012 0f04 	tst.w	r2, #4
 8002c0c:	d00b      	beq.n	8002c26 <HAL_UART_IRQHandler+0x6e>
 8002c0e:	f011 0f01 	tst.w	r1, #1
 8002c12:	d008      	beq.n	8002c26 <HAL_UART_IRQHandler+0x6e>
  { 
    __HAL_UART_CLEAR_NEFLAG(huart);
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	9202      	str	r2, [sp, #8]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	9202      	str	r2, [sp, #8]
 8002c1c:	9a02      	ldr	r2, [sp, #8]
    
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c1e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002c20:	f042 0202 	orr.w	r2, r2, #2
 8002c24:	63e2      	str	r2, [r4, #60]	; 0x3c
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 8002c26:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8002c28:	6959      	ldr	r1, [r3, #20]
  /* UART Over-Run interrupt occurred ----------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 8002c2a:	f012 0f08 	tst.w	r2, #8
 8002c2e:	d00b      	beq.n	8002c48 <HAL_UART_IRQHandler+0x90>
 8002c30:	f011 0f01 	tst.w	r1, #1
 8002c34:	d008      	beq.n	8002c48 <HAL_UART_IRQHandler+0x90>
  { 
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	9203      	str	r2, [sp, #12]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	9203      	str	r2, [sp, #12]
 8002c3e:	9a03      	ldr	r2, [sp, #12]
    
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c40:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002c42:	f042 0208 	orr.w	r2, r2, #8
 8002c46:	63e2      	str	r2, [r4, #60]	; 0x3c
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 8002c48:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 8002c4a:	68d9      	ldr	r1, [r3, #12]
  /* UART in mode Receiver ---------------------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 8002c4c:	f012 0f20 	tst.w	r2, #32
 8002c50:	d050      	beq.n	8002cf4 <HAL_UART_IRQHandler+0x13c>
 8002c52:	f011 0f20 	tst.w	r1, #32
 8002c56:	d04d      	beq.n	8002cf4 <HAL_UART_IRQHandler+0x13c>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint32_t tmp1 = 0;
  
  tmp1 = huart->State; 
 8002c58:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp1 == HAL_UART_STATE_BUSY_RX) || (tmp1 == HAL_UART_STATE_BUSY_TX_RX))
 8002c5c:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 8002c60:	2a22      	cmp	r2, #34	; 0x22
 8002c62:	d147      	bne.n	8002cf4 <HAL_UART_IRQHandler+0x13c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c64:	68a2      	ldr	r2, [r4, #8]
 8002c66:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002c6a:	d111      	bne.n	8002c90 <HAL_UART_IRQHandler+0xd8>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8002c6c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002c6e:	6921      	ldr	r1, [r4, #16]
 8002c70:	b939      	cbnz	r1, 8002c82 <HAL_UART_IRQHandler+0xca>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c78:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2;
 8002c7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c7c:	3302      	adds	r3, #2
 8002c7e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c80:	e015      	b.n	8002cae <HAL_UART_IRQHandler+0xf6>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1;
 8002c88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c8e:	e00e      	b.n	8002cae <HAL_UART_IRQHandler+0xf6>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002c90:	6922      	ldr	r2, [r4, #16]
 8002c92:	b92a      	cbnz	r2, 8002ca0 <HAL_UART_IRQHandler+0xe8>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c94:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002c96:	1c51      	adds	r1, r2, #1
 8002c98:	62a1      	str	r1, [r4, #40]	; 0x28
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	7013      	strb	r3, [r2, #0]
 8002c9e:	e006      	b.n	8002cae <HAL_UART_IRQHandler+0xf6>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ca0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002ca2:	1c51      	adds	r1, r2, #1
 8002ca4:	62a1      	str	r1, [r4, #40]	; 0x28
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cac:	7013      	strb	r3, [r2, #0]
      }
    }

    if(--huart->RxXferCount == 0)
 8002cae:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8002cb6:	b9eb      	cbnz	r3, 8002cf4 <HAL_UART_IRQHandler+0x13c>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002cb8:	6822      	ldr	r2, [r4, #0]
 8002cba:	68d3      	ldr	r3, [r2, #12]
 8002cbc:	f023 0320 	bic.w	r3, r3, #32
 8002cc0:	60d3      	str	r3, [r2, #12]

      /* Check if a transmit process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002cc2:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b32      	cmp	r3, #50	; 0x32
 8002cca:	d103      	bne.n	8002cd4 <HAL_UART_IRQHandler+0x11c>
      {
        huart->State = HAL_UART_STATE_BUSY_TX;
 8002ccc:	2312      	movs	r3, #18
 8002cce:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8002cd2:	e00c      	b.n	8002cee <HAL_UART_IRQHandler+0x136>
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002cd4:	6822      	ldr	r2, [r4, #0]
 8002cd6:	68d3      	ldr	r3, [r2, #12]
 8002cd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cdc:	60d3      	str	r3, [r2, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002cde:	6822      	ldr	r2, [r4, #0]
 8002ce0:	6953      	ldr	r3, [r2, #20]
 8002ce2:	f023 0301 	bic.w	r3, r3, #1
 8002ce6:	6153      	str	r3, [r2, #20]

        huart->State = HAL_UART_STATE_READY;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      }
      HAL_UART_RxCpltCallback(huart);
 8002cee:	4620      	mov	r0, r4
 8002cf0:	f7fe faee 	bl	80012d0 <HAL_UART_RxCpltCallback>
  if((tmp1 != RESET) && (tmp2 != RESET))
  { 
    UART_Receive_IT(huart);
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 8002cf4:	6823      	ldr	r3, [r4, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 8002cf8:	68d9      	ldr	r1, [r3, #12]
  /* UART in mode Transmitter ------------------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 8002cfa:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002cfe:	d02f      	beq.n	8002d60 <HAL_UART_IRQHandler+0x1a8>
 8002d00:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002d04:	d02c      	beq.n	8002d60 <HAL_UART_IRQHandler+0x1a8>
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint32_t tmp1 = 0;
  
  tmp1 = huart->State;
 8002d06:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp1 == HAL_UART_STATE_BUSY_TX) || (tmp1 == HAL_UART_STATE_BUSY_TX_RX))
 8002d0a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8002d0e:	2a12      	cmp	r2, #18
 8002d10:	d126      	bne.n	8002d60 <HAL_UART_IRQHandler+0x1a8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d12:	68a2      	ldr	r2, [r4, #8]
 8002d14:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002d18:	d10e      	bne.n	8002d38 <HAL_UART_IRQHandler+0x180>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d1a:	6a22      	ldr	r2, [r4, #32]
 8002d1c:	8812      	ldrh	r2, [r2, #0]
 8002d1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d22:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002d24:	6923      	ldr	r3, [r4, #16]
 8002d26:	b91b      	cbnz	r3, 8002d30 <HAL_UART_IRQHandler+0x178>
      {
        huart->pTxBuffPtr += 2;
 8002d28:	6a23      	ldr	r3, [r4, #32]
 8002d2a:	3302      	adds	r3, #2
 8002d2c:	6223      	str	r3, [r4, #32]
 8002d2e:	e008      	b.n	8002d42 <HAL_UART_IRQHandler+0x18a>
      }
      else
      {
        huart->pTxBuffPtr += 1;
 8002d30:	6a23      	ldr	r3, [r4, #32]
 8002d32:	3301      	adds	r3, #1
 8002d34:	6223      	str	r3, [r4, #32]
 8002d36:	e004      	b.n	8002d42 <HAL_UART_IRQHandler+0x18a>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d38:	6a22      	ldr	r2, [r4, #32]
 8002d3a:	1c51      	adds	r1, r2, #1
 8002d3c:	6221      	str	r1, [r4, #32]
 8002d3e:	7812      	ldrb	r2, [r2, #0]
 8002d40:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0)
 8002d42:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	84e3      	strh	r3, [r4, #38]	; 0x26
 8002d4a:	b94b      	cbnz	r3, 8002d60 <HAL_UART_IRQHandler+0x1a8>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d4c:	6822      	ldr	r2, [r4, #0]
 8002d4e:	68d3      	ldr	r3, [r2, #12]
 8002d50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d54:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d56:	6822      	ldr	r2, [r4, #0]
 8002d58:	68d3      	ldr	r3, [r2, #12]
 8002d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d5e:	60d3      	str	r3, [r2, #12]
  if((tmp1 != RESET) && (tmp2 != RESET))
  {
    UART_Transmit_IT(huart);
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 8002d60:	6823      	ldr	r3, [r4, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 8002d64:	68d9      	ldr	r1, [r3, #12]
  /* UART in mode Transmitter end --------------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 8002d66:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002d6a:	d01f      	beq.n	8002dac <HAL_UART_IRQHandler+0x1f4>
 8002d6c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002d70:	d01c      	beq.n	8002dac <HAL_UART_IRQHandler+0x1f4>
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d72:	68da      	ldr	r2, [r3, #12]
 8002d74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d78:	60da      	str	r2, [r3, #12]
  
  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002d7a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b32      	cmp	r3, #50	; 0x32
 8002d82:	d103      	bne.n	8002d8c <HAL_UART_IRQHandler+0x1d4>
  {
    huart->State = HAL_UART_STATE_BUSY_RX;
 8002d84:	2322      	movs	r3, #34	; 0x22
 8002d86:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8002d8a:	e00c      	b.n	8002da6 <HAL_UART_IRQHandler+0x1ee>
  }
  else
  {
    /* Disable the UART Parity Error Interrupt */
    __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d8c:	6822      	ldr	r2, [r4, #0]
 8002d8e:	68d3      	ldr	r3, [r2, #12]
 8002d90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d94:	60d3      	str	r3, [r2, #12]

    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d96:	6822      	ldr	r2, [r4, #0]
 8002d98:	6953      	ldr	r3, [r2, #20]
 8002d9a:	f023 0301 	bic.w	r3, r3, #1
 8002d9e:	6153      	str	r3, [r2, #20]

    huart->State = HAL_UART_STATE_READY;
 8002da0:	2301      	movs	r3, #1
 8002da2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  }
  
  HAL_UART_TxCpltCallback(huart);
 8002da6:	4620      	mov	r0, r4
 8002da8:	f7ff ff02 	bl	8002bb0 <HAL_UART_TxCpltCallback>
  if((tmp1 != RESET) && (tmp2 != RESET))
  {
    UART_EndTransmit_IT(huart);
  }

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002dae:	b12b      	cbz	r3, 8002dbc <HAL_UART_IRQHandler+0x204>
  {
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
 8002db0:	2301      	movs	r3, #1
 8002db2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
    HAL_UART_ErrorCallback(huart);
 8002db6:	4620      	mov	r0, r4
 8002db8:	f7ff fefc 	bl	8002bb4 <HAL_UART_ErrorCallback>
  }  
}
 8002dbc:	b004      	add	sp, #16
 8002dbe:	bd10      	pop	{r4, pc}

08002dc0 <CPU_SW_Exception>:
*                   See also 'cpu_core.h  CPU_SW_EXCEPTION()  Note #1'.
*********************************************************************************************************
*/

void  CPU_SW_Exception (void)
{
 8002dc0:	e7fe      	b.n	8002dc0 <CPU_SW_Exception>
 8002dc2:	bf00      	nop

08002dc4 <CPU_TS_TmrFreqSet>:
*/

#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
void  CPU_TS_TmrFreqSet (CPU_TS_TMR_FREQ  freq_hz)
{
    CPU_TS_TmrFreq_Hz = freq_hz;
 8002dc4:	4b01      	ldr	r3, [pc, #4]	; (8002dcc <CPU_TS_TmrFreqSet+0x8>)
 8002dc6:	6018      	str	r0, [r3, #0]
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	20001b30 	.word	0x20001b30

08002dd0 <CPU_IntDisMeasMaxCurGet>:
*********************************************************************************************************
*/

#ifdef  CPU_CFG_INT_DIS_MEAS_EN
CPU_TS_TMR  CPU_IntDisMeasMaxCurGet (void)
{
 8002dd0:	b510      	push	{r4, lr}
    CPU_TS_TMR  time_tot_cnts;
    CPU_TS_TMR  time_max_cnts;
    CPU_SR_ALLOC();


    CPU_INT_DIS();
 8002dd2:	f7fd fa01 	bl	80001d8 <CPU_SR_Save>
    time_tot_cnts = CPU_IntDisMeasMaxCur_cnts;
 8002dd6:	4b05      	ldr	r3, [pc, #20]	; (8002dec <CPU_IntDisMeasMaxCurGet+0x1c>)
 8002dd8:	681c      	ldr	r4, [r3, #0]
    CPU_INT_EN();
 8002dda:	f7fd fa01 	bl	80001e0 <CPU_SR_Restore>
{
    CPU_TS_TMR  time_max_cnts;


    time_max_cnts = time_tot_cnts;
    if (time_max_cnts >  CPU_IntDisMeasOvrhd_cnts) {            /* If       max ints dis'd time >  ovrhd time, ...      */
 8002dde:	4b04      	ldr	r3, [pc, #16]	; (8002df0 <CPU_IntDisMeasMaxCurGet+0x20>)
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	4284      	cmp	r4, r0
        time_max_cnts -= CPU_IntDisMeasOvrhd_cnts;              /* ... adj  max ints dis'd time by ovrhd time; ...      */
 8002de4:	bf8c      	ite	hi
 8002de6:	1a20      	subhi	r0, r4, r0
    } else {                                                    /* ... else max ints dis'd time <  ovrhd time, ...      */
        time_max_cnts  = 0u;                                    /* ... clr  max ints dis'd time (see Note #2).          */
 8002de8:	2000      	movls	r0, #0
    time_tot_cnts = CPU_IntDisMeasMaxCur_cnts;
    CPU_INT_EN();
    time_max_cnts = CPU_IntDisMeasMaxCalc(time_tot_cnts);

    return (time_max_cnts);
}
 8002dea:	bd10      	pop	{r4, pc}
 8002dec:	20001b40 	.word	0x20001b40
 8002df0:	20001b48 	.word	0x20001b48

08002df4 <CPU_IntDisMeasMaxCurReset>:
*********************************************************************************************************
*/

#ifdef  CPU_CFG_INT_DIS_MEAS_EN
CPU_TS_TMR  CPU_IntDisMeasMaxCurReset (void)
{
 8002df4:	b510      	push	{r4, lr}
    CPU_TS_TMR  time_max_cnts;
    CPU_SR_ALLOC();


    time_max_cnts             = CPU_IntDisMeasMaxCurGet();
 8002df6:	f7ff ffeb 	bl	8002dd0 <CPU_IntDisMeasMaxCurGet>
 8002dfa:	4604      	mov	r4, r0
    CPU_INT_DIS();
 8002dfc:	f7fd f9ec 	bl	80001d8 <CPU_SR_Save>
    CPU_IntDisMeasMaxCur_cnts = 0u;
 8002e00:	2200      	movs	r2, #0
 8002e02:	4b03      	ldr	r3, [pc, #12]	; (8002e10 <CPU_IntDisMeasMaxCurReset+0x1c>)
 8002e04:	601a      	str	r2, [r3, #0]
    CPU_INT_EN();
 8002e06:	f7fd f9eb 	bl	80001e0 <CPU_SR_Restore>

    return (time_max_cnts);
}
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	bd10      	pop	{r4, pc}
 8002e0e:	bf00      	nop
 8002e10:	20001b40 	.word	0x20001b40

08002e14 <CPU_IntDisMeasStart>:
*********************************************************************************************************
*/

#ifdef  CPU_CFG_INT_DIS_MEAS_EN
void  CPU_IntDisMeasStart (void)
{
 8002e14:	b508      	push	{r3, lr}
    CPU_IntDisMeasCtr++;
 8002e16:	4a08      	ldr	r2, [pc, #32]	; (8002e38 <CPU_IntDisMeasStart+0x24>)
 8002e18:	8813      	ldrh	r3, [r2, #0]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	8013      	strh	r3, [r2, #0]
    if (CPU_IntDisNestCtr == 0u) {                                  /* If ints NOT yet dis'd, ...                       */
 8002e1e:	4b07      	ldr	r3, [pc, #28]	; (8002e3c <CPU_IntDisMeasStart+0x28>)
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	b91b      	cbnz	r3, 8002e2c <CPU_IntDisMeasStart+0x18>
        CPU_IntDisMeasStart_cnts = CPU_TS_TmrRd();                  /* ... get ints dis'd start time.                   */
 8002e24:	f7fe ff0a 	bl	8001c3c <CPU_TS_TmrRd>
 8002e28:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <CPU_IntDisMeasStart+0x2c>)
 8002e2a:	6018      	str	r0, [r3, #0]
    }
    CPU_IntDisNestCtr++;
 8002e2c:	4a03      	ldr	r2, [pc, #12]	; (8002e3c <CPU_IntDisMeasStart+0x28>)
 8002e2e:	8813      	ldrh	r3, [r2, #0]
 8002e30:	3301      	adds	r3, #1
 8002e32:	8013      	strh	r3, [r2, #0]
 8002e34:	bd08      	pop	{r3, pc}
 8002e36:	bf00      	nop
 8002e38:	20001b44 	.word	0x20001b44
 8002e3c:	20001b38 	.word	0x20001b38
 8002e40:	20001b34 	.word	0x20001b34

08002e44 <CPU_IntDisMeasStop>:
*********************************************************************************************************
*/

#ifdef  CPU_CFG_INT_DIS_MEAS_EN
void  CPU_IntDisMeasStop (void)
{
 8002e44:	b508      	push	{r3, lr}
    CPU_TS_TMR  time_ints_disd_cnts;


    CPU_IntDisNestCtr--;
 8002e46:	4a0d      	ldr	r2, [pc, #52]	; (8002e7c <CPU_IntDisMeasStop+0x38>)
 8002e48:	8813      	ldrh	r3, [r2, #0]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	8013      	strh	r3, [r2, #0]
    if (CPU_IntDisNestCtr == 0u) {                                  /* If ints NO longer dis'd,        ...              */
 8002e50:	b993      	cbnz	r3, 8002e78 <CPU_IntDisMeasStop+0x34>
        CPU_IntDisMeasStop_cnts = CPU_TS_TmrRd();                   /* ... get  ints dis'd stop time & ...              */
 8002e52:	f7fe fef3 	bl	8001c3c <CPU_TS_TmrRd>
 8002e56:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <CPU_IntDisMeasStop+0x3c>)
 8002e58:	6018      	str	r0, [r3, #0]
                                                                    /* ... calc ints dis'd tot  time (see Note #1b2A).  */
        time_ints_disd_cnts     = CPU_IntDisMeasStop_cnts -
 8002e5a:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <CPU_IntDisMeasStop+0x40>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	1ac0      	subs	r0, r0, r3
                                  CPU_IntDisMeasStart_cnts;
                                                                    /* Calc max ints dis'd times.                       */
        if (CPU_IntDisMeasMaxCur_cnts < time_ints_disd_cnts) {
 8002e60:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <CPU_IntDisMeasStop+0x44>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4298      	cmp	r0, r3
            CPU_IntDisMeasMaxCur_cnts = time_ints_disd_cnts;
 8002e66:	bf84      	itt	hi
 8002e68:	4b07      	ldrhi	r3, [pc, #28]	; (8002e88 <CPU_IntDisMeasStop+0x44>)
 8002e6a:	6018      	strhi	r0, [r3, #0]
        }
        if (CPU_IntDisMeasMax_cnts    < time_ints_disd_cnts) {
 8002e6c:	4b07      	ldr	r3, [pc, #28]	; (8002e8c <CPU_IntDisMeasStop+0x48>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4298      	cmp	r0, r3
            CPU_IntDisMeasMax_cnts    = time_ints_disd_cnts;
 8002e72:	bf84      	itt	hi
 8002e74:	4b05      	ldrhi	r3, [pc, #20]	; (8002e8c <CPU_IntDisMeasStop+0x48>)
 8002e76:	6018      	strhi	r0, [r3, #0]
 8002e78:	bd08      	pop	{r3, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20001b38 	.word	0x20001b38
 8002e80:	20001b3c 	.word	0x20001b3c
 8002e84:	20001b34 	.word	0x20001b34
 8002e88:	20001b40 	.word	0x20001b40
 8002e8c:	20001b2c 	.word	0x20001b2c

08002e90 <CPU_NameClr>:
*********************************************************************************************************
*/

#if (CPU_CFG_NAME_EN == DEF_ENABLED)
void  CPU_NameClr (void)
{
 8002e90:	b510      	push	{r4, lr}
    CPU_SR_ALLOC();


    CPU_CRITICAL_ENTER();
 8002e92:	f7fd f9a1 	bl	80001d8 <CPU_SR_Save>
 8002e96:	4604      	mov	r4, r0
 8002e98:	f7ff ffbc 	bl	8002e14 <CPU_IntDisMeasStart>
    Mem_Clr((void     *)&CPU_Name[0],
 8002e9c:	2110      	movs	r1, #16
 8002e9e:	4804      	ldr	r0, [pc, #16]	; (8002eb0 <CPU_NameClr+0x20>)
 8002ea0:	f000 f870 	bl	8002f84 <Mem_Clr>
            (CPU_SIZE_T) CPU_CFG_NAME_SIZE);
    CPU_CRITICAL_EXIT();
 8002ea4:	f7ff ffce 	bl	8002e44 <CPU_IntDisMeasStop>
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	f7fd f999 	bl	80001e0 <CPU_SR_Restore>
 8002eae:	bd10      	pop	{r4, pc}
 8002eb0:	20001b4c 	.word	0x20001b4c

08002eb4 <CPU_Init>:
*                                                   & other CPU interrupts disabled time measurement functions
*********************************************************************************************************
*/

void  CPU_Init (void)
{
 8002eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif


                                                                /* ----------------- INIT CPU TS TMR ------------------ */
#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
    CPU_TS_TmrFreq_Hz   = 0u;                                   /* Init/clr     ts tmr freq (see Note #1a).             */
 8002eb8:	2400      	movs	r4, #0
 8002eba:	4b12      	ldr	r3, [pc, #72]	; (8002f04 <CPU_Init+0x50>)
 8002ebc:	601c      	str	r4, [r3, #0]
    CPU_TS_TmrInit();                                           /* Init & start ts tmr      (see Note #1b).             */
 8002ebe:	f7fe fea3 	bl	8001c08 <CPU_TS_TmrInit>
    CPU_TS_TMR  time_meas_tot_cnts;
    CPU_INT16U  i;
    CPU_SR_ALLOC();

                                                                /* ----------- INIT INT DIS TIME MEAS CTRLS ----------- */
    CPU_IntDisMeasCtr         = 0u;
 8002ec2:	4b11      	ldr	r3, [pc, #68]	; (8002f08 <CPU_Init+0x54>)
 8002ec4:	801c      	strh	r4, [r3, #0]
    CPU_IntDisNestCtr         = 0u;
 8002ec6:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <CPU_Init+0x58>)
 8002ec8:	801c      	strh	r4, [r3, #0]
    CPU_IntDisMeasStart_cnts  = 0u;
 8002eca:	4b11      	ldr	r3, [pc, #68]	; (8002f10 <CPU_Init+0x5c>)
 8002ecc:	601c      	str	r4, [r3, #0]
    CPU_IntDisMeasStop_cnts   = 0u;
 8002ece:	4b11      	ldr	r3, [pc, #68]	; (8002f14 <CPU_Init+0x60>)
 8002ed0:	601c      	str	r4, [r3, #0]
    CPU_IntDisMeasMaxCur_cnts = 0u;
 8002ed2:	4d11      	ldr	r5, [pc, #68]	; (8002f18 <CPU_Init+0x64>)
 8002ed4:	602c      	str	r4, [r5, #0]
    CPU_IntDisMeasMax_cnts    = 0u;
 8002ed6:	4e11      	ldr	r6, [pc, #68]	; (8002f1c <CPU_Init+0x68>)
 8002ed8:	6034      	str	r4, [r6, #0]
    CPU_IntDisMeasOvrhd_cnts  = 0u;
 8002eda:	4f11      	ldr	r7, [pc, #68]	; (8002f20 <CPU_Init+0x6c>)
 8002edc:	603c      	str	r4, [r7, #0]

                                                                /* ----------- CALC INT DIS TIME MEAS OVRHD ----------- */
    time_meas_tot_cnts = 0u;
    CPU_INT_DIS();                                              /* Ints MUST be dis'd for ovrhd calc (see Note #3b).    */
 8002ede:	f7fd f97b 	bl	80001d8 <CPU_SR_Save>
 8002ee2:	4680      	mov	r8, r0
    for (i = 0u; i < CPU_CFG_INT_DIS_MEAS_OVRHD_NBR; i++) {
        CPU_IntDisMeasMaxCur_cnts = 0u;
 8002ee4:	602c      	str	r4, [r5, #0]
        CPU_IntDisMeasStart();                                  /* Perform multiple consecutive start/stop time meas's  */
 8002ee6:	f7ff ff95 	bl	8002e14 <CPU_IntDisMeasStart>
        CPU_IntDisMeasStop();
 8002eea:	f7ff ffab 	bl	8002e44 <CPU_IntDisMeasStop>
        time_meas_tot_cnts += CPU_IntDisMeasMaxCur_cnts;        /* ...       & sum time meas max's                  ... */
    }
                                                                /* ... to calc avg time meas ovrhd (see Note #3a).      */
    CPU_IntDisMeasOvrhd_cnts  = (time_meas_tot_cnts + (CPU_CFG_INT_DIS_MEAS_OVRHD_NBR / 2u))
 8002eee:	682b      	ldr	r3, [r5, #0]
 8002ef0:	603b      	str	r3, [r7, #0]
                                                    /  CPU_CFG_INT_DIS_MEAS_OVRHD_NBR;
    CPU_IntDisMeasMaxCur_cnts =  0u;                            /* Reset max ints dis'd times.                          */
 8002ef2:	602c      	str	r4, [r5, #0]
    CPU_IntDisMeasMax_cnts    =  0u;
 8002ef4:	6034      	str	r4, [r6, #0]
    CPU_INT_EN();
 8002ef6:	4640      	mov	r0, r8
 8002ef8:	f7fd f972 	bl	80001e0 <CPU_SR_Restore>
*/

#if (CPU_CFG_NAME_EN == DEF_ENABLED)
static  void  CPU_NameInit (void)
{
    CPU_NameClr();
 8002efc:	f7ff ffc8 	bl	8002e90 <CPU_NameClr>
 8002f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f04:	20001b30 	.word	0x20001b30
 8002f08:	20001b44 	.word	0x20001b44
 8002f0c:	20001b38 	.word	0x20001b38
 8002f10:	20001b34 	.word	0x20001b34
 8002f14:	20001b3c 	.word	0x20001b3c
 8002f18:	20001b40 	.word	0x20001b40
 8002f1c:	20001b2c 	.word	0x20001b2c
 8002f20:	20001b48 	.word	0x20001b48

08002f24 <Mem_Set>:
*/

void  Mem_Set (void        *pmem,
               CPU_INT08U   data_val,
               CPU_SIZE_T   size)
{
 8002f24:	b430      	push	{r4, r5}


    data_align = 0u;
    for (i = 0u; i < sizeof(CPU_ALIGN); i++) {                  /* Fill each data_align octet with data val.            */
        data_align <<=  DEF_OCTET_NBR_BITS;
        data_align  |= (CPU_ALIGN)data_val;
 8002f26:	ea41 2501 	orr.w	r5, r1, r1, lsl #8
 8002f2a:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
 8002f2e:	ea41 2505 	orr.w	r5, r1, r5, lsl #8

    size_rem      =  size;
    mem_align_mod = (CPU_INT08U)((CPU_ADDR)pmem % sizeof(CPU_ALIGN));   /* See Note #3.                                 */

    pmem_08 = (CPU_INT08U *)pmem;
    if (mem_align_mod != 0u) {                                  /* If leading octets avail,                   ...       */
 8002f32:	f010 0303 	ands.w	r3, r0, #3
 8002f36:	d00d      	beq.n	8002f54 <Mem_Set+0x30>
        i = mem_align_mod;
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 8002f38:	b312      	cbz	r2, 8002f80 <Mem_Set+0x5c>
 8002f3a:	f1c3 0304 	rsb	r3, r3, #4
 8002f3e:	4403      	add	r3, r0
               (i        < sizeof(CPU_ALIGN ))) {               /* ... until next CPU_ALIGN word boundary.              */
           *pmem_08++ = data_val;
 8002f40:	f800 1b01 	strb.w	r1, [r0], #1
    mem_align_mod = (CPU_INT08U)((CPU_ADDR)pmem % sizeof(CPU_ALIGN));   /* See Note #3.                                 */

    pmem_08 = (CPU_INT08U *)pmem;
    if (mem_align_mod != 0u) {                                  /* If leading octets avail,                   ...       */
        i = mem_align_mod;
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 8002f44:	3a01      	subs	r2, #1
 8002f46:	d01b      	beq.n	8002f80 <Mem_Set+0x5c>
 8002f48:	4298      	cmp	r0, r3
 8002f4a:	d1f9      	bne.n	8002f40 <Mem_Set+0x1c>
               (i        < sizeof(CPU_ALIGN ))) {               /* ... until next CPU_ALIGN word boundary.              */
           *pmem_08++ = data_val;
 8002f4c:	4618      	mov	r0, r3
            i++;
        }
    }

    pmem_align = (CPU_ALIGN *)pmem_08;                          /* See Note #2.                                         */
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
 8002f4e:	2a03      	cmp	r2, #3
 8002f50:	d802      	bhi.n	8002f58 <Mem_Set+0x34>
 8002f52:	e010      	b.n	8002f76 <Mem_Set+0x52>
 8002f54:	2a03      	cmp	r2, #3
 8002f56:	d90d      	bls.n	8002f74 <Mem_Set+0x50>
*/

void  Mem_Set (void        *pmem,
               CPU_INT08U   data_val,
               CPU_SIZE_T   size)
{
 8002f58:	4604      	mov	r4, r0
 8002f5a:	4613      	mov	r3, r2
        }
    }

    pmem_align = (CPU_ALIGN *)pmem_08;                          /* See Note #2.                                         */
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
       *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
 8002f5c:	f844 5b04 	str.w	r5, [r4], #4
        size_rem    -= sizeof(CPU_ALIGN);
 8002f60:	3b04      	subs	r3, #4
            i++;
        }
    }

    pmem_align = (CPU_ALIGN *)pmem_08;                          /* See Note #2.                                         */
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	d8fa      	bhi.n	8002f5c <Mem_Set+0x38>
 8002f66:	1f13      	subs	r3, r2, #4
 8002f68:	f023 0303 	bic.w	r3, r3, #3
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	4418      	add	r0, r3
 8002f70:	f002 0203 	and.w	r2, r2, #3
       *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
        size_rem    -= sizeof(CPU_ALIGN);
    }

    pmem_08 = (CPU_INT08U *)pmem_align;
    while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
 8002f74:	b122      	cbz	r2, 8002f80 <Mem_Set+0x5c>
 8002f76:	4402      	add	r2, r0
       *pmem_08++   = data_val;
 8002f78:	f800 1b01 	strb.w	r1, [r0], #1
       *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
        size_rem    -= sizeof(CPU_ALIGN);
    }

    pmem_08 = (CPU_INT08U *)pmem_align;
    while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
 8002f7c:	4290      	cmp	r0, r2
 8002f7e:	d1fb      	bne.n	8002f78 <Mem_Set+0x54>
       *pmem_08++   = data_val;
        size_rem   -= sizeof(CPU_INT08U);
    }
}
 8002f80:	bc30      	pop	{r4, r5}
 8002f82:	4770      	bx	lr

08002f84 <Mem_Clr>:
*********************************************************************************************************
*/

void  Mem_Clr (void        *pmem,
               CPU_SIZE_T   size)
{
 8002f84:	b508      	push	{r3, lr}
    Mem_Set(pmem,
 8002f86:	460a      	mov	r2, r1
 8002f88:	2100      	movs	r1, #0
 8002f8a:	f7ff ffcb 	bl	8002f24 <Mem_Set>
 8002f8e:	bd08      	pop	{r3, pc}

08002f90 <Mem_SegCreate>:
                            MEM_SEG     *p_seg,
                            CPU_ADDR     seg_base_addr,
                            CPU_SIZE_T   size,
                            CPU_SIZE_T   padding_align,
                            LIB_ERR     *p_err)
{
 8002f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f92:	460c      	mov	r4, r1
 8002f94:	4616      	mov	r6, r2
 8002f96:	461d      	mov	r5, r3
       *p_err = LIB_MEM_ERR_INVALID_MEM_ALIGN;
        return;
    }
#endif

    CPU_CRITICAL_ENTER();
 8002f98:	f7fd f91e 	bl	80001d8 <CPU_SR_Save>
 8002f9c:	4607      	mov	r7, r0
 8002f9e:	f7ff ff39 	bl	8002e14 <CPU_IntDisMeasStart>
                                           MEM_SEG     *p_seg,
                                           CPU_ADDR     seg_base_addr,
                                           CPU_SIZE_T   padding_align,
                                           CPU_SIZE_T   size)
{
    p_seg->AddrBase         =  seg_base_addr;
 8002fa2:	6026      	str	r6, [r4, #0]
    p_seg->AddrEnd          = (seg_base_addr + (size - 1u));
 8002fa4:	3d01      	subs	r5, #1
 8002fa6:	4435      	add	r5, r6
 8002fa8:	6065      	str	r5, [r4, #4]
    p_seg->AddrNext         =  seg_base_addr;
 8002faa:	60a6      	str	r6, [r4, #8]
    p_seg->NextPtr          =  Mem_SegHeadPtr;
 8002fac:	4b07      	ldr	r3, [pc, #28]	; (8002fcc <Mem_SegCreate+0x3c>)
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	60e2      	str	r2, [r4, #12]
    p_seg->PaddingAlign     =  padding_align;
 8002fb2:	9a06      	ldr	r2, [sp, #24]
 8002fb4:	6122      	str	r2, [r4, #16]
    p_seg->AllocInfoHeadPtr = DEF_NULL;
#else
    (void)&p_name;
#endif

    Mem_SegHeadPtr = p_seg;
 8002fb6:	601c      	str	r4, [r3, #0]
    Mem_SegCreateCritical(p_name,                               /* Create seg.                                          */
                          p_seg,
                          seg_base_addr,
                          padding_align,
                          size);
    CPU_CRITICAL_EXIT();
 8002fb8:	f7ff ff44 	bl	8002e44 <CPU_IntDisMeasStop>
 8002fbc:	4638      	mov	r0, r7
 8002fbe:	f7fd f90f 	bl	80001e0 <CPU_SR_Restore>

   *p_err = LIB_MEM_ERR_NONE;
 8002fc2:	f242 7210 	movw	r2, #10000	; 0x2710
 8002fc6:	9b07      	ldr	r3, [sp, #28]
 8002fc8:	801a      	strh	r2, [r3, #0]
 8002fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fcc:	20001b70 	.word	0x20001b70

08002fd0 <Mem_Init>:
*                   (b) BEFORE product's application calls any memory library module function(s)
*********************************************************************************************************
*/

void  Mem_Init (void)
{
 8002fd0:	b500      	push	{lr}
 8002fd2:	b085      	sub	sp, #20

                                                                /* ------------------ INIT SEG LIST ------------------- */
    Mem_SegHeadPtr = DEF_NULL;
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	4b0c      	ldr	r3, [pc, #48]	; (8003008 <Mem_Init+0x38>)
 8002fd8:	601a      	str	r2, [r3, #0]
        heap_base_addr = LIB_MEM_CFG_HEAP_BASE_ADDR;
#else
        heap_base_addr = (CPU_ADDR)&Mem_Heap[0u];
#endif

        Mem_SegCreate("Heap",
 8002fda:	f10d 030e 	add.w	r3, sp, #14
 8002fde:	9301      	str	r3, [sp, #4]
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fe8:	4a08      	ldr	r2, [pc, #32]	; (800300c <Mem_Init+0x3c>)
 8002fea:	4909      	ldr	r1, [pc, #36]	; (8003010 <Mem_Init+0x40>)
 8002fec:	4809      	ldr	r0, [pc, #36]	; (8003014 <Mem_Init+0x44>)
 8002fee:	f7ff ffcf 	bl	8002f90 <Mem_SegCreate>
                      &Mem_SegHeap,                             /* Create heap seg.                                     */
                       heap_base_addr,
                       LIB_MEM_CFG_HEAP_SIZE,
                       LIB_MEM_PADDING_ALIGN_NONE,
                      &err);
        if (err != LIB_MEM_ERR_NONE) {
 8002ff2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8002ff6:	f242 7310 	movw	r3, #10000	; 0x2710
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d001      	beq.n	8003002 <Mem_Init+0x32>
            CPU_SW_EXCEPTION(;);
 8002ffe:	f7ff fedf 	bl	8002dc0 <CPU_SW_Exception>
        }
    }
#endif
}
 8003002:	b005      	add	sp, #20
 8003004:	f85d fb04 	ldr.w	pc, [sp], #4
 8003008:	20001b70 	.word	0x20001b70
 800300c:	20001b74 	.word	0x20001b74
 8003010:	20001b5c 	.word	0x20001b5c
 8003014:	08007488 	.word	0x08007488

08003018 <OSInitHookBegin>:
{
    INT32U   size;
    OS_STK  *pstk;

                                                                /* Clear exception stack for stack checking.            */
    pstk = &OS_CPU_ExceptStk[0];
 8003018:	4b08      	ldr	r3, [pc, #32]	; (800303c <OSInitHookBegin+0x24>)
    size = OS_CPU_EXCEPT_STK_SIZE;
    while (size > 0u) {
        size--;
       *pstk++ = (OS_STK)0;
 800301a:	2100      	movs	r1, #0
    OS_STK  *pstk;

                                                                /* Clear exception stack for stack checking.            */
    pstk = &OS_CPU_ExceptStk[0];
    size = OS_CPU_EXCEPT_STK_SIZE;
    while (size > 0u) {
 800301c:	f503 7200 	add.w	r2, r3, #512	; 0x200
        size--;
       *pstk++ = (OS_STK)0;
 8003020:	f843 1b04 	str.w	r1, [r3], #4
    OS_STK  *pstk;

                                                                /* Clear exception stack for stack checking.            */
    pstk = &OS_CPU_ExceptStk[0];
    size = OS_CPU_EXCEPT_STK_SIZE;
    while (size > 0u) {
 8003024:	4293      	cmp	r3, r2
 8003026:	d1fb      	bne.n	8003020 <OSInitHookBegin+0x8>
       *pstk++ = (OS_STK)0;
    }

                                                                /* Align the ISR stack to 8-bytes                       */
    OS_CPU_ExceptStkBase = (OS_STK *)&OS_CPU_ExceptStk[OS_CPU_EXCEPT_STK_SIZE];
    OS_CPU_ExceptStkBase = (OS_STK *)((OS_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);
 8003028:	4b05      	ldr	r3, [pc, #20]	; (8003040 <OSInitHookBegin+0x28>)
 800302a:	f023 0307 	bic.w	r3, r3, #7
 800302e:	4a05      	ldr	r2, [pc, #20]	; (8003044 <OSInitHookBegin+0x2c>)
 8003030:	6013      	str	r3, [r2, #0]

#if OS_TMR_EN > 0u
    OSTmrCtr = 0u;
 8003032:	2200      	movs	r2, #0
 8003034:	4b04      	ldr	r3, [pc, #16]	; (8003048 <OSInitHookBegin+0x30>)
 8003036:	801a      	strh	r2, [r3, #0]
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	20001f78 	.word	0x20001f78
 8003040:	20002178 	.word	0x20002178
 8003044:	20001f74 	.word	0x20001f74
 8003048:	20001ab0 	.word	0x20001ab0

0800304c <OSInitHookEnd>:
* Note(s)    : 1) Interrupts should be disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookEnd (void)
{
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop

08003050 <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskCreateHook (OS_TCB *ptcb)
{
 8003050:	b508      	push	{r3, lr}
#if OS_APP_HOOKS_EN > 0u
    App_TaskCreateHook(ptcb);
 8003052:	f7fe f957 	bl	8001304 <App_TaskCreateHook>
 8003056:	bd08      	pop	{r3, pc}

08003058 <OSTaskDelHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskDelHook (OS_TCB *ptcb)
{
 8003058:	b508      	push	{r3, lr}
#if OS_APP_HOOKS_EN > 0u
    App_TaskDelHook(ptcb);
 800305a:	f7fe f955 	bl	8001308 <App_TaskDelHook>
 800305e:	bd08      	pop	{r3, pc}

08003060 <OSTaskIdleHook>:
* Note(s)    : 1) Interrupts are enabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskIdleHook (void)
{
 8003060:	b508      	push	{r3, lr}
#if OS_APP_HOOKS_EN > 0u
    App_TaskIdleHook();
 8003062:	f7fe f953 	bl	800130c <App_TaskIdleHook>
 8003066:	bd08      	pop	{r3, pc}

08003068 <OSTaskReturnHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskReturnHook (OS_TCB  *ptcb)
{
 8003068:	b508      	push	{r3, lr}
#if OS_APP_HOOKS_EN > 0u
    App_TaskReturnHook(ptcb);
 800306a:	f7fe f953 	bl	8001314 <App_TaskReturnHook>
 800306e:	bd08      	pop	{r3, pc}

08003070 <OSTaskStatHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskStatHook (void)
{
 8003070:	b508      	push	{r3, lr}
#if OS_APP_HOOKS_EN > 0u
    App_TaskStatHook();
 8003072:	f7fe f94d 	bl	8001310 <App_TaskStatHook>
 8003076:	bd08      	pop	{r3, pc}

08003078 <OSTaskStkInit>:
*              2) All tasks run in Thread mode, using process stack.
*********************************************************************************************************
*/

OS_STK *OSTaskStkInit (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT16U opt)
{
 8003078:	b410      	push	{r4}
    OS_STK  *p_stk;


    p_stk      = ptos + 1u;                                     /* Load stack pointer                                   */
                                                                /* Align the stack to 8-bytes.                          */
    p_stk      = (OS_STK *)((OS_STK)(p_stk) & 0xFFFFFFF8u);
 800307a:	3204      	adds	r2, #4
 800307c:	f022 0207 	bic.w	r2, r2, #7
                                                                /* Registers stacked as if auto-saved on exception      */
    *(--p_stk) = (OS_STK)0x01000000uL;                          /* xPSR                                                 */
 8003080:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
 8003084:	f842 4c04 	str.w	r4, [r2, #-4]
    *(--p_stk) = (OS_STK)task;                                  /* Entry Point                                          */
 8003088:	f842 0c08 	str.w	r0, [r2, #-8]
    *(--p_stk) = (OS_STK)OS_TaskReturn;                         /* R14 (LR)                                             */
 800308c:	4861      	ldr	r0, [pc, #388]	; (8003214 <OSTaskStkInit+0x19c>)
 800308e:	f842 0c0c 	str.w	r0, [r2, #-12]
    *(--p_stk) = (OS_STK)0x12121212uL;                          /* R12                                                  */
 8003092:	f04f 3012 	mov.w	r0, #303174162	; 0x12121212
 8003096:	f842 0c10 	str.w	r0, [r2, #-16]
    *(--p_stk) = (OS_STK)0x03030303uL;                          /* R3                                                   */
 800309a:	f04f 3003 	mov.w	r0, #50529027	; 0x3030303
 800309e:	f842 0c14 	str.w	r0, [r2, #-20]
    *(--p_stk) = (OS_STK)0x02020202uL;                          /* R2                                                   */
 80030a2:	f04f 3002 	mov.w	r0, #33686018	; 0x2020202
 80030a6:	f842 0c18 	str.w	r0, [r2, #-24]
    *(--p_stk) = (OS_STK)0x01010101uL;                          /* R1                                                   */
 80030aa:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
 80030ae:	f842 0c1c 	str.w	r0, [r2, #-28]
    *(--p_stk) = (OS_STK)p_arg;                                 /* R0 : argument                                        */
 80030b2:	f842 1c20 	str.w	r1, [r2, #-32]

                                                                /* Remaining registers saved on process stack           */
    *(--p_stk) = (OS_STK)0x11111111uL;                          /* R11                                                  */
 80030b6:	f04f 3111 	mov.w	r1, #286331153	; 0x11111111
 80030ba:	f842 1c24 	str.w	r1, [r2, #-36]
    *(--p_stk) = (OS_STK)0x10101010uL;                          /* R10                                                  */
 80030be:	f04f 3110 	mov.w	r1, #269488144	; 0x10101010
 80030c2:	f842 1c28 	str.w	r1, [r2, #-40]
    *(--p_stk) = (OS_STK)0x09090909uL;                          /* R9                                                   */
 80030c6:	f04f 3109 	mov.w	r1, #151587081	; 0x9090909
 80030ca:	f842 1c2c 	str.w	r1, [r2, #-44]
    *(--p_stk) = (OS_STK)0x08080808uL;                          /* R8                                                   */
 80030ce:	f04f 3108 	mov.w	r1, #134744072	; 0x8080808
 80030d2:	f842 1c30 	str.w	r1, [r2, #-48]
    *(--p_stk) = (OS_STK)0x07070707uL;                          /* R7                                                   */
 80030d6:	f04f 3107 	mov.w	r1, #117901063	; 0x7070707
 80030da:	f842 1c34 	str.w	r1, [r2, #-52]
    *(--p_stk) = (OS_STK)0x06060606uL;                          /* R6                                                   */
 80030de:	f04f 3106 	mov.w	r1, #101058054	; 0x6060606
 80030e2:	f842 1c38 	str.w	r1, [r2, #-56]
    *(--p_stk) = (OS_STK)0x05050505uL;                          /* R5                                                   */
 80030e6:	f04f 3105 	mov.w	r1, #84215045	; 0x5050505
 80030ea:	f842 1c3c 	str.w	r1, [r2, #-60]
    *(--p_stk) = (OS_STK)0x04040404uL;                          /* R4                                                   */
 80030ee:	f04f 3104 	mov.w	r1, #67372036	; 0x4040404
 80030f2:	f842 1c40 	str.w	r1, [r2, #-64]
    
#if (OS_CPU_ARM_FP_EN > 0u)
    if ((opt & OS_TASK_OPT_SAVE_FP) != (INT16U)0) {
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	b913      	cbnz	r3, 8003104 <OSTaskStkInit+0x8c>
    *(--p_stk) = (OS_STK)0x09090909uL;                          /* R9                                                   */
    *(--p_stk) = (OS_STK)0x08080808uL;                          /* R8                                                   */
    *(--p_stk) = (OS_STK)0x07070707uL;                          /* R7                                                   */
    *(--p_stk) = (OS_STK)0x06060606uL;                          /* R6                                                   */
    *(--p_stk) = (OS_STK)0x05050505uL;                          /* R5                                                   */
    *(--p_stk) = (OS_STK)0x04040404uL;                          /* R4                                                   */
 80030fe:	f1a2 0040 	sub.w	r0, r2, #64	; 0x40
 8003102:	e083      	b.n	800320c <OSTaskStkInit+0x194>
    
#if (OS_CPU_ARM_FP_EN > 0u)
    if ((opt & OS_TASK_OPT_SAVE_FP) != (INT16U)0) {
        *--p_stk = (OS_STK)0x02000000u;                         /* FPSCR                                                */
 8003104:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003108:	f842 3c44 	str.w	r3, [r2, #-68]
                                                                /* Initialize S0-S31 floating point registers           */
        *--p_stk = (OS_STK)0x41F80000u;                         /* S31                                                  */
 800310c:	4b42      	ldr	r3, [pc, #264]	; (8003218 <OSTaskStkInit+0x1a0>)
 800310e:	f842 3c48 	str.w	r3, [r2, #-72]
        *--p_stk = (OS_STK)0x41F00000u;                         /* S30                                                  */
 8003112:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
 8003116:	f842 3c4c 	str.w	r3, [r2, #-76]
        *--p_stk = (OS_STK)0x41E80000u;                         /* S29                                                  */
 800311a:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
 800311e:	f842 3c50 	str.w	r3, [r2, #-80]
        *--p_stk = (OS_STK)0x41E00000u;                         /* S28                                                  */
 8003122:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
 8003126:	f842 3c54 	str.w	r3, [r2, #-84]
        *--p_stk = (OS_STK)0x41D80000u;                         /* S27                                                  */
 800312a:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
 800312e:	f842 3c58 	str.w	r3, [r2, #-88]
        *--p_stk = (OS_STK)0x41D00000u;                         /* S26                                                  */
 8003132:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
 8003136:	f842 3c5c 	str.w	r3, [r2, #-92]
        *--p_stk = (OS_STK)0x41C80000u;                         /* S25                                                  */
 800313a:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
 800313e:	f842 3c60 	str.w	r3, [r2, #-96]
        *--p_stk = (OS_STK)0x41C00000u;                         /* S24                                                  */
 8003142:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
 8003146:	f842 3c64 	str.w	r3, [r2, #-100]
        *--p_stk = (OS_STK)0x41B80000u;                         /* S23                                                  */
 800314a:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
 800314e:	f842 3c68 	str.w	r3, [r2, #-104]
        *--p_stk = (OS_STK)0x41B00000u;                         /* S22                                                  */
 8003152:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
 8003156:	f842 3c6c 	str.w	r3, [r2, #-108]
        *--p_stk = (OS_STK)0x41A80000u;                         /* S21                                                  */
 800315a:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
 800315e:	f842 3c70 	str.w	r3, [r2, #-112]
        *--p_stk = (OS_STK)0x41A00000u;                         /* S20                                                  */
 8003162:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
 8003166:	f842 3c74 	str.w	r3, [r2, #-116]
        *--p_stk = (OS_STK)0x41980000u;                         /* S19                                                  */
 800316a:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
 800316e:	f842 3c78 	str.w	r3, [r2, #-120]
        *--p_stk = (OS_STK)0x41900000u;                         /* S18                                                  */
 8003172:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
 8003176:	f842 3c7c 	str.w	r3, [r2, #-124]
        *--p_stk = (OS_STK)0x41880000u;                         /* S17                                                  */
 800317a:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
 800317e:	f842 3c80 	str.w	r3, [r2, #-128]
        *--p_stk = (OS_STK)0x41800000u;                         /* S16                                                  */
 8003182:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8003186:	f842 3c84 	str.w	r3, [r2, #-132]
        *--p_stk = (OS_STK)0x41700000u;                         /* S15                                                  */
 800318a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800318e:	f842 3c88 	str.w	r3, [r2, #-136]
        *--p_stk = (OS_STK)0x41600000u;                         /* S14                                                  */
 8003192:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8003196:	f842 3c8c 	str.w	r3, [r2, #-140]
        *--p_stk = (OS_STK)0x41500000u;                         /* S13                                                  */
 800319a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800319e:	f842 3c90 	str.w	r3, [r2, #-144]
        *--p_stk = (OS_STK)0x41400000u;                         /* S12                                                  */
 80031a2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80031a6:	f842 3c94 	str.w	r3, [r2, #-148]
        *--p_stk = (OS_STK)0x41300000u;                         /* S11                                                  */
 80031aa:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80031ae:	f842 3c98 	str.w	r3, [r2, #-152]
        *--p_stk = (OS_STK)0x41200000u;                         /* S10                                                  */
 80031b2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80031b6:	f842 3c9c 	str.w	r3, [r2, #-156]
        *--p_stk = (OS_STK)0x41100000u;                         /* S9                                                   */
 80031ba:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80031be:	f842 3ca0 	str.w	r3, [r2, #-160]
        *--p_stk = (OS_STK)0x41000000u;                         /* S8                                                   */
 80031c2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80031c6:	f842 3ca4 	str.w	r3, [r2, #-164]
        *--p_stk = (OS_STK)0x40E00000u;                         /* S7                                                   */
 80031ca:	f5a3 1300 	sub.w	r3, r3, #2097152	; 0x200000
 80031ce:	f842 3ca8 	str.w	r3, [r2, #-168]
        *--p_stk = (OS_STK)0x40C00000u;                         /* S6                                                   */
 80031d2:	f5a3 1300 	sub.w	r3, r3, #2097152	; 0x200000
 80031d6:	f842 3cac 	str.w	r3, [r2, #-172]
        *--p_stk = (OS_STK)0x40A00000u;                         /* S5                                                   */
 80031da:	f5a3 1300 	sub.w	r3, r3, #2097152	; 0x200000
 80031de:	f842 3cb0 	str.w	r3, [r2, #-176]
        *--p_stk = (OS_STK)0x40800000u;                         /* S4                                                   */
 80031e2:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80031e6:	f842 3cb4 	str.w	r3, [r2, #-180]
        *--p_stk = (OS_STK)0x40400000u;                         /* S3                                                   */
 80031ea:	f5a3 0380 	sub.w	r3, r3, #4194304	; 0x400000
 80031ee:	f842 3cb8 	str.w	r3, [r2, #-184]
        *--p_stk = (OS_STK)0x40000000u;                         /* S2                                                   */
 80031f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031f6:	f842 3cbc 	str.w	r3, [r2, #-188]
        *--p_stk = (OS_STK)0x3F800000u;                         /* S1                                                   */
 80031fa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80031fe:	f842 3cc0 	str.w	r3, [r2, #-192]
        *--p_stk = (OS_STK)0x00000000u;                         /* S0                                                   */
 8003202:	f1a2 00c4 	sub.w	r0, r2, #196	; 0xc4
 8003206:	2300      	movs	r3, #0
 8003208:	f842 3cc4 	str.w	r3, [r2, #-196]
    }
#endif    

    return (p_stk);
}
 800320c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	0800410d 	.word	0x0800410d
 8003218:	41f80000 	.word	0x41f80000

0800321c <OSTaskSwHook>:
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0u) && (OS_TASK_SW_HOOK_EN > 0u)
void  OSTaskSwHook (void)
{
 800321c:	b508      	push	{r3, lr}
    
#if (OS_CPU_ARM_FP_EN > 0u)
    if ((OSTCBCur->OSTCBOpt & OS_TASK_OPT_SAVE_FP) != (INT16U)0) {
 800321e:	4b0b      	ldr	r3, [pc, #44]	; (800324c <OSTaskSwHook+0x30>)
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	8a13      	ldrh	r3, [r2, #16]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	b29b      	uxth	r3, r3
 800322a:	b113      	cbz	r3, 8003232 <OSTaskSwHook+0x16>
        OS_CPU_FP_Reg_Push(OSTCBCur->OSTCBStkPtr);
 800322c:	6810      	ldr	r0, [r2, #0]
 800322e:	f7fc ffe9 	bl	8000204 <OS_CPU_FP_Reg_Push>
    }

    if ((OSTCBHighRdy->OSTCBOpt & OS_TASK_OPT_SAVE_FP) != (INT16U)0) {
 8003232:	4b07      	ldr	r3, [pc, #28]	; (8003250 <OSTaskSwHook+0x34>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	8a13      	ldrh	r3, [r2, #16]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	b29b      	uxth	r3, r3
 800323e:	b113      	cbz	r3, 8003246 <OSTaskSwHook+0x2a>
        OS_CPU_FP_Reg_Pop(OSTCBHighRdy->OSTCBStkPtr);
 8003240:	6810      	ldr	r0, [r2, #0]
 8003242:	f7fc ffec 	bl	800021e <OS_CPU_FP_Reg_Pop>
    }
#endif
    
#if OS_APP_HOOKS_EN > 0u
    App_TaskSwHook();
 8003246:	f7fe f867 	bl	8001318 <App_TaskSwHook>
 800324a:	bd08      	pop	{r3, pc}
 800324c:	20002fb0 	.word	0x20002fb0
 8003250:	20002794 	.word	0x20002794

08003254 <OSTCBInitHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTCBInitHook (OS_TCB *ptcb)
{
 8003254:	b508      	push	{r3, lr}
#if OS_APP_HOOKS_EN > 0u
    App_TCBInitHook(ptcb);
 8003256:	f7fe f861 	bl	800131c <App_TCBInitHook>
 800325a:	bd08      	pop	{r3, pc}

0800325c <OSTimeTickHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0u) && (OS_TIME_TICK_HOOK_EN > 0u)
void  OSTimeTickHook (void)
{
 800325c:	b508      	push	{r3, lr}
#if OS_APP_HOOKS_EN > 0u
    App_TimeTickHook();
 800325e:	f7fe f85f 	bl	8001320 <App_TimeTickHook>
#endif

#if OS_TMR_EN > 0u
    OSTmrCtr++;
 8003262:	4b07      	ldr	r3, [pc, #28]	; (8003280 <OSTimeTickHook+0x24>)
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	3301      	adds	r3, #1
 8003268:	b29b      	uxth	r3, r3
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
 800326a:	2b09      	cmp	r3, #9
 800326c:	d802      	bhi.n	8003274 <OSTimeTickHook+0x18>
#if OS_APP_HOOKS_EN > 0u
    App_TimeTickHook();
#endif

#if OS_TMR_EN > 0u
    OSTmrCtr++;
 800326e:	4a04      	ldr	r2, [pc, #16]	; (8003280 <OSTimeTickHook+0x24>)
 8003270:	8013      	strh	r3, [r2, #0]
 8003272:	bd08      	pop	{r3, pc}
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
        OSTmrCtr = 0;
 8003274:	2200      	movs	r2, #0
 8003276:	4b02      	ldr	r3, [pc, #8]	; (8003280 <OSTimeTickHook+0x24>)
 8003278:	801a      	strh	r2, [r3, #0]
        OSTmrSignal();
 800327a:	f001 f8cb 	bl	8004414 <OSTmrSignal>
 800327e:	bd08      	pop	{r3, pc}
 8003280:	20001ab0 	.word	0x20001ab0

08003284 <OS_CPU_SysTickHandler>:
* Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M4 vector table.
*********************************************************************************************************
*/

void  OS_CPU_SysTickHandler (void)
{
 8003284:	b508      	push	{r3, lr}
    OS_CPU_SR  cpu_sr;


    OS_ENTER_CRITICAL();                         /* Tell uC/OS-II that we are starting an ISR          */
 8003286:	f7fc ffd3 	bl	8000230 <OS_CPU_SR_Save>
    OSIntNesting++;
 800328a:	4a05      	ldr	r2, [pc, #20]	; (80032a0 <OS_CPU_SysTickHandler+0x1c>)
 800328c:	7813      	ldrb	r3, [r2, #0]
 800328e:	3301      	adds	r3, #1
 8003290:	7013      	strb	r3, [r2, #0]
    OS_EXIT_CRITICAL();
 8003292:	f7fc ffd1 	bl	8000238 <OS_CPU_SR_Restore>

    OSTimeTick();                                /* Call uC/OS-II's OSTimeTick()                       */
 8003296:	f000 f905 	bl	80034a4 <OSTimeTick>

    OSIntExit();                                 /* Tell uC/OS-II that we are leaving the ISR          */
 800329a:	f000 f86b 	bl	8003374 <OSIntExit>
 800329e:	bd08      	pop	{r3, pc}
 80032a0:	20002fac 	.word	0x20002fac

080032a4 <OS_CPU_SysTickInit>:
void  OS_CPU_SysTickInit (INT32U  cnts)
{
    INT32U  prio;


    OS_CPU_CM4_NVIC_ST_RELOAD = cnts - 1u;
 80032a4:	3801      	subs	r0, #1
 80032a6:	4b08      	ldr	r3, [pc, #32]	; (80032c8 <OS_CPU_SysTickInit+0x24>)
 80032a8:	6018      	str	r0, [r3, #0]

                                                            /* Set SysTick handler prio.                              */
    prio  = OS_CPU_CM4_NVIC_SHPRI3;
 80032aa:	4a08      	ldr	r2, [pc, #32]	; (80032cc <OS_CPU_SysTickInit+0x28>)
 80032ac:	6813      	ldr	r3, [r2, #0]
    prio &= DEF_BIT_FIELD(24, 0);
 80032ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    prio |= DEF_BIT_MASK(OS_CPU_CFG_SYSTICK_PRIO, 24);

    OS_CPU_CM4_NVIC_SHPRI3 = prio;
 80032b2:	6013      	str	r3, [r2, #0]

                                                            /* Enable timer.                                          */
    OS_CPU_CM4_NVIC_ST_CTRL |= OS_CPU_CM4_NVIC_ST_CTRL_CLK_SRC |
 80032b4:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <OS_CPU_SysTickInit+0x2c>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	f042 0205 	orr.w	r2, r2, #5
 80032bc:	601a      	str	r2, [r3, #0]
                               OS_CPU_CM4_NVIC_ST_CTRL_ENABLE;
                                                            /* Enable timer interrupt.                                */
    OS_CPU_CM4_NVIC_ST_CTRL |= OS_CPU_CM4_NVIC_ST_CTRL_INTEN;
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	f042 0202 	orr.w	r2, r2, #2
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	4770      	bx	lr
 80032c8:	e000e014 	.word	0xe000e014
 80032cc:	e000ed20 	.word	0xe000ed20
 80032d0:	e000e010 	.word	0xe000e010

080032d4 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0u
void  OSDebugInit (void)
{
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop

080032d8 <OS_SchedNew>:
{
#if OS_LOWEST_PRIO <= 63u                        /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 80032d8:	4b05      	ldr	r3, [pc, #20]	; (80032f0 <OS_SchedNew+0x18>)
 80032da:	4a06      	ldr	r2, [pc, #24]	; (80032f4 <OS_SchedNew+0x1c>)
 80032dc:	7812      	ldrb	r2, [r2, #0]
 80032de:	5c9a      	ldrb	r2, [r3, r2]
    OSPrioHighRdy = (INT8U)((y << 3u) + OSUnMapTbl[OSRdyTbl[y]]);
 80032e0:	4905      	ldr	r1, [pc, #20]	; (80032f8 <OS_SchedNew+0x20>)
 80032e2:	5c89      	ldrb	r1, [r1, r2]
 80032e4:	5c5b      	ldrb	r3, [r3, r1]
 80032e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80032ea:	4a04      	ldr	r2, [pc, #16]	; (80032fc <OS_SchedNew+0x24>)
 80032ec:	7013      	strb	r3, [r2, #0]
 80032ee:	4770      	bx	lr
 80032f0:	080074c8 	.word	0x080074c8
 80032f4:	2000279c 	.word	0x2000279c
 80032f8:	200027a0 	.word	0x200027a0
 80032fc:	200021c6 	.word	0x200021c6

08003300 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 8003300:	b510      	push	{r4, lr}


    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
        OSIdleCtr++;
 8003302:	4c05      	ldr	r4, [pc, #20]	; (8003318 <OS_TaskIdle+0x18>)



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 8003304:	f7fc ff94 	bl	8000230 <OS_CPU_SR_Save>
        OSIdleCtr++;
 8003308:	6823      	ldr	r3, [r4, #0]
 800330a:	3301      	adds	r3, #1
 800330c:	6023      	str	r3, [r4, #0]
        OS_EXIT_CRITICAL();
 800330e:	f7fc ff93 	bl	8000238 <OS_CPU_SR_Restore>
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 8003312:	f7ff fea5 	bl	8003060 <OSTaskIdleHook>
 8003316:	e7f5      	b.n	8003304 <OS_TaskIdle+0x4>
 8003318:	200021c0 	.word	0x200021c0

0800331c <OSEventNameSet>:
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return;
    }
#endif
    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 800331c:	4b0c      	ldr	r3, [pc, #48]	; (8003350 <OSEventNameSet+0x34>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	b113      	cbz	r3, 8003328 <OSEventNameSet+0xc>
        *perr = OS_ERR_NAME_SET_ISR;
 8003322:	2312      	movs	r3, #18
 8003324:	7013      	strb	r3, [r2, #0]
 8003326:	4770      	bx	lr
        return;
    }
    switch (pevent->OSEventType) {
 8003328:	7803      	ldrb	r3, [r0, #0]
 800332a:	3b01      	subs	r3, #1
 800332c:	2b03      	cmp	r3, #3
 800332e:	d902      	bls.n	8003336 <OSEventNameSet+0x1a>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 8003330:	2301      	movs	r3, #1
 8003332:	7013      	strb	r3, [r2, #0]
             return;
 8003334:	4770      	bx	lr

#if (OS_EVENT_EN) && (OS_EVENT_NAME_EN > 0u)
void  OSEventNameSet (OS_EVENT  *pevent,
                      INT8U     *pname,
                      INT8U     *perr)
{
 8003336:	b570      	push	{r4, r5, r6, lr}
 8003338:	4614      	mov	r4, r2
 800333a:	460e      	mov	r6, r1
 800333c:	4605      	mov	r5, r0

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 800333e:	f7fc ff77 	bl	8000230 <OS_CPU_SR_Save>
    pevent->OSEventName = pname;
 8003342:	616e      	str	r6, [r5, #20]
    OS_EXIT_CRITICAL();
 8003344:	f7fc ff78 	bl	8000238 <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
 8003348:	2300      	movs	r3, #0
 800334a:	7023      	strb	r3, [r4, #0]
 800334c:	bd70      	pop	{r4, r5, r6, pc}
 800334e:	bf00      	nop
 8003350:	20002fac 	.word	0x20002fac

08003354 <OSIntEnter>:
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    if (OSRunning == OS_TRUE) {
 8003354:	4b05      	ldr	r3, [pc, #20]	; (800336c <OSIntEnter+0x18>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d106      	bne.n	800336a <OSIntEnter+0x16>
        if (OSIntNesting < 255u) {
 800335c:	4b04      	ldr	r3, [pc, #16]	; (8003370 <OSIntEnter+0x1c>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2bff      	cmp	r3, #255	; 0xff
 8003362:	d002      	beq.n	800336a <OSIntEnter+0x16>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 8003364:	3301      	adds	r3, #1
 8003366:	4a02      	ldr	r2, [pc, #8]	; (8003370 <OSIntEnter+0x1c>)
 8003368:	7013      	strb	r3, [r2, #0]
 800336a:	4770      	bx	lr
 800336c:	200021bd 	.word	0x200021bd
 8003370:	20002fac 	.word	0x20002fac

08003374 <OSIntExit>:
    OS_CPU_SR  cpu_sr = 0u;
#endif



    if (OSRunning == OS_TRUE) {
 8003374:	4b16      	ldr	r3, [pc, #88]	; (80033d0 <OSIntExit+0x5c>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d128      	bne.n	80033ce <OSIntExit+0x5a>
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 800337c:	b510      	push	{r4, lr}
#endif



    if (OSRunning == OS_TRUE) {
        OS_ENTER_CRITICAL();
 800337e:	f7fc ff57 	bl	8000230 <OS_CPU_SR_Save>
 8003382:	4604      	mov	r4, r0
        if (OSIntNesting > 0u) {                           /* Prevent OSIntNesting from wrapping       */
 8003384:	4b13      	ldr	r3, [pc, #76]	; (80033d4 <OSIntExit+0x60>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	b123      	cbz	r3, 8003394 <OSIntExit+0x20>
            OSIntNesting--;
 800338a:	3b01      	subs	r3, #1
 800338c:	b2db      	uxtb	r3, r3
 800338e:	4a11      	ldr	r2, [pc, #68]	; (80033d4 <OSIntExit+0x60>)
 8003390:	7013      	strb	r3, [r2, #0]
        }
        if (OSIntNesting == 0u) {                          /* Reschedule only if all ISRs complete ... */
 8003392:	b9c3      	cbnz	r3, 80033c6 <OSIntExit+0x52>
            if (OSLockNesting == 0u) {                     /* ... and not locked.                      */
 8003394:	4b10      	ldr	r3, [pc, #64]	; (80033d8 <OSIntExit+0x64>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	b9ab      	cbnz	r3, 80033c6 <OSIntExit+0x52>
                OS_SchedNew();
 800339a:	f7ff ff9d 	bl	80032d8 <OS_SchedNew>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 800339e:	4b0f      	ldr	r3, [pc, #60]	; (80033dc <OSIntExit+0x68>)
 80033a0:	781a      	ldrb	r2, [r3, #0]
 80033a2:	4b0f      	ldr	r3, [pc, #60]	; (80033e0 <OSIntExit+0x6c>)
 80033a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033a8:	490e      	ldr	r1, [pc, #56]	; (80033e4 <OSIntExit+0x70>)
 80033aa:	600b      	str	r3, [r1, #0]
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 80033ac:	490e      	ldr	r1, [pc, #56]	; (80033e8 <OSIntExit+0x74>)
 80033ae:	7809      	ldrb	r1, [r1, #0]
 80033b0:	4291      	cmp	r1, r2
 80033b2:	d008      	beq.n	80033c6 <OSIntExit+0x52>
#if OS_TASK_PROFILE_EN > 0u
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 80033b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033b6:	3201      	adds	r2, #1
 80033b8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 80033ba:	4a0c      	ldr	r2, [pc, #48]	; (80033ec <OSIntExit+0x78>)
 80033bc:	6813      	ldr	r3, [r2, #0]
 80033be:	3301      	adds	r3, #1
 80033c0:	6013      	str	r3, [r2, #0]
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
                    OS_TLS_TaskSw();
#endif
#endif

                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 80033c2:	f7fc ff54 	bl	800026e <OSIntCtxSw>
                }
            }
        }
        OS_EXIT_CRITICAL();
 80033c6:	4620      	mov	r0, r4
 80033c8:	f7fc ff36 	bl	8000238 <OS_CPU_SR_Restore>
 80033cc:	bd10      	pop	{r4, pc}
 80033ce:	4770      	bx	lr
 80033d0:	200021bd 	.word	0x200021bd
 80033d4:	20002fac 	.word	0x20002fac
 80033d8:	200021b4 	.word	0x200021b4
 80033dc:	200021c6 	.word	0x200021c6
 80033e0:	20003b38 	.word	0x20003b38
 80033e4:	20002794 	.word	0x20002794
 80033e8:	20002498 	.word	0x20002498
 80033ec:	2000271c 	.word	0x2000271c

080033f0 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedLock (void)
{
 80033f0:	b508      	push	{r3, lr}
    OS_CPU_SR  cpu_sr = 0u;
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 80033f2:	4b09      	ldr	r3, [pc, #36]	; (8003418 <OSSchedLock+0x28>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d10d      	bne.n	8003416 <OSSchedLock+0x26>
        OS_ENTER_CRITICAL();
 80033fa:	f7fc ff19 	bl	8000230 <OS_CPU_SR_Save>
        if (OSIntNesting == 0u) {                /* Can't call from an ISR                             */
 80033fe:	4b07      	ldr	r3, [pc, #28]	; (800341c <OSSchedLock+0x2c>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	b933      	cbnz	r3, 8003412 <OSSchedLock+0x22>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 8003404:	4b06      	ldr	r3, [pc, #24]	; (8003420 <OSSchedLock+0x30>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2bff      	cmp	r3, #255	; 0xff
 800340a:	d002      	beq.n	8003412 <OSSchedLock+0x22>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 800340c:	3301      	adds	r3, #1
 800340e:	4a04      	ldr	r2, [pc, #16]	; (8003420 <OSSchedLock+0x30>)
 8003410:	7013      	strb	r3, [r2, #0]
            }
        }
        OS_EXIT_CRITICAL();
 8003412:	f7fc ff11 	bl	8000238 <OS_CPU_SR_Restore>
 8003416:	bd08      	pop	{r3, pc}
 8003418:	200021bd 	.word	0x200021bd
 800341c:	20002fac 	.word	0x20002fac
 8003420:	200021b4 	.word	0x200021b4

08003424 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 8003424:	b508      	push	{r3, lr}
    if (OSRunning == OS_FALSE) {
 8003426:	4b09      	ldr	r3, [pc, #36]	; (800344c <OSStart+0x28>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	b973      	cbnz	r3, 800344a <OSStart+0x26>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 800342c:	f7ff ff54 	bl	80032d8 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 8003430:	4b07      	ldr	r3, [pc, #28]	; (8003450 <OSStart+0x2c>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	4a07      	ldr	r2, [pc, #28]	; (8003454 <OSStart+0x30>)
 8003436:	7013      	strb	r3, [r2, #0]
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 8003438:	4a07      	ldr	r2, [pc, #28]	; (8003458 <OSStart+0x34>)
 800343a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800343e:	4a07      	ldr	r2, [pc, #28]	; (800345c <OSStart+0x38>)
 8003440:	6013      	str	r3, [r2, #0]
        OSTCBCur      = OSTCBHighRdy;
 8003442:	4a07      	ldr	r2, [pc, #28]	; (8003460 <OSStart+0x3c>)
 8003444:	6013      	str	r3, [r2, #0]
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 8003446:	f7fc fefa 	bl	800023e <OSStartHighRdy>
 800344a:	bd08      	pop	{r3, pc}
 800344c:	200021bd 	.word	0x200021bd
 8003450:	200021c6 	.word	0x200021c6
 8003454:	20002498 	.word	0x20002498
 8003458:	20003b38 	.word	0x20003b38
 800345c:	20002794 	.word	0x20002794
 8003460:	20002fb0 	.word	0x20002fb0

08003464 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
void  OSStatInit (void)
{
 8003464:	b510      	push	{r4, lr}
    OS_CPU_SR  cpu_sr = 0u;
#endif



    OSTimeDly(2u);                               /* Synchronize with clock tick                        */
 8003466:	2002      	movs	r0, #2
 8003468:	f000 febc 	bl	80041e4 <OSTimeDly>
    OS_ENTER_CRITICAL();
 800346c:	f7fc fee0 	bl	8000230 <OS_CPU_SR_Save>
    OSIdleCtr    = 0uL;                          /* Clear idle counter                                 */
 8003470:	4c09      	ldr	r4, [pc, #36]	; (8003498 <OSStatInit+0x34>)
 8003472:	2300      	movs	r3, #0
 8003474:	6023      	str	r3, [r4, #0]
    OS_EXIT_CRITICAL();
 8003476:	f7fc fedf 	bl	8000238 <OS_CPU_SR_Restore>
    OSTimeDly(OS_TICKS_PER_SEC / 10u);           /* Determine MAX. idle counter value for 1/10 second  */
 800347a:	200a      	movs	r0, #10
 800347c:	f000 feb2 	bl	80041e4 <OSTimeDly>
    OS_ENTER_CRITICAL();
 8003480:	f7fc fed6 	bl	8000230 <OS_CPU_SR_Save>
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 8003484:	6822      	ldr	r2, [r4, #0]
 8003486:	4b05      	ldr	r3, [pc, #20]	; (800349c <OSStatInit+0x38>)
 8003488:	601a      	str	r2, [r3, #0]
    OSStatRdy    = OS_TRUE;
 800348a:	2201      	movs	r2, #1
 800348c:	4b04      	ldr	r3, [pc, #16]	; (80034a0 <OSStatInit+0x3c>)
 800348e:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL();
 8003490:	f7fc fed2 	bl	8000238 <OS_CPU_SR_Restore>
 8003494:	bd10      	pop	{r4, pc}
 8003496:	bf00      	nop
 8003498:	200021c0 	.word	0x200021c0
 800349c:	20002724 	.word	0x20002724
 80034a0:	20003b34 	.word	0x20003b34

080034a4 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 80034a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif



#if OS_TIME_TICK_HOOK_EN > 0u
    OSTimeTickHook();                                      /* Call user definable hook                     */
 80034a6:	f7ff fed9 	bl	800325c <OSTimeTickHook>
#endif
#if OS_TIME_GET_SET_EN > 0u
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 80034aa:	f7fc fec1 	bl	8000230 <OS_CPU_SR_Save>
    OSTime++;
 80034ae:	4a26      	ldr	r2, [pc, #152]	; (8003548 <OSTimeTick+0xa4>)
 80034b0:	6813      	ldr	r3, [r2, #0]
 80034b2:	3301      	adds	r3, #1
 80034b4:	6013      	str	r3, [r2, #0]
    OS_EXIT_CRITICAL();
 80034b6:	f7fc febf 	bl	8000238 <OS_CPU_SR_Restore>
#endif
    if (OSRunning == OS_TRUE) {
 80034ba:	4b24      	ldr	r3, [pc, #144]	; (800354c <OSTimeTick+0xa8>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d141      	bne.n	8003546 <OSTimeTick+0xa2>
#if OS_TICK_STEP_EN > 0u
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 80034c2:	4b23      	ldr	r3, [pc, #140]	; (8003550 <OSTimeTick+0xac>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d03d      	beq.n	8003546 <OSTimeTick+0xa2>
 80034ca:	b12b      	cbz	r3, 80034d8 <OSTimeTick+0x34>
 80034cc:	2b02      	cmp	r3, #2
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
                 break;

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
                 OSTickStepState = OS_TICK_STEP_WAIT;
 80034ce:	bf0c      	ite	eq
 80034d0:	2201      	moveq	r2, #1
                 break;

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
 80034d2:	2200      	movne	r2, #0
 80034d4:	4b1e      	ldr	r3, [pc, #120]	; (8003550 <OSTimeTick+0xac>)
 80034d6:	701a      	strb	r2, [r3, #0]
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 80034d8:	4b1e      	ldr	r3, [pc, #120]	; (8003554 <OSTimeTick+0xb0>)
 80034da:	681c      	ldr	r4, [r3, #0]
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 80034dc:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80034e0:	2b3f      	cmp	r3, #63	; 0x3f
 80034e2:	d030      	beq.n	8003546 <OSTimeTick+0xa2>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 80034e4:	4e1c      	ldr	r6, [pc, #112]	; (8003558 <OSTimeTick+0xb4>)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 80034e6:	4d1d      	ldr	r5, [pc, #116]	; (800355c <OSTimeTick+0xb8>)

                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
                        ptcb->OSTCBStat  &= (INT8U)~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 80034e8:	2700      	movs	r7, #0
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
            OS_ENTER_CRITICAL();
 80034ea:	f7fc fea1 	bl	8000230 <OS_CPU_SR_Save>
            if (ptcb->OSTCBDly != 0u) {                    /* No, Delayed or waiting for event with TO     */
 80034ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034f0:	b313      	cbz	r3, 8003538 <OSTimeTick+0x94>
                ptcb->OSTCBDly--;                          /* Decrement nbr of ticks to end of delay       */
 80034f2:	3b01      	subs	r3, #1
 80034f4:	6323      	str	r3, [r4, #48]	; 0x30
                if (ptcb->OSTCBDly == 0u) {                /* Check for timeout                            */
 80034f6:	b9fb      	cbnz	r3, 8003538 <OSTimeTick+0x94>

                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 80034f8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80034fc:	f013 0f37 	tst.w	r3, #55	; 0x37
 8003500:	d007      	beq.n	8003512 <OSTimeTick+0x6e>
                        ptcb->OSTCBStat  &= (INT8U)~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 8003502:	f023 0337 	bic.w	r3, r3, #55	; 0x37
 8003506:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 800350a:	2301      	movs	r3, #1
 800350c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 8003510:	e001      	b.n	8003516 <OSTimeTick+0x72>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 8003512:	f884 7035 	strb.w	r7, [r4, #53]	; 0x35
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 8003516:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800351a:	f013 0f08 	tst.w	r3, #8
 800351e:	d10b      	bne.n	8003538 <OSTimeTick+0x94>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 8003520:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
 8003524:	7833      	ldrb	r3, [r6, #0]
 8003526:	4313      	orrs	r3, r2
 8003528:	7033      	strb	r3, [r6, #0]
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 800352a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800352e:	5ca9      	ldrb	r1, [r5, r2]
 8003530:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8003534:	430b      	orrs	r3, r1
 8003536:	54ab      	strb	r3, [r5, r2]
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 8003538:	6964      	ldr	r4, [r4, #20]
            OS_EXIT_CRITICAL();
 800353a:	f7fc fe7d 	bl	8000238 <OS_CPU_SR_Restore>
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 800353e:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8003542:	2b3f      	cmp	r3, #63	; 0x3f
 8003544:	d1d1      	bne.n	80034ea <OSTimeTick+0x46>
 8003546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003548:	20002fb8 	.word	0x20002fb8
 800354c:	200021bd 	.word	0x200021bd
 8003550:	20002518 	.word	0x20002518
 8003554:	2000249c 	.word	0x2000249c
 8003558:	2000279c 	.word	0x2000279c
 800355c:	200027a0 	.word	0x200027a0

08003560 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
void  OS_Dummy (void)
{
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop

08003564 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 8003564:	b410      	push	{r4}
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 8003566:	4b12      	ldr	r3, [pc, #72]	; (80035b0 <OS_EventTaskWait+0x4c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	61d8      	str	r0, [r3, #28]

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 800356c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8003570:	4402      	add	r2, r0
 8003572:	7ad4      	ldrb	r4, [r2, #11]
 8003574:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
 8003578:	4321      	orrs	r1, r4
 800357a:	72d1      	strb	r1, [r2, #11]
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 800357c:	7a81      	ldrb	r1, [r0, #10]
 800357e:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8003582:	430a      	orrs	r2, r1
 8003584:	7282      	strb	r2, [r0, #10]

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    OSRdyTbl[y]  &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 8003586:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 800358a:	f893 4039 	ldrb.w	r4, [r3, #57]	; 0x39
 800358e:	4809      	ldr	r0, [pc, #36]	; (80035b4 <OS_EventTaskWait+0x50>)
 8003590:	5c42      	ldrb	r2, [r0, r1]
 8003592:	ea22 0204 	bic.w	r2, r2, r4
 8003596:	5442      	strb	r2, [r0, r1]
    if (OSRdyTbl[y] == 0u) {                      /* Clear event grp bit if this was only task pending */
 8003598:	b932      	cbnz	r2, 80035a8 <OS_EventTaskWait+0x44>
        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 800359a:	4a07      	ldr	r2, [pc, #28]	; (80035b8 <OS_EventTaskWait+0x54>)
 800359c:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 80035a0:	7813      	ldrb	r3, [r2, #0]
 80035a2:	ea23 0301 	bic.w	r3, r3, r1
 80035a6:	7013      	strb	r3, [r2, #0]
    }
}
 80035a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	20002fb0 	.word	0x20002fb0
 80035b4:	200027a0 	.word	0x200027a0
 80035b8:	2000279c 	.word	0x2000279c

080035bc <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 80035bc:	b410      	push	{r4}
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    pevent->OSEventTbl[y]  &= (OS_PRIO)~ptcb->OSTCBBitX;    /* Remove task from wait list              */
 80035be:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 80035c2:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 80035c6:	440a      	add	r2, r1
 80035c8:	7ad3      	ldrb	r3, [r2, #11]
 80035ca:	ea23 0304 	bic.w	r3, r3, r4
 80035ce:	72d3      	strb	r3, [r2, #11]
    if (pevent->OSEventTbl[y] == 0u) {
 80035d0:	b92b      	cbnz	r3, 80035de <OS_EventTaskRemove+0x22>
        pevent->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 80035d2:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 80035d6:	7a8b      	ldrb	r3, [r1, #10]
 80035d8:	ea23 0302 	bic.w	r3, r3, r2
 80035dc:	728b      	strb	r3, [r1, #10]
    }
    ptcb->OSTCBEventPtr     = (OS_EVENT  *)0;               /* Unlink OS_EVENT from OS_TCB             */
 80035de:	2300      	movs	r3, #0
 80035e0:	61c3      	str	r3, [r0, #28]
}
 80035e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0u))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 80035e8:	b470      	push	{r4, r5, r6}
    INT8U      y;
    OS_PRIO    bity;
    OS_PRIO    bitx;


    y       =  ptcb->OSTCBY;
 80035ea:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
    bity    =  ptcb->OSTCBBitY;
 80035ee:	f890 603a 	ldrb.w	r6, [r0, #58]	; 0x3a
    bitx    =  ptcb->OSTCBBitX;
 80035f2:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
    pevents =  pevents_multi;
    pevent  = *pevents;
 80035f6:	680a      	ldr	r2, [r1, #0]
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 80035f8:	b16a      	cbz	r2, 8003616 <OS_EventTaskRemoveMulti+0x2e>
        pevent->OSEventTbl[y]  &= (OS_PRIO)~bitx;
 80035fa:	43e4      	mvns	r4, r4
        if (pevent->OSEventTbl[y] == 0u) {
            pevent->OSEventGrp &= (OS_PRIO)~bity;
 80035fc:	43f6      	mvns	r6, r6
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
        pevent->OSEventTbl[y]  &= (OS_PRIO)~bitx;
 80035fe:	1950      	adds	r0, r2, r5
 8003600:	7ac3      	ldrb	r3, [r0, #11]
 8003602:	4023      	ands	r3, r4
 8003604:	72c3      	strb	r3, [r0, #11]
        if (pevent->OSEventTbl[y] == 0u) {
 8003606:	b913      	cbnz	r3, 800360e <OS_EventTaskRemoveMulti+0x26>
            pevent->OSEventGrp &= (OS_PRIO)~bity;
 8003608:	7a93      	ldrb	r3, [r2, #10]
 800360a:	4033      	ands	r3, r6
 800360c:	7293      	strb	r3, [r2, #10]
        }
        pevents++;
        pevent = *pevents;
 800360e:	f851 2f04 	ldr.w	r2, [r1, #4]!
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 8003612:	2a00      	cmp	r2, #0
 8003614:	d1f3      	bne.n	80035fe <OS_EventTaskRemoveMulti+0x16>
            pevent->OSEventGrp &= (OS_PRIO)~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 8003616:	bc70      	pop	{r4, r5, r6}
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop

0800361c <OS_EventTaskRdy>:
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT  *pevent,
                        void      *pmsg,
                        INT8U      msk,
                        INT8U      pend_stat)
{
 800361c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800361e:	4606      	mov	r6, r0
    OS_PRIO  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63u
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 8003620:	4c18      	ldr	r4, [pc, #96]	; (8003684 <OS_EventTaskRdy+0x68>)
 8003622:	7a80      	ldrb	r0, [r0, #10]
 8003624:	5c20      	ldrb	r0, [r4, r0]
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 8003626:	1835      	adds	r5, r6, r0
 8003628:	7aed      	ldrb	r5, [r5, #11]
    prio = (INT8U)((y << 3u) + x);                      /* Find priority of task getting the msg       */
 800362a:	5d65      	ldrb	r5, [r4, r5]
 800362c:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
 8003630:	b2ed      	uxtb	r5, r5
        x = OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u;
    }
    prio = (INT8U)((y << 4u) + x);                      /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 8003632:	4c15      	ldr	r4, [pc, #84]	; (8003688 <OS_EventTaskRdy+0x6c>)
 8003634:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
    ptcb->OSTCBDly        =  0u;                        /* Prevent OSTimeTick() from readying task     */
 8003638:	2700      	movs	r7, #0
 800363a:	6327      	str	r7, [r4, #48]	; 0x30
#if ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u)) || (OS_MBOX_EN > 0u)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 800363c:	6261      	str	r1, [r4, #36]	; 0x24
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= (INT8U)~msk;                /* Clear bit associated with event type        */
 800363e:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 8003642:	ea21 0202 	bic.w	r2, r1, r2
 8003646:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 800364a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 800364e:	f012 0f08 	tst.w	r2, #8
 8003652:	d10b      	bne.n	800366c <OS_EventTaskRdy+0x50>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 8003654:	4a0d      	ldr	r2, [pc, #52]	; (800368c <OS_EventTaskRdy+0x70>)
 8003656:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
 800365a:	7813      	ldrb	r3, [r2, #0]
 800365c:	430b      	orrs	r3, r1
 800365e:	7013      	strb	r3, [r2, #0]
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 8003660:	4a0b      	ldr	r2, [pc, #44]	; (8003690 <OS_EventTaskRdy+0x74>)
 8003662:	5c11      	ldrb	r1, [r2, r0]
 8003664:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8003668:	430b      	orrs	r3, r1
 800366a:	5413      	strb	r3, [r2, r0]
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 800366c:	4631      	mov	r1, r6
 800366e:	4620      	mov	r0, r4
 8003670:	f7ff ffa4 	bl	80035bc <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 8003674:	6a21      	ldr	r1, [r4, #32]
 8003676:	b119      	cbz	r1, 8003680 <OS_EventTaskRdy+0x64>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 8003678:	4620      	mov	r0, r4
 800367a:	f7ff ffb5 	bl	80035e8 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 800367e:	61e6      	str	r6, [r4, #28]
    }
#endif

    return (prio);
}
 8003680:	4628      	mov	r0, r5
 8003682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003684:	080074c8 	.word	0x080074c8
 8003688:	20003b38 	.word	0x20003b38
 800368c:	2000279c 	.word	0x2000279c
 8003690:	200027a0 	.word	0x200027a0

08003694 <OS_EventWaitListInit>:
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    INT8U  i;


    pevent->OSEventGrp = 0u;                     /* No task waiting on event                           */
 8003694:	4603      	mov	r3, r0
 8003696:	2200      	movs	r2, #0
 8003698:	f803 2f0a 	strb.w	r2, [r3, #10]!
 800369c:	3012      	adds	r0, #18
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
        pevent->OSEventTbl[i] = 0u;
 800369e:	f803 2f01 	strb.w	r2, [r3, #1]!
{
    INT8U  i;


    pevent->OSEventGrp = 0u;                     /* No task waiting on event                           */
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 80036a2:	4283      	cmp	r3, r0
 80036a4:	d1fb      	bne.n	800369e <OS_EventWaitListInit+0xa>
        pevent->OSEventTbl[i] = 0u;
    }
}
 80036a6:	4770      	bx	lr

080036a8 <OS_MemClr>:
*/

void  OS_MemClr (INT8U  *pdest,
                 INT16U  size)
{
    while (size > 0u) {
 80036a8:	b141      	cbz	r1, 80036bc <OS_MemClr+0x14>
 80036aa:	1e43      	subs	r3, r0, #1
 80036ac:	1e4a      	subs	r2, r1, #1
 80036ae:	fa10 f082 	uxtah	r0, r0, r2
        *pdest++ = (INT8U)0;
 80036b2:	2200      	movs	r2, #0
 80036b4:	f803 2f01 	strb.w	r2, [r3, #1]!
*/

void  OS_MemClr (INT8U  *pdest,
                 INT16U  size)
{
    while (size > 0u) {
 80036b8:	4283      	cmp	r3, r0
 80036ba:	d1fb      	bne.n	80036b4 <OS_MemClr+0xc>
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop

080036c0 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 80036c0:	b570      	push	{r4, r5, r6, lr}
 80036c2:	b088      	sub	sp, #32
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
    INT8U  err;
#endif
#endif

    OSInitHookBegin();                                           /* Call port specific initialization code   */
 80036c4:	f7ff fca8 	bl	8003018 <OSInitHookBegin>
*/

static  void  OS_InitMisc (void)
{
#if OS_TIME_GET_SET_EN > 0u
    OSTime                    = 0uL;                       /* Clear the 32-bit system clock            */
 80036c8:	2300      	movs	r3, #0
 80036ca:	4a52      	ldr	r2, [pc, #328]	; (8003814 <OSInit+0x154>)
 80036cc:	6013      	str	r3, [r2, #0]
#endif

    OSIntNesting              = 0u;                        /* Clear the interrupt nesting counter      */
 80036ce:	4a52      	ldr	r2, [pc, #328]	; (8003818 <OSInit+0x158>)
 80036d0:	7013      	strb	r3, [r2, #0]
    OSLockNesting             = 0u;                        /* Clear the scheduling lock counter        */
 80036d2:	4a52      	ldr	r2, [pc, #328]	; (800381c <OSInit+0x15c>)
 80036d4:	7013      	strb	r3, [r2, #0]

    OSTaskCtr                 = 0u;                        /* Clear the number of tasks                */
 80036d6:	4a52      	ldr	r2, [pc, #328]	; (8003820 <OSInit+0x160>)
 80036d8:	7013      	strb	r3, [r2, #0]

    OSRunning                 = OS_FALSE;                  /* Indicate that multitasking not started   */
 80036da:	4a52      	ldr	r2, [pc, #328]	; (8003824 <OSInit+0x164>)
 80036dc:	7013      	strb	r3, [r2, #0]

    OSCtxSwCtr                = 0u;                        /* Clear the context switch counter         */
 80036de:	4a52      	ldr	r2, [pc, #328]	; (8003828 <OSInit+0x168>)
 80036e0:	6013      	str	r3, [r2, #0]
    OSIdleCtr                 = 0uL;                       /* Clear the 32-bit idle counter            */
 80036e2:	4a52      	ldr	r2, [pc, #328]	; (800382c <OSInit+0x16c>)
 80036e4:	6013      	str	r3, [r2, #0]

#if OS_TASK_STAT_EN > 0u
    OSIdleCtrRun              = 0uL;
 80036e6:	4a52      	ldr	r2, [pc, #328]	; (8003830 <OSInit+0x170>)
 80036e8:	6013      	str	r3, [r2, #0]
    OSIdleCtrMax              = 0uL;
 80036ea:	4a52      	ldr	r2, [pc, #328]	; (8003834 <OSInit+0x174>)
 80036ec:	6013      	str	r3, [r2, #0]
    OSStatRdy                 = OS_FALSE;                  /* Statistic task is not ready              */
 80036ee:	4a52      	ldr	r2, [pc, #328]	; (8003838 <OSInit+0x178>)
 80036f0:	7013      	strb	r3, [r2, #0]
#ifdef OS_SAFETY_CRITICAL_IEC61508
    OSSafetyCriticalStartFlag = OS_FALSE;                  /* Still allow creation of objects          */
#endif

#if OS_TASK_REG_TBL_SIZE > 0u
    OSTaskRegNextAvailID      = 0u;                        /* Initialize the task register ID          */
 80036f2:	4a52      	ldr	r2, [pc, #328]	; (800383c <OSInit+0x17c>)
 80036f4:	7013      	strb	r3, [r2, #0]
static  void  OS_InitRdyList (void)
{
    INT8U  i;


    OSRdyGrp      = 0u;                                    /* Clear the ready list                     */
 80036f6:	4a52      	ldr	r2, [pc, #328]	; (8003840 <OSInit+0x180>)
 80036f8:	7013      	strb	r3, [r2, #0]
 80036fa:	4b52      	ldr	r3, [pc, #328]	; (8003844 <OSInit+0x184>)
 80036fc:	f103 0108 	add.w	r1, r3, #8
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
        OSRdyTbl[i] = 0u;
 8003700:	2200      	movs	r2, #0
 8003702:	f803 2f01 	strb.w	r2, [r3, #1]!
{
    INT8U  i;


    OSRdyGrp      = 0u;                                    /* Clear the ready list                     */
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 8003706:	428b      	cmp	r3, r1
 8003708:	d1fb      	bne.n	8003702 <OSInit+0x42>
        OSRdyTbl[i] = 0u;
    }

    OSPrioCur     = 0u;
 800370a:	2300      	movs	r3, #0
 800370c:	4a4e      	ldr	r2, [pc, #312]	; (8003848 <OSInit+0x188>)
 800370e:	7013      	strb	r3, [r2, #0]
    OSPrioHighRdy = 0u;
 8003710:	4a4e      	ldr	r2, [pc, #312]	; (800384c <OSInit+0x18c>)
 8003712:	7013      	strb	r3, [r2, #0]

    OSTCBHighRdy  = (OS_TCB *)0;
 8003714:	4a4e      	ldr	r2, [pc, #312]	; (8003850 <OSInit+0x190>)
 8003716:	6013      	str	r3, [r2, #0]
    OSTCBCur      = (OS_TCB *)0;
 8003718:	4a4e      	ldr	r2, [pc, #312]	; (8003854 <OSInit+0x194>)
 800371a:	6013      	str	r3, [r2, #0]
    INT8U    ix_next;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 800371c:	4c4e      	ldr	r4, [pc, #312]	; (8003858 <OSInit+0x198>)
 800371e:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 8003722:	4620      	mov	r0, r4
 8003724:	f7ff ffc0 	bl	80036a8 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 8003728:	f44f 7180 	mov.w	r1, #256	; 0x100
 800372c:	484b      	ldr	r0, [pc, #300]	; (800385c <OSInit+0x19c>)
 800372e:	f7ff ffbb 	bl	80036a8 <OS_MemClr>
 8003732:	f104 0358 	add.w	r3, r4, #88	; 0x58
 8003736:	f504 62f2 	add.w	r2, r4, #1936	; 0x790
        ix_next =  ix + 1u;
        ptcb1   = &OSTCBTbl[ix];
        ptcb2   = &OSTCBTbl[ix_next];
        ptcb1->OSTCBNext = ptcb2;
#if OS_TASK_NAME_EN > 0u
        ptcb1->OSTCBTaskName = (INT8U *)(void *)"?";             /* Unknown name                       */
 800373a:	4949      	ldr	r1, [pc, #292]	; (8003860 <OSInit+0x1a0>)
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
        ix_next =  ix + 1u;
        ptcb1   = &OSTCBTbl[ix];
        ptcb2   = &OSTCBTbl[ix_next];
        ptcb1->OSTCBNext = ptcb2;
 800373c:	f843 3c44 	str.w	r3, [r3, #-68]
#if OS_TASK_NAME_EN > 0u
        ptcb1->OSTCBTaskName = (INT8U *)(void *)"?";             /* Unknown name                       */
 8003740:	f843 1c08 	str.w	r1, [r3, #-8]
 8003744:	3358      	adds	r3, #88	; 0x58
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 8003746:	429a      	cmp	r2, r3
 8003748:	d1f8      	bne.n	800373c <OSInit+0x7c>
#if OS_TASK_NAME_EN > 0u
        ptcb1->OSTCBTaskName = (INT8U *)(void *)"?";             /* Unknown name                       */
#endif
    }
    ptcb1                   = &OSTCBTbl[ix];
    ptcb1->OSTCBNext        = (OS_TCB *)0;                       /* Last OS_TCB                        */
 800374a:	4b43      	ldr	r3, [pc, #268]	; (8003858 <OSInit+0x198>)
 800374c:	2200      	movs	r2, #0
 800374e:	f8c3 274c 	str.w	r2, [r3, #1868]	; 0x74c
#if OS_TASK_NAME_EN > 0u
    ptcb1->OSTCBTaskName    = (INT8U *)(void *)"?";              /* Unknown name                       */
 8003752:	4943      	ldr	r1, [pc, #268]	; (8003860 <OSInit+0x1a0>)
 8003754:	f8c3 1788 	str.w	r1, [r3, #1928]	; 0x788
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 8003758:	4942      	ldr	r1, [pc, #264]	; (8003864 <OSInit+0x1a4>)
 800375a:	600a      	str	r2, [r1, #0]
    OSTCBFreeList           = &OSTCBTbl[0];
 800375c:	4a42      	ldr	r2, [pc, #264]	; (8003868 <OSInit+0x1a8>)
 800375e:	6013      	str	r3, [r2, #0]
    INT16U     ix_next;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 8003760:	4c42      	ldr	r4, [pc, #264]	; (800386c <OSInit+0x1ac>)
 8003762:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003766:	4620      	mov	r0, r4
 8003768:	f7ff ff9e 	bl	80036a8 <OS_MemClr>
 800376c:	f104 0318 	add.w	r3, r4, #24
 8003770:	f504 72f0 	add.w	r2, r4, #480	; 0x1e0
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
        ix_next = ix + 1u;
        pevent1 = &OSEventTbl[ix];
        pevent2 = &OSEventTbl[ix_next];
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 8003774:	2000      	movs	r0, #0
        pevent1->OSEventPtr     = pevent2;
#if OS_EVENT_NAME_EN > 0u
        pevent1->OSEventName    = (INT8U *)(void *)"?";     /* Unknown name                            */
 8003776:	493a      	ldr	r1, [pc, #232]	; (8003860 <OSInit+0x1a0>)
    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
        ix_next = ix + 1u;
        pevent1 = &OSEventTbl[ix];
        pevent2 = &OSEventTbl[ix_next];
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 8003778:	f803 0c18 	strb.w	r0, [r3, #-24]
        pevent1->OSEventPtr     = pevent2;
 800377c:	f843 3c14 	str.w	r3, [r3, #-20]
#if OS_EVENT_NAME_EN > 0u
        pevent1->OSEventName    = (INT8U *)(void *)"?";     /* Unknown name                            */
 8003780:	f843 1c04 	str.w	r1, [r3, #-4]
 8003784:	3318      	adds	r3, #24
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 8003786:	4293      	cmp	r3, r2
 8003788:	d1f6      	bne.n	8003778 <OSInit+0xb8>
#if OS_EVENT_NAME_EN > 0u
        pevent1->OSEventName    = (INT8U *)(void *)"?";     /* Unknown name                            */
#endif
    }
    pevent1                         = &OSEventTbl[ix];
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 800378a:	4b38      	ldr	r3, [pc, #224]	; (800386c <OSInit+0x1ac>)
 800378c:	2400      	movs	r4, #0
 800378e:	f883 41c8 	strb.w	r4, [r3, #456]	; 0x1c8
    pevent1->OSEventPtr             = (OS_EVENT *)0;         //last ecb
 8003792:	f8c3 41cc 	str.w	r4, [r3, #460]	; 0x1cc
#if OS_EVENT_NAME_EN > 0u
    pevent1->OSEventName            = (INT8U *)(void *)"?"; /* Unknown name                            */
 8003796:	4a32      	ldr	r2, [pc, #200]	; (8003860 <OSInit+0x1a0>)
 8003798:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 800379c:	4a34      	ldr	r2, [pc, #208]	; (8003870 <OSInit+0x1b0>)
 800379e:	6013      	str	r3, [r2, #0]
    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 80037a0:	f000 f9c6 	bl	8003b30 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
    OS_MemInit();                                                /* Initialize the memory manager            */
 80037a4:	f000 f9fa 	bl	8003b9c <OS_MemInit>
#endif

#if (OS_Q_EN > 0u) && (OS_MAX_QS > 0u)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 80037a8:	f000 fa1c 	bl	8003be4 <OS_QInit>
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskIdle,
 80037ac:	4a31      	ldr	r2, [pc, #196]	; (8003874 <OSInit+0x1b4>)
 80037ae:	2603      	movs	r6, #3
 80037b0:	9604      	str	r6, [sp, #16]
 80037b2:	9403      	str	r4, [sp, #12]
 80037b4:	2580      	movs	r5, #128	; 0x80
 80037b6:	9502      	str	r5, [sp, #8]
 80037b8:	f5a2 73fe 	sub.w	r3, r2, #508	; 0x1fc
 80037bc:	9301      	str	r3, [sp, #4]
 80037be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	233f      	movs	r3, #63	; 0x3f
 80037c6:	4621      	mov	r1, r4
 80037c8:	482b      	ldr	r0, [pc, #172]	; (8003878 <OSInit+0x1b8>)
 80037ca:	f000 fcb7 	bl	800413c <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)(void *)"uC/OS-II Idle", &err);
 80037ce:	f10d 021f 	add.w	r2, sp, #31
 80037d2:	492a      	ldr	r1, [pc, #168]	; (800387c <OSInit+0x1bc>)
 80037d4:	203f      	movs	r0, #63	; 0x3f
 80037d6:	f000 fb6f 	bl	8003eb8 <OSTaskNameSet>
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskStat,
 80037da:	4a29      	ldr	r2, [pc, #164]	; (8003880 <OSInit+0x1c0>)
 80037dc:	9604      	str	r6, [sp, #16]
 80037de:	9403      	str	r4, [sp, #12]
 80037e0:	9502      	str	r5, [sp, #8]
 80037e2:	f5a2 73fe 	sub.w	r3, r2, #508	; 0x1fc
 80037e6:	9301      	str	r3, [sp, #4]
 80037e8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	233e      	movs	r3, #62	; 0x3e
 80037f0:	4621      	mov	r1, r4
 80037f2:	4824      	ldr	r0, [pc, #144]	; (8003884 <OSInit+0x1c4>)
 80037f4:	f000 fca2 	bl	800413c <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)(void *)"uC/OS-II Stat", &err);
 80037f8:	f10d 021f 	add.w	r2, sp, #31
 80037fc:	4922      	ldr	r1, [pc, #136]	; (8003888 <OSInit+0x1c8>)
 80037fe:	203e      	movs	r0, #62	; 0x3e
 8003800:	f000 fb5a 	bl	8003eb8 <OSTaskNameSet>
#if OS_TASK_STAT_EN > 0u
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
#endif

#if OS_TMR_EN > 0u
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
 8003804:	f000 fe0e 	bl	8004424 <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 8003808:	f7ff fc20 	bl	800304c <OSInitHookEnd>

#if OS_DEBUG_EN > 0u
    OSDebugInit();
 800380c:	f7ff fd62 	bl	80032d4 <OSDebugInit>
#endif
}
 8003810:	b008      	add	sp, #32
 8003812:	bd70      	pop	{r4, r5, r6, pc}
 8003814:	20002fb8 	.word	0x20002fb8
 8003818:	20002fac 	.word	0x20002fac
 800381c:	200021b4 	.word	0x200021b4
 8003820:	2000272d 	.word	0x2000272d
 8003824:	200021bd 	.word	0x200021bd
 8003828:	2000271c 	.word	0x2000271c
 800382c:	200021c0 	.word	0x200021c0
 8003830:	20003c38 	.word	0x20003c38
 8003834:	20002724 	.word	0x20002724
 8003838:	20003b34 	.word	0x20003b34
 800383c:	200021bc 	.word	0x200021bc
 8003840:	2000279c 	.word	0x2000279c
 8003844:	2000279f 	.word	0x2000279f
 8003848:	20002498 	.word	0x20002498
 800384c:	200021c6 	.word	0x200021c6
 8003850:	20002794 	.word	0x20002794
 8003854:	20002fb0 	.word	0x20002fb0
 8003858:	200033a0 	.word	0x200033a0
 800385c:	20003b38 	.word	0x20003b38
 8003860:	080075c8 	.word	0x080075c8
 8003864:	2000249c 	.word	0x2000249c
 8003868:	20002728 	.word	0x20002728
 800386c:	200031c0 	.word	0x200031c0
 8003870:	20002fa8 	.word	0x20002fa8
 8003874:	200031bc 	.word	0x200031bc
 8003878:	08003301 	.word	0x08003301
 800387c:	080075cc 	.word	0x080075cc
 8003880:	20002718 	.word	0x20002718
 8003884:	08003995 	.word	0x08003995
 8003888:	080075dc 	.word	0x080075dc

0800388c <OS_MemCopy>:

void  OS_MemCopy (INT8U  *pdest,
                  INT8U  *psrc,
                  INT16U  size)
{
    while (size > 0u) {
 800388c:	b162      	cbz	r2, 80038a8 <OS_MemCopy+0x1c>
*/

void  OS_MemCopy (INT8U  *pdest,
                  INT8U  *psrc,
                  INT16U  size)
{
 800388e:	b410      	push	{r4}
 8003890:	1e43      	subs	r3, r0, #1
 8003892:	1e54      	subs	r4, r2, #1
 8003894:	fa10 f084 	uxtah	r0, r0, r4
    while (size > 0u) {
        *pdest++ = *psrc++;
 8003898:	f811 2b01 	ldrb.w	r2, [r1], #1
 800389c:	f803 2f01 	strb.w	r2, [r3, #1]!

void  OS_MemCopy (INT8U  *pdest,
                  INT8U  *psrc,
                  INT16U  size)
{
    while (size > 0u) {
 80038a0:	4283      	cmp	r3, r0
 80038a2:	d1f9      	bne.n	8003898 <OS_MemCopy+0xc>
        *pdest++ = *psrc++;
        size--;
    }
}
 80038a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop

080038ac <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 80038ac:	b510      	push	{r4, lr}
    OS_CPU_SR  cpu_sr = 0u;
#endif



    OS_ENTER_CRITICAL();
 80038ae:	f7fc fcbf 	bl	8000230 <OS_CPU_SR_Save>
 80038b2:	4604      	mov	r4, r0
    if (OSIntNesting == 0u) {                          /* Schedule only if all ISRs done and ...       */
 80038b4:	4b0f      	ldr	r3, [pc, #60]	; (80038f4 <OS_Sched+0x48>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	b9c3      	cbnz	r3, 80038ec <OS_Sched+0x40>
        if (OSLockNesting == 0u) {                     /* ... scheduler is not locked                  */
 80038ba:	4b0f      	ldr	r3, [pc, #60]	; (80038f8 <OS_Sched+0x4c>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	b9ab      	cbnz	r3, 80038ec <OS_Sched+0x40>
            OS_SchedNew();
 80038c0:	f7ff fd0a 	bl	80032d8 <OS_SchedNew>
            OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 80038c4:	4b0d      	ldr	r3, [pc, #52]	; (80038fc <OS_Sched+0x50>)
 80038c6:	781a      	ldrb	r2, [r3, #0]
 80038c8:	4b0d      	ldr	r3, [pc, #52]	; (8003900 <OS_Sched+0x54>)
 80038ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038ce:	490d      	ldr	r1, [pc, #52]	; (8003904 <OS_Sched+0x58>)
 80038d0:	600b      	str	r3, [r1, #0]
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 80038d2:	490d      	ldr	r1, [pc, #52]	; (8003908 <OS_Sched+0x5c>)
 80038d4:	7809      	ldrb	r1, [r1, #0]
 80038d6:	4291      	cmp	r1, r2
 80038d8:	d008      	beq.n	80038ec <OS_Sched+0x40>
#if OS_TASK_PROFILE_EN > 0u
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 80038da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038dc:	3201      	adds	r2, #1
 80038de:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 80038e0:	4a0a      	ldr	r2, [pc, #40]	; (800390c <OS_Sched+0x60>)
 80038e2:	6813      	ldr	r3, [r2, #0]
 80038e4:	3301      	adds	r3, #1
 80038e6:	6013      	str	r3, [r2, #0]
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
                OS_TLS_TaskSw();
#endif
#endif

                OS_TASK_SW();                          /* Perform a context switch                     */
 80038e8:	f7fc fcbc 	bl	8000264 <OSCtxSw>
            }
        }
    }
    OS_EXIT_CRITICAL();
 80038ec:	4620      	mov	r0, r4
 80038ee:	f7fc fca3 	bl	8000238 <OS_CPU_SR_Restore>
 80038f2:	bd10      	pop	{r4, pc}
 80038f4:	20002fac 	.word	0x20002fac
 80038f8:	200021b4 	.word	0x200021b4
 80038fc:	200021c6 	.word	0x200021c6
 8003900:	20003b38 	.word	0x20003b38
 8003904:	20002794 	.word	0x20002794
 8003908:	20002498 	.word	0x20002498
 800390c:	2000271c 	.word	0x2000271c

08003910 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedUnlock (void)
{
 8003910:	b508      	push	{r3, lr}
    OS_CPU_SR  cpu_sr = 0u;
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 8003912:	4b0f      	ldr	r3, [pc, #60]	; (8003950 <OSSchedUnlock+0x40>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d119      	bne.n	800394e <OSSchedUnlock+0x3e>
        OS_ENTER_CRITICAL();
 800391a:	f7fc fc89 	bl	8000230 <OS_CPU_SR_Save>
        if (OSIntNesting == 0u) {                          /* Can't call from an ISR                   */
 800391e:	4b0d      	ldr	r3, [pc, #52]	; (8003954 <OSSchedUnlock+0x44>)
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	b993      	cbnz	r3, 800394a <OSSchedUnlock+0x3a>
            if (OSLockNesting > 0u) {                      /* Do not decrement if already 0            */
 8003924:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <OSSchedUnlock+0x48>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	b163      	cbz	r3, 8003944 <OSSchedUnlock+0x34>
                OSLockNesting--;                           /* Decrement lock nesting level             */
 800392a:	3b01      	subs	r3, #1
 800392c:	b2db      	uxtb	r3, r3
 800392e:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <OSSchedUnlock+0x48>)
 8003930:	7013      	strb	r3, [r2, #0]
                if (OSLockNesting == 0u) {                 /* See if scheduler is enabled              */
 8003932:	b923      	cbnz	r3, 800393e <OSSchedUnlock+0x2e>
                    OS_EXIT_CRITICAL();
 8003934:	f7fc fc80 	bl	8000238 <OS_CPU_SR_Restore>
                    OS_Sched();                            /* See if a HPT is ready                    */
 8003938:	f7ff ffb8 	bl	80038ac <OS_Sched>
 800393c:	bd08      	pop	{r3, pc}
                } else {
                    OS_EXIT_CRITICAL();
 800393e:	f7fc fc7b 	bl	8000238 <OS_CPU_SR_Restore>
 8003942:	bd08      	pop	{r3, pc}
                }
            } else {
                OS_EXIT_CRITICAL();
 8003944:	f7fc fc78 	bl	8000238 <OS_CPU_SR_Restore>
 8003948:	bd08      	pop	{r3, pc}
            }
        } else {
            OS_EXIT_CRITICAL();
 800394a:	f7fc fc75 	bl	8000238 <OS_CPU_SR_Restore>
 800394e:	bd08      	pop	{r3, pc}
 8003950:	200021bd 	.word	0x200021bd
 8003954:	20002fac 	.word	0x20002fac
 8003958:	200021b4 	.word	0x200021b4

0800395c <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStatStkChk (void)
{
 800395c:	b530      	push	{r4, r5, lr}
 800395e:	b083      	sub	sp, #12
 8003960:	2400      	movs	r4, #0


    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
        err = OSTaskStkChk(prio, &stk_data);
        if (err == OS_ERR_NONE) {
            ptcb = OSTCBPrioTbl[prio];
 8003962:	4d0b      	ldr	r5, [pc, #44]	; (8003990 <OS_TaskStatStkChk+0x34>)
    INT8U        err;
    INT8U        prio;


    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
        err = OSTaskStkChk(prio, &stk_data);
 8003964:	4669      	mov	r1, sp
 8003966:	b2e0      	uxtb	r0, r4
 8003968:	f000 fb20 	bl	8003fac <OSTaskStkChk>
        if (err == OS_ERR_NONE) {
 800396c:	b958      	cbnz	r0, 8003986 <OS_TaskStatStkChk+0x2a>
            ptcb = OSTCBPrioTbl[prio];
 800396e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 8003972:	b143      	cbz	r3, 8003986 <OS_TaskStatStkChk+0x2a>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 8003974:	2b01      	cmp	r3, #1
 8003976:	d006      	beq.n	8003986 <OS_TaskStatStkChk+0x2a>
#if OS_TASK_PROFILE_EN > 0u
                    #if OS_STK_GROWTH == 1u
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 8003978:	68d9      	ldr	r1, [r3, #12]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8003980:	649a      	str	r2, [r3, #72]	; 0x48
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store number of entries used   */
 8003982:	9a01      	ldr	r2, [sp, #4]
 8003984:	64da      	str	r2, [r3, #76]	; 0x4c
 8003986:	3401      	adds	r4, #1
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 8003988:	2c40      	cmp	r4, #64	; 0x40
 800398a:	d1eb      	bne.n	8003964 <OS_TaskStatStkChk+0x8>
#endif
                }
            }
        }
    }
}
 800398c:	b003      	add	sp, #12
 800398e:	bd30      	pop	{r4, r5, pc}
 8003990:	20003b38 	.word	0x20003b38

08003994 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
void  OS_TaskStat (void *p_arg)
{
 8003994:	b570      	push	{r4, r5, r6, lr}
#endif



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 8003996:	4b1f      	ldr	r3, [pc, #124]	; (8003a14 <OS_TaskStat+0x80>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	b93b      	cbnz	r3, 80039ac <OS_TaskStat+0x18>
        OSTimeDly(2u * OS_TICKS_PER_SEC / 10u);  /* Wait until statistic task is ready                 */
 800399c:	2514      	movs	r5, #20
#endif



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 800399e:	4c1d      	ldr	r4, [pc, #116]	; (8003a14 <OS_TaskStat+0x80>)
        OSTimeDly(2u * OS_TICKS_PER_SEC / 10u);  /* Wait until statistic task is ready                 */
 80039a0:	4628      	mov	r0, r5
 80039a2:	f000 fc1f 	bl	80041e4 <OSTimeDly>
#endif



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 80039a6:	7823      	ldrb	r3, [r4, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0f9      	beq.n	80039a0 <OS_TaskStat+0xc>
        OSTimeDly(2u * OS_TICKS_PER_SEC / 10u);  /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100uL;
 80039ac:	4a1a      	ldr	r2, [pc, #104]	; (8003a18 <OS_TaskStat+0x84>)
 80039ae:	6813      	ldr	r3, [r2, #0]
 80039b0:	491a      	ldr	r1, [pc, #104]	; (8003a1c <OS_TaskStat+0x88>)
 80039b2:	fba1 1303 	umull	r1, r3, r1, r3
 80039b6:	095b      	lsrs	r3, r3, #5
 80039b8:	6013      	str	r3, [r2, #0]
    if (OSIdleCtrMax == 0uL) {
 80039ba:	b92b      	cbnz	r3, 80039c8 <OS_TaskStat+0x34>
        OSCPUUsage = 0u;
 80039bc:	2200      	movs	r2, #0
 80039be:	4b18      	ldr	r3, [pc, #96]	; (8003a20 <OS_TaskStat+0x8c>)
 80039c0:	701a      	strb	r2, [r3, #0]
#if OS_TASK_SUSPEND_EN > 0u
        (void)OSTaskSuspend(OS_PRIO_SELF);
 80039c2:	20ff      	movs	r0, #255	; 0xff
 80039c4:	f000 fb2e 	bl	8004024 <OSTaskSuspend>
        for (;;) {
            OSTimeDly(OS_TICKS_PER_SEC);
        }
#endif
    }
    OS_ENTER_CRITICAL();
 80039c8:	f7fc fc32 	bl	8000230 <OS_CPU_SR_Save>
    OSIdleCtr = OSIdleCtrMax * 100uL;            /* Set initial CPU usage as 0%                        */
 80039cc:	4b12      	ldr	r3, [pc, #72]	; (8003a18 <OS_TaskStat+0x84>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	2364      	movs	r3, #100	; 0x64
 80039d2:	fb03 f302 	mul.w	r3, r3, r2
 80039d6:	4a13      	ldr	r2, [pc, #76]	; (8003a24 <OS_TaskStat+0x90>)
 80039d8:	6013      	str	r3, [r2, #0]
    OS_EXIT_CRITICAL();
 80039da:	f7fc fc2d 	bl	8000238 <OS_CPU_SR_Restore>
    for (;;) {
        OS_ENTER_CRITICAL();
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 80039de:	4d11      	ldr	r5, [pc, #68]	; (8003a24 <OS_TaskStat+0x90>)
 80039e0:	4c11      	ldr	r4, [pc, #68]	; (8003a28 <OS_TaskStat+0x94>)
        OSIdleCtr    = 0uL;                      /* Reset the idle counter for the next second         */
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100uL - OSIdleCtrRun / OSIdleCtrMax);
 80039e2:	4e0f      	ldr	r6, [pc, #60]	; (8003a20 <OS_TaskStat+0x8c>)
    }
    OS_ENTER_CRITICAL();
    OSIdleCtr = OSIdleCtrMax * 100uL;            /* Set initial CPU usage as 0%                        */
    OS_EXIT_CRITICAL();
    for (;;) {
        OS_ENTER_CRITICAL();
 80039e4:	f7fc fc24 	bl	8000230 <OS_CPU_SR_Save>
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 80039e8:	682b      	ldr	r3, [r5, #0]
 80039ea:	6023      	str	r3, [r4, #0]
        OSIdleCtr    = 0uL;                      /* Reset the idle counter for the next second         */
 80039ec:	2300      	movs	r3, #0
 80039ee:	602b      	str	r3, [r5, #0]
        OS_EXIT_CRITICAL();
 80039f0:	f7fc fc22 	bl	8000238 <OS_CPU_SR_Restore>
        OSCPUUsage   = (INT8U)(100uL - OSIdleCtrRun / OSIdleCtrMax);
 80039f4:	6823      	ldr	r3, [r4, #0]
 80039f6:	4a08      	ldr	r2, [pc, #32]	; (8003a18 <OS_TaskStat+0x84>)
 80039f8:	6812      	ldr	r2, [r2, #0]
 80039fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80039fe:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003a02:	7033      	strb	r3, [r6, #0]
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 8003a04:	f7ff fb34 	bl	8003070 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 8003a08:	f7ff ffa8 	bl	800395c <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10u);       /* Accumulate OSIdleCtr for the next 1/10 second      */
 8003a0c:	200a      	movs	r0, #10
 8003a0e:	f000 fbe9 	bl	80041e4 <OSTimeDly>
 8003a12:	e7e7      	b.n	80039e4 <OS_TaskStat+0x50>
 8003a14:	20003b34 	.word	0x20003b34
 8003a18:	20002724 	.word	0x20002724
 8003a1c:	51eb851f 	.word	0x51eb851f
 8003a20:	2000272c 	.word	0x2000272c
 8003a24:	200021c0 	.word	0x200021c0
 8003a28:	20003c38 	.word	0x20003c38

08003a2c <OS_TCBInit>:
                   OS_STK  *pbos,
                   INT16U   id,
                   INT32U   stk_size,
                   void    *pext,
                   INT16U   opt)
{
 8003a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a30:	4606      	mov	r6, r0
 8003a32:	460d      	mov	r5, r1
 8003a34:	4690      	mov	r8, r2
 8003a36:	461f      	mov	r7, r3
    INT8U      j;
#endif
#endif


    OS_ENTER_CRITICAL();
 8003a38:	f7fc fbfa 	bl	8000230 <OS_CPU_SR_Save>
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 8003a3c:	4b35      	ldr	r3, [pc, #212]	; (8003b14 <OS_TCBInit+0xe8>)
 8003a3e:	681c      	ldr	r4, [r3, #0]
    if (ptcb != (OS_TCB *)0) {
 8003a40:	2c00      	cmp	r4, #0
 8003a42:	d061      	beq.n	8003b08 <OS_TCBInit+0xdc>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 8003a44:	6962      	ldr	r2, [r4, #20]
 8003a46:	601a      	str	r2, [r3, #0]
        OS_EXIT_CRITICAL();
 8003a48:	f7fc fbf6 	bl	8000238 <OS_CPU_SR_Restore>
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 8003a4c:	6025      	str	r5, [r4, #0]
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 8003a4e:	f884 6036 	strb.w	r6, [r4, #54]	; 0x36
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 8003a52:	2500      	movs	r5, #0
 8003a54:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 8003a58:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
        ptcb->OSTCBDly           = 0u;                     /* Task is not delayed                      */
 8003a5c:	6325      	str	r5, [r4, #48]	; 0x30

#if OS_TASK_CREATE_EXT_EN > 0u
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 8003a5e:	9b07      	ldr	r3, [sp, #28]
 8003a60:	6063      	str	r3, [r4, #4]
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 8003a62:	9b06      	ldr	r3, [sp, #24]
 8003a64:	60e3      	str	r3, [r4, #12]
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 8003a66:	f8c4 8008 	str.w	r8, [r4, #8]
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 8003a6a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8003a6e:	8223      	strh	r3, [r4, #16]
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 8003a70:	8267      	strh	r7, [r4, #18]
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0u
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 8003a72:	f884 503b 	strb.w	r5, [r4, #59]	; 0x3b
#endif

#if OS_LOWEST_PRIO <= 63u                                         /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)(prio >> 3u);
 8003a76:	08f2      	lsrs	r2, r6, #3
 8003a78:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
        ptcb->OSTCBX             = (INT8U)(prio & 0x07u);
 8003a7c:	f006 0107 	and.w	r1, r6, #7
 8003a80:	f884 1037 	strb.w	r1, [r4, #55]	; 0x37
#else                                                             /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)((INT8U)(prio >> 4u) & 0xFFu);
        ptcb->OSTCBX             = (INT8U) (prio & 0x0Fu);
#endif
                                                                  /* Pre-compute BitX and BitY         */
        ptcb->OSTCBBitY          = (OS_PRIO)(1uL << ptcb->OSTCBY);
 8003a84:	2301      	movs	r3, #1
 8003a86:	fa03 f202 	lsl.w	r2, r3, r2
 8003a8a:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
        ptcb->OSTCBBitX          = (OS_PRIO)(1uL << ptcb->OSTCBX);
 8003a8e:	408b      	lsls	r3, r1
 8003a90:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 8003a94:	61e5      	str	r5, [r4, #28]
#if (OS_EVENT_MULTI_EN > 0u)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 8003a96:	6225      	str	r5, [r4, #32]
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u) && (OS_TASK_DEL_EN > 0u)
        ptcb->OSTCBFlagNode      = (OS_FLAG_NODE *)0;      /* Task is not pending on an event flag     */
 8003a98:	62a5      	str	r5, [r4, #40]	; 0x28
#endif

#if (OS_MBOX_EN > 0u) || ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u))
        ptcb->OSTCBMsg           = (void *)0;              /* No message received                      */
 8003a9a:	6265      	str	r5, [r4, #36]	; 0x24
#endif

#if OS_TASK_PROFILE_EN > 0u
        ptcb->OSTCBCtxSwCtr      = 0uL;                    /* Initialize profiling variables           */
 8003a9c:	63e5      	str	r5, [r4, #60]	; 0x3c
        ptcb->OSTCBCyclesStart   = 0uL;
 8003a9e:	6465      	str	r5, [r4, #68]	; 0x44
        ptcb->OSTCBCyclesTot     = 0uL;
 8003aa0:	6425      	str	r5, [r4, #64]	; 0x40
        ptcb->OSTCBStkBase       = (OS_STK *)0;
 8003aa2:	64a5      	str	r5, [r4, #72]	; 0x48
        ptcb->OSTCBStkUsed       = 0uL;
 8003aa4:	64e5      	str	r5, [r4, #76]	; 0x4c
#endif

#if OS_TASK_NAME_EN > 0u
        ptcb->OSTCBTaskName      = (INT8U *)(void *)"?";
 8003aa6:	4b1c      	ldr	r3, [pc, #112]	; (8003b18 <OS_TCBInit+0xec>)
 8003aa8:	6523      	str	r3, [r4, #80]	; 0x50
#endif

#if OS_TASK_REG_TBL_SIZE > 0u                              /* Initialize the task variables            */
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
            ptcb->OSTCBRegTbl[i] = 0u;
 8003aaa:	6565      	str	r5, [r4, #84]	; 0x54
        }
#endif

        OSTCBInitHook(ptcb);
 8003aac:	4620      	mov	r0, r4
 8003aae:	f7ff fbd1 	bl	8003254 <OSTCBInitHook>

        OS_ENTER_CRITICAL();
 8003ab2:	f7fc fbbd 	bl	8000230 <OS_CPU_SR_Save>
        OSTCBPrioTbl[prio] = ptcb;
 8003ab6:	4b19      	ldr	r3, [pc, #100]	; (8003b1c <OS_TCBInit+0xf0>)
 8003ab8:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
        OS_EXIT_CRITICAL();
 8003abc:	f7fc fbbc 	bl	8000238 <OS_CPU_SR_Restore>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	f7ff fac5 	bl	8003050 <OSTaskCreateHook>
        }
        OS_TLS_TaskCreate(ptcb);                           /* Call TLS hook                            */
#endif
#endif

        OS_ENTER_CRITICAL();
 8003ac6:	f7fc fbb3 	bl	8000230 <OS_CPU_SR_Save>
        ptcb->OSTCBNext = OSTCBList;                       /* Link into TCB chain                      */
 8003aca:	4b15      	ldr	r3, [pc, #84]	; (8003b20 <OS_TCBInit+0xf4>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6163      	str	r3, [r4, #20]
        ptcb->OSTCBPrev = (OS_TCB *)0;         
 8003ad0:	61a5      	str	r5, [r4, #24]
        if (OSTCBList != (OS_TCB *)0) {
 8003ad2:	b103      	cbz	r3, 8003ad6 <OS_TCBInit+0xaa>
            OSTCBList->OSTCBPrev = ptcb;
 8003ad4:	619c      	str	r4, [r3, #24]
        }
        OSTCBList               = ptcb;
 8003ad6:	4b12      	ldr	r3, [pc, #72]	; (8003b20 <OS_TCBInit+0xf4>)
 8003ad8:	601c      	str	r4, [r3, #0]
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 8003ada:	4a12      	ldr	r2, [pc, #72]	; (8003b24 <OS_TCBInit+0xf8>)
 8003adc:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
 8003ae0:	7813      	ldrb	r3, [r2, #0]
 8003ae2:	430b      	orrs	r3, r1
 8003ae4:	7013      	strb	r3, [r2, #0]
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8003ae6:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8003aea:	490f      	ldr	r1, [pc, #60]	; (8003b28 <OS_TCBInit+0xfc>)
 8003aec:	5c8d      	ldrb	r5, [r1, r2]
 8003aee:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8003af2:	432b      	orrs	r3, r5
 8003af4:	548b      	strb	r3, [r1, r2]
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 8003af6:	4a0d      	ldr	r2, [pc, #52]	; (8003b2c <OS_TCBInit+0x100>)
 8003af8:	7813      	ldrb	r3, [r2, #0]
 8003afa:	3301      	adds	r3, #1
 8003afc:	7013      	strb	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 8003afe:	f7fc fb9b 	bl	8000238 <OS_CPU_SR_Restore>
        return (OS_ERR_NONE);
 8003b02:	2000      	movs	r0, #0
 8003b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    OS_EXIT_CRITICAL();
 8003b08:	f7fc fb96 	bl	8000238 <OS_CPU_SR_Restore>
    return (OS_ERR_TASK_NO_MORE_TCB);
 8003b0c:	2042      	movs	r0, #66	; 0x42
}
 8003b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b12:	bf00      	nop
 8003b14:	20002728 	.word	0x20002728
 8003b18:	080075c8 	.word	0x080075c8
 8003b1c:	20003b38 	.word	0x20003b38
 8003b20:	2000249c 	.word	0x2000249c
 8003b24:	2000279c 	.word	0x2000279c
 8003b28:	200027a0 	.word	0x200027a0
 8003b2c:	2000272d 	.word	0x2000272d

08003b30 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 8003b30:	b510      	push	{r4, lr}
    INT16U        ix_next;
    OS_FLAG_GRP  *pgrp1;
    OS_FLAG_GRP  *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 8003b32:	4c0f      	ldr	r4, [pc, #60]	; (8003b70 <OS_FlagInit+0x40>)
 8003b34:	2150      	movs	r1, #80	; 0x50
 8003b36:	4620      	mov	r0, r4
 8003b38:	f7ff fdb6 	bl	80036a8 <OS_MemClr>
 8003b3c:	f104 0310 	add.w	r3, r4, #16
 8003b40:	f104 0050 	add.w	r0, r4, #80	; 0x50
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
        ix_next = ix + 1u;
        pgrp1 = &OSFlagTbl[ix];
        pgrp2 = &OSFlagTbl[ix_next];
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 8003b44:	2100      	movs	r1, #0
        pgrp1->OSFlagWaitList = (void *)pgrp2;
#if OS_FLAG_NAME_EN > 0u
        pgrp1->OSFlagName     = (INT8U *)(void *)"?";               /* Unknown name                    */
 8003b46:	4a0b      	ldr	r2, [pc, #44]	; (8003b74 <OS_FlagInit+0x44>)
    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
        ix_next = ix + 1u;
        pgrp1 = &OSFlagTbl[ix];
        pgrp2 = &OSFlagTbl[ix_next];
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 8003b48:	f803 1c10 	strb.w	r1, [r3, #-16]
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 8003b4c:	f843 3c0c 	str.w	r3, [r3, #-12]
#if OS_FLAG_NAME_EN > 0u
        pgrp1->OSFlagName     = (INT8U *)(void *)"?";               /* Unknown name                    */
 8003b50:	f843 2c04 	str.w	r2, [r3, #-4]
 8003b54:	3310      	adds	r3, #16
    OS_FLAG_GRP  *pgrp1;
    OS_FLAG_GRP  *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
 8003b56:	4283      	cmp	r3, r0
 8003b58:	d1f6      	bne.n	8003b48 <OS_FlagInit+0x18>
#if OS_FLAG_NAME_EN > 0u
        pgrp1->OSFlagName     = (INT8U *)(void *)"?";               /* Unknown name                    */
#endif
    }
    pgrp1                 = &OSFlagTbl[ix];
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 8003b5a:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <OS_FlagInit+0x40>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    pgrp1->OSFlagWaitList = (void *)0;
 8003b62:	645a      	str	r2, [r3, #68]	; 0x44
#if OS_FLAG_NAME_EN > 0u
    pgrp1->OSFlagName     = (INT8U *)(void *)"?";                   /* Unknown name                    */
 8003b64:	4a03      	ldr	r2, [pc, #12]	; (8003b74 <OS_FlagInit+0x44>)
 8003b66:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 8003b68:	4a03      	ldr	r2, [pc, #12]	; (8003b78 <OS_FlagInit+0x48>)
 8003b6a:	6013      	str	r3, [r2, #0]
 8003b6c:	bd10      	pop	{r4, pc}
 8003b6e:	bf00      	nop
 8003b70:	200021c8 	.word	0x200021c8
 8003b74:	080075c8 	.word	0x080075c8
 8003b78:	20003b30 	.word	0x20003b30

08003b7c <OS_FlagUnlink>:
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 8003b7c:	6842      	ldr	r2, [r0, #4]
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 8003b7e:	6803      	ldr	r3, [r0, #0]
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 8003b80:	b92a      	cbnz	r2, 8003b8e <OS_FlagUnlink+0x12>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 8003b82:	68c2      	ldr	r2, [r0, #12]
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 8003b84:	6053      	str	r3, [r2, #4]
        if (pnode_next != (OS_FLAG_NODE *)0) {
 8003b86:	b12b      	cbz	r3, 8003b94 <OS_FlagUnlink+0x18>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 8003b88:	2200      	movs	r2, #0
 8003b8a:	605a      	str	r2, [r3, #4]
 8003b8c:	e002      	b.n	8003b94 <OS_FlagUnlink+0x18>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 8003b8e:	6013      	str	r3, [r2, #0]
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 8003b90:	b103      	cbz	r3, 8003b94 <OS_FlagUnlink+0x18>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 8003b92:	605a      	str	r2, [r3, #4]
        }
    }
#if OS_TASK_DEL_EN > 0u
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 8003b94:	6883      	ldr	r3, [r0, #8]
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 8003b96:	2200      	movs	r2, #0
 8003b98:	629a      	str	r2, [r3, #40]	; 0x28
 8003b9a:	4770      	bx	lr

08003b9c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 8003b9c:	b510      	push	{r4, lr}
#if OS_MAX_MEM_PART >= 2u
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 8003b9e:	4c0e      	ldr	r4, [pc, #56]	; (8003bd8 <OS_MemInit+0x3c>)
 8003ba0:	2178      	movs	r1, #120	; 0x78
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	f7ff fd80 	bl	80036a8 <OS_MemClr>
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
        pmem                = &OSMemTbl[i];               /* Point to memory control block (MCB)       */
        pmem->OSMemFreeList = (void *)&OSMemTbl[i + 1u];  /* Chain list of free partitions             */
 8003ba8:	f104 0318 	add.w	r3, r4, #24
 8003bac:	6063      	str	r3, [r4, #4]
#if OS_MEM_NAME_EN > 0u
        pmem->OSMemName  = (INT8U *)(void *)"?";
 8003bae:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <OS_MemInit+0x40>)
 8003bb0:	6163      	str	r3, [r4, #20]


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
        pmem                = &OSMemTbl[i];               /* Point to memory control block (MCB)       */
        pmem->OSMemFreeList = (void *)&OSMemTbl[i + 1u];  /* Chain list of free partitions             */
 8003bb2:	f104 0230 	add.w	r2, r4, #48	; 0x30
 8003bb6:	61e2      	str	r2, [r4, #28]
#if OS_MEM_NAME_EN > 0u
        pmem->OSMemName  = (INT8U *)(void *)"?";
 8003bb8:	62e3      	str	r3, [r4, #44]	; 0x2c


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
        pmem                = &OSMemTbl[i];               /* Point to memory control block (MCB)       */
        pmem->OSMemFreeList = (void *)&OSMemTbl[i + 1u];  /* Chain list of free partitions             */
 8003bba:	f104 0248 	add.w	r2, r4, #72	; 0x48
 8003bbe:	6362      	str	r2, [r4, #52]	; 0x34
#if OS_MEM_NAME_EN > 0u
        pmem->OSMemName  = (INT8U *)(void *)"?";
 8003bc0:	6463      	str	r3, [r4, #68]	; 0x44


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
        pmem                = &OSMemTbl[i];               /* Point to memory control block (MCB)       */
        pmem->OSMemFreeList = (void *)&OSMemTbl[i + 1u];  /* Chain list of free partitions             */
 8003bc2:	f104 0260 	add.w	r2, r4, #96	; 0x60
 8003bc6:	64e2      	str	r2, [r4, #76]	; 0x4c
#if OS_MEM_NAME_EN > 0u
        pmem->OSMemName  = (INT8U *)(void *)"?";
 8003bc8:	65e3      	str	r3, [r4, #92]	; 0x5c
#endif
    }
    pmem                = &OSMemTbl[i];
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 8003bca:	2200      	movs	r2, #0
 8003bcc:	6662      	str	r2, [r4, #100]	; 0x64
#if OS_MEM_NAME_EN > 0u
    pmem->OSMemName = (INT8U *)(void *)"?";
 8003bce:	6763      	str	r3, [r4, #116]	; 0x74
#endif

    OSMemFreeList   = &OSMemTbl[0];                       /* Point to beginning of free list           */
 8003bd0:	4b03      	ldr	r3, [pc, #12]	; (8003be0 <OS_MemInit+0x44>)
 8003bd2:	601c      	str	r4, [r3, #0]
 8003bd4:	bd10      	pop	{r4, pc}
 8003bd6:	bf00      	nop
 8003bd8:	200024a0 	.word	0x200024a0
 8003bdc:	080075c8 	.word	0x080075c8
 8003be0:	20002730 	.word	0x20002730

08003be4 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 8003be4:	b510      	push	{r4, lr}
    OS_Q    *pq1;
    OS_Q    *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 8003be6:	4c09      	ldr	r4, [pc, #36]	; (8003c0c <OS_QInit+0x28>)
 8003be8:	2160      	movs	r1, #96	; 0x60
 8003bea:	4620      	mov	r0, r4
 8003bec:	f7ff fd5c 	bl	80036a8 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
        ix_next = ix + 1u;
        pq1 = &OSQTbl[ix];
        pq2 = &OSQTbl[ix_next];
        pq1->OSQPtr = pq2;
 8003bf0:	f104 0218 	add.w	r2, r4, #24
 8003bf4:	4623      	mov	r3, r4
 8003bf6:	f843 2b30 	str.w	r2, [r3], #48
 8003bfa:	61a3      	str	r3, [r4, #24]
 8003bfc:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8003c00:	6323      	str	r3, [r4, #48]	; 0x30
    }
    pq1         = &OSQTbl[ix];
    pq1->OSQPtr = (OS_Q *)0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	64a3      	str	r3, [r4, #72]	; 0x48
    OSQFreeList = &OSQTbl[0];
 8003c06:	4b02      	ldr	r3, [pc, #8]	; (8003c10 <OS_QInit+0x2c>)
 8003c08:	601c      	str	r4, [r3, #0]
 8003c0a:	bd10      	pop	{r4, pc}
 8003c0c:	20002734 	.word	0x20002734
 8003c10:	20002798 	.word	0x20002798

08003c14 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 8003c14:	b538      	push	{r3, r4, r5, lr}
        OS_SAFETY_CRITICAL_EXCEPTION();
        return ((OS_EVENT *)0);
    }
#endif

    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
 8003c16:	4b0f      	ldr	r3, [pc, #60]	; (8003c54 <OSSemCreate+0x40>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	b9ab      	cbnz	r3, 8003c48 <OSSemCreate+0x34>
 8003c1c:	4605      	mov	r5, r0
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    }
    OS_ENTER_CRITICAL();
 8003c1e:	f7fc fb07 	bl	8000230 <OS_CPU_SR_Save>
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 8003c22:	4b0d      	ldr	r3, [pc, #52]	; (8003c58 <OSSemCreate+0x44>)
 8003c24:	681c      	ldr	r4, [r3, #0]
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 8003c26:	b18c      	cbz	r4, 8003c4c <OSSemCreate+0x38>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr; //next ecb link
 8003c28:	6862      	ldr	r2, [r4, #4]
 8003c2a:	601a      	str	r2, [r3, #0]
    }
    OS_EXIT_CRITICAL();
 8003c2c:	f7fc fb04 	bl	8000238 <OS_CPU_SR_Restore>
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 8003c30:	2303      	movs	r3, #3
 8003c32:	7023      	strb	r3, [r4, #0]
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 8003c34:	8125      	strh	r5, [r4, #8]
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 8003c36:	2300      	movs	r3, #0
 8003c38:	6063      	str	r3, [r4, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent->OSEventName    = (INT8U *)(void *)"?";
 8003c3a:	4b08      	ldr	r3, [pc, #32]	; (8003c5c <OSSemCreate+0x48>)
 8003c3c:	6163      	str	r3, [r4, #20]
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 8003c3e:	4620      	mov	r0, r4
 8003c40:	f7ff fd28 	bl	8003694 <OS_EventWaitListInit>
    }
    return (pevent);
 8003c44:	4620      	mov	r0, r4
 8003c46:	bd38      	pop	{r3, r4, r5, pc}
        return ((OS_EVENT *)0);
    }
#endif

    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 8003c48:	2000      	movs	r0, #0
 8003c4a:	bd38      	pop	{r3, r4, r5, pc}
    OS_ENTER_CRITICAL();
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr; //next ecb link
    }
    OS_EXIT_CRITICAL();
 8003c4c:	f7fc faf4 	bl	8000238 <OS_CPU_SR_Restore>
#if OS_EVENT_NAME_EN > 0u
        pevent->OSEventName    = (INT8U *)(void *)"?";
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    }
    return (pevent);
 8003c50:	2000      	movs	r0, #0
}
 8003c52:	bd38      	pop	{r3, r4, r5, pc}
 8003c54:	20002fac 	.word	0x20002fac
 8003c58:	20002fa8 	.word	0x20002fa8
 8003c5c:	080075c8 	.word	0x080075c8

08003c60 <OSSemPend>:
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return;
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 8003c60:	7803      	ldrb	r3, [r0, #0]
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	d002      	beq.n	8003c6c <OSSemPend+0xc>
        *perr = OS_ERR_EVENT_TYPE;
 8003c66:	2301      	movs	r3, #1
 8003c68:	7013      	strb	r3, [r2, #0]
        return;
 8003c6a:	4770      	bx	lr
    }
    if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
 8003c6c:	4b2b      	ldr	r3, [pc, #172]	; (8003d1c <OSSemPend+0xbc>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	b113      	cbz	r3, 8003c78 <OSSemPend+0x18>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 8003c72:	2302      	movs	r3, #2
 8003c74:	7013      	strb	r3, [r2, #0]
        return;
 8003c76:	4770      	bx	lr
    }
    if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
 8003c78:	4b29      	ldr	r3, [pc, #164]	; (8003d20 <OSSemPend+0xc0>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	b113      	cbz	r3, 8003c84 <OSSemPend+0x24>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 8003c7e:	230d      	movs	r3, #13
 8003c80:	7013      	strb	r3, [r2, #0]
 8003c82:	4770      	bx	lr
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT  *pevent,
                 INT32U     timeout,
                 INT8U     *perr)
{
 8003c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c88:	4615      	mov	r5, r2
 8003c8a:	460e      	mov	r6, r1
 8003c8c:	4604      	mov	r4, r0
    }
    if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
        return;
    }
    OS_ENTER_CRITICAL();
 8003c8e:	f7fc facf 	bl	8000230 <OS_CPU_SR_Save>
 8003c92:	4607      	mov	r7, r0
    if (pevent->OSEventCnt > 0u) {                    /* If sem. is positive, resource available ...   */
 8003c94:	8923      	ldrh	r3, [r4, #8]
 8003c96:	b13b      	cbz	r3, 8003ca8 <OSSemPend+0x48>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	8123      	strh	r3, [r4, #8]
        OS_EXIT_CRITICAL();
 8003c9c:	f7fc facc 	bl	8000238 <OS_CPU_SR_Restore>
        *perr = OS_ERR_NONE;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	702b      	strb	r3, [r5, #0]
        return;
 8003ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 8003ca8:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8003d24 <OSSemPend+0xc4>
 8003cac:	f8d8 3000 	ldr.w	r3, [r8]
 8003cb0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8003cb4:	f042 0201 	orr.w	r2, r2, #1
 8003cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 8003cc2:	631e      	str	r6, [r3, #48]	; 0x30
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	f7ff fc4d 	bl	8003564 <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
 8003cca:	4638      	mov	r0, r7
 8003ccc:	f7fc fab4 	bl	8000238 <OS_CPU_SR_Restore>
    OS_Sched();                                       /* Find next highest priority task ready         */
 8003cd0:	f7ff fdec 	bl	80038ac <OS_Sched>
    OS_ENTER_CRITICAL();
 8003cd4:	f7fc faac 	bl	8000230 <OS_CPU_SR_Save>
 8003cd8:	4606      	mov	r6, r0
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 8003cda:	f8d8 0000 	ldr.w	r0, [r8]
 8003cde:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003ce2:	b113      	cbz	r3, 8003cea <OSSemPend+0x8a>
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d003      	beq.n	8003cf0 <OSSemPend+0x90>
 8003ce8:	e005      	b.n	8003cf6 <OSSemPend+0x96>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 8003cea:	2300      	movs	r3, #0
 8003cec:	702b      	strb	r3, [r5, #0]
             break;
 8003cee:	e007      	b.n	8003d00 <OSSemPend+0xa0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 8003cf0:	230e      	movs	r3, #14
 8003cf2:	702b      	strb	r3, [r5, #0]
             break;
 8003cf4:	e004      	b.n	8003d00 <OSSemPend+0xa0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 8003cf6:	4621      	mov	r1, r4
 8003cf8:	f7ff fc60 	bl	80035bc <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 8003cfc:	230a      	movs	r3, #10
 8003cfe:	702b      	strb	r3, [r5, #0]
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 8003d00:	4b08      	ldr	r3, [pc, #32]	; (8003d24 <OSSemPend+0xc4>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 8003d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 8003d0e:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 8003d10:	621a      	str	r2, [r3, #32]
#endif
    OS_EXIT_CRITICAL();
 8003d12:	4630      	mov	r0, r6
 8003d14:	f7fc fa90 	bl	8000238 <OS_CPU_SR_Restore>
 8003d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d1c:	20002fac 	.word	0x20002fac
 8003d20:	200021b4 	.word	0x200021b4
 8003d24:	20002fb0 	.word	0x20002fb0

08003d28 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 8003d28:	b570      	push	{r4, r5, r6, lr}
#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 8003d2a:	7803      	ldrb	r3, [r0, #0]
 8003d2c:	2b03      	cmp	r3, #3
 8003d2e:	d120      	bne.n	8003d72 <OSSemPost+0x4a>
 8003d30:	4604      	mov	r4, r0
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
 8003d32:	f7fc fa7d 	bl	8000230 <OS_CPU_SR_Save>
 8003d36:	4606      	mov	r6, r0
    if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting for semaphore         */
 8003d38:	7aa5      	ldrb	r5, [r4, #10]
 8003d3a:	b165      	cbz	r5, 8003d56 <OSSemPost+0x2e>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	2201      	movs	r2, #1
 8003d40:	4619      	mov	r1, r3
 8003d42:	4620      	mov	r0, r4
 8003d44:	f7ff fc6a 	bl	800361c <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
 8003d48:	4630      	mov	r0, r6
 8003d4a:	f7fc fa75 	bl	8000238 <OS_CPU_SR_Restore>
        OS_Sched();                                   /* Find HPT ready to run                         */
 8003d4e:	f7ff fdad 	bl	80038ac <OS_Sched>
        return (OS_ERR_NONE);
 8003d52:	2500      	movs	r5, #0
 8003d54:	e00e      	b.n	8003d74 <OSSemPost+0x4c>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 8003d56:	8923      	ldrh	r3, [r4, #8]
 8003d58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d004      	beq.n	8003d6a <OSSemPost+0x42>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 8003d60:	3301      	adds	r3, #1
 8003d62:	8123      	strh	r3, [r4, #8]
        OS_EXIT_CRITICAL();
 8003d64:	f7fc fa68 	bl	8000238 <OS_CPU_SR_Restore>
        return (OS_ERR_NONE);
 8003d68:	e004      	b.n	8003d74 <OSSemPost+0x4c>
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
 8003d6a:	f7fc fa65 	bl	8000238 <OS_CPU_SR_Restore>
    return (OS_ERR_SEM_OVF);
 8003d6e:	2533      	movs	r5, #51	; 0x33
 8003d70:	e000      	b.n	8003d74 <OSSemPost+0x4c>
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
        return (OS_ERR_EVENT_TYPE);
 8003d72:	2501      	movs	r5, #1
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
}
 8003d74:	4628      	mov	r0, r5
 8003d76:	bd70      	pop	{r4, r5, r6, pc}

08003d78 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
INT8U  OSTaskDel (INT8U prio)
{
 8003d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    OS_CPU_SR     cpu_sr = 0u;
#endif



    if (OSIntNesting > 0u) {                            /* See if trying to delete from ISR            */
 8003d7a:	4b44      	ldr	r3, [pc, #272]	; (8003e8c <OSTaskDel+0x114>)
 8003d7c:	781c      	ldrb	r4, [r3, #0]
 8003d7e:	2c00      	cmp	r4, #0
 8003d80:	d17e      	bne.n	8003e80 <OSTaskDel+0x108>
 8003d82:	4605      	mov	r5, r0
        return (OS_ERR_TASK_DEL_ISR);
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 8003d84:	283f      	cmp	r0, #63	; 0x3f
 8003d86:	d07d      	beq.n	8003e84 <OSTaskDel+0x10c>
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 8003d88:	f7fc fa52 	bl	8000230 <OS_CPU_SR_Save>
 8003d8c:	4606      	mov	r6, r0
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 8003d8e:	2dff      	cmp	r5, #255	; 0xff
 8003d90:	d103      	bne.n	8003d9a <OSTaskDel+0x22>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 8003d92:	4b3f      	ldr	r3, [pc, #252]	; (8003e90 <OSTaskDel+0x118>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
    }
    ptcb = OSTCBPrioTbl[prio];
 8003d9a:	462f      	mov	r7, r5
 8003d9c:	4b3d      	ldr	r3, [pc, #244]	; (8003e94 <OSTaskDel+0x11c>)
 8003d9e:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 8003da2:	b925      	cbnz	r5, 8003dae <OSTaskDel+0x36>
        OS_EXIT_CRITICAL();
 8003da4:	4630      	mov	r0, r6
 8003da6:	f7fc fa47 	bl	8000238 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8003daa:	2443      	movs	r4, #67	; 0x43
 8003dac:	e06b      	b.n	8003e86 <OSTaskDel+0x10e>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 8003dae:	2d01      	cmp	r5, #1
 8003db0:	d104      	bne.n	8003dbc <OSTaskDel+0x44>
        OS_EXIT_CRITICAL();
 8003db2:	4630      	mov	r0, r6
 8003db4:	f7fc fa40 	bl	8000238 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_DEL);
 8003db8:	243d      	movs	r4, #61	; 0x3d
 8003dba:	e064      	b.n	8003e86 <OSTaskDel+0x10e>
    }

    OSRdyTbl[ptcb->OSTCBY] &= (OS_PRIO)~ptcb->OSTCBBitX;
 8003dbc:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
 8003dc0:	f895 0039 	ldrb.w	r0, [r5, #57]	; 0x39
 8003dc4:	4934      	ldr	r1, [pc, #208]	; (8003e98 <OSTaskDel+0x120>)
 8003dc6:	5c8b      	ldrb	r3, [r1, r2]
 8003dc8:	ea23 0300 	bic.w	r3, r3, r0
 8003dcc:	548b      	strb	r3, [r1, r2]
    if (OSRdyTbl[ptcb->OSTCBY] == 0u) {                 /* Make task not ready                         */
 8003dce:	b933      	cbnz	r3, 8003dde <OSTaskDel+0x66>
        OSRdyGrp           &= (OS_PRIO)~ptcb->OSTCBBitY;
 8003dd0:	4a32      	ldr	r2, [pc, #200]	; (8003e9c <OSTaskDel+0x124>)
 8003dd2:	f895 103a 	ldrb.w	r1, [r5, #58]	; 0x3a
 8003dd6:	7813      	ldrb	r3, [r2, #0]
 8003dd8:	ea23 0301 	bic.w	r3, r3, r1
 8003ddc:	7013      	strb	r3, [r2, #0]
    }

#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 8003dde:	69e9      	ldr	r1, [r5, #28]
 8003de0:	b111      	cbz	r1, 8003de8 <OSTaskDel+0x70>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 8003de2:	4628      	mov	r0, r5
 8003de4:	f7ff fbea 	bl	80035bc <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 8003de8:	6a29      	ldr	r1, [r5, #32]
 8003dea:	b111      	cbz	r1, 8003df2 <OSTaskDel+0x7a>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 8003dec:	4628      	mov	r0, r5
 8003dee:	f7ff fbfb 	bl	80035e8 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    pnode = ptcb->OSTCBFlagNode;
 8003df2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 8003df4:	b108      	cbz	r0, 8003dfa <OSTaskDel+0x82>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 8003df6:	f7ff fec1 	bl	8003b7c <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0u;                           /* Prevent OSTimeTick() from updating          */
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	632b      	str	r3, [r5, #48]	; 0x30
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 8003dfe:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 8003e02:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 8003e06:	4b26      	ldr	r3, [pc, #152]	; (8003ea0 <OSTaskDel+0x128>)
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2bff      	cmp	r3, #255	; 0xff
 8003e0c:	d002      	beq.n	8003e14 <OSTaskDel+0x9c>
        OSLockNesting++;
 8003e0e:	3301      	adds	r3, #1
 8003e10:	4a23      	ldr	r2, [pc, #140]	; (8003ea0 <OSTaskDel+0x128>)
 8003e12:	7013      	strb	r3, [r2, #0]
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
 8003e14:	4630      	mov	r0, r6
 8003e16:	f7fc fa0f 	bl	8000238 <OS_CPU_SR_Restore>
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 8003e1a:	f7ff fba1 	bl	8003560 <OS_Dummy>
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 8003e1e:	f7fc fa07 	bl	8000230 <OS_CPU_SR_Save>
 8003e22:	4606      	mov	r6, r0
    if (OSLockNesting > 0u) {                           /* Remove context switch lock                  */
 8003e24:	4b1e      	ldr	r3, [pc, #120]	; (8003ea0 <OSTaskDel+0x128>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	b113      	cbz	r3, 8003e30 <OSTaskDel+0xb8>
        OSLockNesting--;
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	4a1c      	ldr	r2, [pc, #112]	; (8003ea0 <OSTaskDel+0x128>)
 8003e2e:	7013      	strb	r3, [r2, #0]
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 8003e30:	4628      	mov	r0, r5
 8003e32:	f7ff f911 	bl	8003058 <OSTaskDelHook>
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskDel(ptcb);                               /* Call TLS hook                               */
#endif
#endif

    OSTaskCtr--;                                        /* One less task being managed                 */
 8003e36:	4a1b      	ldr	r2, [pc, #108]	; (8003ea4 <OSTaskDel+0x12c>)
 8003e38:	7813      	ldrb	r3, [r2, #0]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	7013      	strb	r3, [r2, #0]
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 8003e3e:	2200      	movs	r2, #0
 8003e40:	4b14      	ldr	r3, [pc, #80]	; (8003e94 <OSTaskDel+0x11c>)
 8003e42:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 8003e46:	69ab      	ldr	r3, [r5, #24]
 8003e48:	b92b      	cbnz	r3, 8003e56 <OSTaskDel+0xde>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 8003e4a:	696b      	ldr	r3, [r5, #20]
 8003e4c:	619a      	str	r2, [r3, #24]
        OSTCBList                  = ptcb->OSTCBNext;
 8003e4e:	696a      	ldr	r2, [r5, #20]
 8003e50:	4b15      	ldr	r3, [pc, #84]	; (8003ea8 <OSTaskDel+0x130>)
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	e004      	b.n	8003e60 <OSTaskDel+0xe8>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 8003e56:	696a      	ldr	r2, [r5, #20]
 8003e58:	615a      	str	r2, [r3, #20]
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 8003e5a:	696b      	ldr	r3, [r5, #20]
 8003e5c:	69aa      	ldr	r2, [r5, #24]
 8003e5e:	619a      	str	r2, [r3, #24]
    }
    ptcb->OSTCBNext     = OSTCBFreeList;                /* Return TCB to free TCB list                 */
 8003e60:	4b12      	ldr	r3, [pc, #72]	; (8003eac <OSTaskDel+0x134>)
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	616a      	str	r2, [r5, #20]
    OSTCBFreeList       = ptcb;
 8003e66:	601d      	str	r5, [r3, #0]
#if OS_TASK_NAME_EN > 0u
    ptcb->OSTCBTaskName = (INT8U *)(void *)"?";
 8003e68:	4b11      	ldr	r3, [pc, #68]	; (8003eb0 <OSTaskDel+0x138>)
 8003e6a:	652b      	str	r3, [r5, #80]	; 0x50
#endif
    OS_EXIT_CRITICAL();
 8003e6c:	4630      	mov	r0, r6
 8003e6e:	f7fc f9e3 	bl	8000238 <OS_CPU_SR_Restore>
    if (OSRunning == OS_TRUE) {
 8003e72:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <OSTaskDel+0x13c>)
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d105      	bne.n	8003e86 <OSTaskDel+0x10e>
        OS_Sched();                                     /* Find new highest priority task              */
 8003e7a:	f7ff fd17 	bl	80038ac <OS_Sched>
 8003e7e:	e002      	b.n	8003e86 <OSTaskDel+0x10e>
#endif



    if (OSIntNesting > 0u) {                            /* See if trying to delete from ISR            */
        return (OS_ERR_TASK_DEL_ISR);
 8003e80:	2440      	movs	r4, #64	; 0x40
 8003e82:	e000      	b.n	8003e86 <OSTaskDel+0x10e>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
        return (OS_ERR_TASK_DEL_IDLE);
 8003e84:	243e      	movs	r4, #62	; 0x3e
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
        OS_Sched();                                     /* Find new highest priority task              */
    }
    return (OS_ERR_NONE);
}
 8003e86:	4620      	mov	r0, r4
 8003e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	20002fac 	.word	0x20002fac
 8003e90:	20002fb0 	.word	0x20002fb0
 8003e94:	20003b38 	.word	0x20003b38
 8003e98:	200027a0 	.word	0x200027a0
 8003e9c:	2000279c 	.word	0x2000279c
 8003ea0:	200021b4 	.word	0x200021b4
 8003ea4:	2000272d 	.word	0x2000272d
 8003ea8:	2000249c 	.word	0x2000249c
 8003eac:	20002728 	.word	0x20002728
 8003eb0:	080075c8 	.word	0x080075c8
 8003eb4:	200021bd 	.word	0x200021bd

08003eb8 <OSTaskNameSet>:
*/
#if OS_TASK_NAME_EN > 0u
void  OSTaskNameSet (INT8U   prio,
                     INT8U  *pname,
                     INT8U  *perr)
{
 8003eb8:	b570      	push	{r4, r5, r6, lr}
 8003eba:	4614      	mov	r4, r2
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
        return;
    }
#endif
    if (OSIntNesting > 0u) {                         /* See if trying to call from an ISR              */
 8003ebc:	4b12      	ldr	r3, [pc, #72]	; (8003f08 <OSTaskNameSet+0x50>)
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	b113      	cbz	r3, 8003ec8 <OSTaskNameSet+0x10>
        *perr = OS_ERR_NAME_SET_ISR;
 8003ec2:	2312      	movs	r3, #18
 8003ec4:	7013      	strb	r3, [r2, #0]
        return;
 8003ec6:	bd70      	pop	{r4, r5, r6, pc}
 8003ec8:	4605      	mov	r5, r0
 8003eca:	460e      	mov	r6, r1
    }
    OS_ENTER_CRITICAL();
 8003ecc:	f7fc f9b0 	bl	8000230 <OS_CPU_SR_Save>
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 8003ed0:	2dff      	cmp	r5, #255	; 0xff
 8003ed2:	d103      	bne.n	8003edc <OSTaskNameSet+0x24>
        prio = OSTCBCur->OSTCBPrio;
 8003ed4:	4b0d      	ldr	r3, [pc, #52]	; (8003f0c <OSTaskNameSet+0x54>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
    }
    ptcb = OSTCBPrioTbl[prio];
 8003edc:	4b0c      	ldr	r3, [pc, #48]	; (8003f10 <OSTaskNameSet+0x58>)
 8003ede:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 8003ee2:	b923      	cbnz	r3, 8003eee <OSTaskNameSet+0x36>
        OS_EXIT_CRITICAL();                          /* No                                             */
 8003ee4:	f7fc f9a8 	bl	8000238 <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
 8003ee8:	2343      	movs	r3, #67	; 0x43
 8003eea:	7023      	strb	r3, [r4, #0]
        return;
 8003eec:	bd70      	pop	{r4, r5, r6, pc}
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d104      	bne.n	8003efc <OSTaskNameSet+0x44>
        OS_EXIT_CRITICAL();                          /* Yes                                            */
 8003ef2:	f7fc f9a1 	bl	8000238 <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
 8003ef6:	2343      	movs	r3, #67	; 0x43
 8003ef8:	7023      	strb	r3, [r4, #0]
        return;
 8003efa:	bd70      	pop	{r4, r5, r6, pc}
    }
    ptcb->OSTCBTaskName = pname;
 8003efc:	651e      	str	r6, [r3, #80]	; 0x50
    OS_EXIT_CRITICAL();
 8003efe:	f7fc f99b 	bl	8000238 <OS_CPU_SR_Restore>
    *perr               = OS_ERR_NONE;
 8003f02:	2300      	movs	r3, #0
 8003f04:	7023      	strb	r3, [r4, #0]
 8003f06:	bd70      	pop	{r4, r5, r6, pc}
 8003f08:	20002fac 	.word	0x20002fac
 8003f0c:	20002fb0 	.word	0x20002fb0
 8003f10:	20003b38 	.word	0x20003b38

08003f14 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0u
INT8U  OSTaskResume (INT8U prio)
{
 8003f14:	b538      	push	{r3, r4, r5, lr}
 8003f16:	4604      	mov	r4, r0
#if OS_ARG_CHK_EN > 0u
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
 8003f18:	f7fc f98a 	bl	8000230 <OS_CPU_SR_Save>
    ptcb = OSTCBPrioTbl[prio];
 8003f1c:	4b1f      	ldr	r3, [pc, #124]	; (8003f9c <OSTaskResume+0x88>)
 8003f1e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 8003f22:	b91b      	cbnz	r3, 8003f2c <OSTaskResume+0x18>
        OS_EXIT_CRITICAL();
 8003f24:	f7fc f988 	bl	8000238 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_RESUME_PRIO);
 8003f28:	2446      	movs	r4, #70	; 0x46
 8003f2a:	e034      	b.n	8003f96 <OSTaskResume+0x82>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d103      	bne.n	8003f38 <OSTaskResume+0x24>
        OS_EXIT_CRITICAL();
 8003f30:	f7fc f982 	bl	8000238 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8003f34:	2443      	movs	r4, #67	; 0x43
 8003f36:	e02e      	b.n	8003f96 <OSTaskResume+0x82>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 8003f38:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8003f3c:	f012 0f08 	tst.w	r2, #8
 8003f40:	d026      	beq.n	8003f90 <OSTaskResume+0x7c>
        ptcb->OSTCBStat &= (INT8U)~(INT8U)OS_STAT_SUSPEND;    /* Remove suspension                     */
 8003f42:	f022 0108 	bic.w	r1, r2, #8
 8003f46:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
        if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) == OS_STAT_RDY) { /* See if task is now ready         */
 8003f4a:	f012 0437 	ands.w	r4, r2, #55	; 0x37
 8003f4e:	d11b      	bne.n	8003f88 <OSTaskResume+0x74>
            if (ptcb->OSTCBDly == 0u) {
 8003f50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f52:	b9b2      	cbnz	r2, 8003f82 <OSTaskResume+0x6e>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 8003f54:	4912      	ldr	r1, [pc, #72]	; (8003fa0 <OSTaskResume+0x8c>)
 8003f56:	f893 503a 	ldrb.w	r5, [r3, #58]	; 0x3a
 8003f5a:	780a      	ldrb	r2, [r1, #0]
 8003f5c:	432a      	orrs	r2, r5
 8003f5e:	700a      	strb	r2, [r1, #0]
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8003f60:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8003f64:	490f      	ldr	r1, [pc, #60]	; (8003fa4 <OSTaskResume+0x90>)
 8003f66:	5c8d      	ldrb	r5, [r1, r2]
 8003f68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f6c:	432b      	orrs	r3, r5
 8003f6e:	548b      	strb	r3, [r1, r2]
                OS_EXIT_CRITICAL();
 8003f70:	f7fc f962 	bl	8000238 <OS_CPU_SR_Restore>
                if (OSRunning == OS_TRUE) {
 8003f74:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <OSTaskResume+0x94>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d10c      	bne.n	8003f96 <OSTaskResume+0x82>
                    OS_Sched();                               /* Find new highest priority task        */
 8003f7c:	f7ff fc96 	bl	80038ac <OS_Sched>
 8003f80:	e009      	b.n	8003f96 <OSTaskResume+0x82>
                }
            } else {
                OS_EXIT_CRITICAL();
 8003f82:	f7fc f959 	bl	8000238 <OS_CPU_SR_Restore>
 8003f86:	e006      	b.n	8003f96 <OSTaskResume+0x82>
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
 8003f88:	f7fc f956 	bl	8000238 <OS_CPU_SR_Restore>
        }
        return (OS_ERR_NONE);
 8003f8c:	2400      	movs	r4, #0
 8003f8e:	e002      	b.n	8003f96 <OSTaskResume+0x82>
    }
    OS_EXIT_CRITICAL();
 8003f90:	f7fc f952 	bl	8000238 <OS_CPU_SR_Restore>
    return (OS_ERR_TASK_NOT_SUSPENDED);
 8003f94:	2444      	movs	r4, #68	; 0x44
}
 8003f96:	4620      	mov	r0, r4
 8003f98:	bd38      	pop	{r3, r4, r5, pc}
 8003f9a:	bf00      	nop
 8003f9c:	20003b38 	.word	0x20003b38
 8003fa0:	2000279c 	.word	0x2000279c
 8003fa4:	200027a0 	.word	0x200027a0
 8003fa8:	200021bd 	.word	0x200021bd

08003fac <OSTaskStkChk>:
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
INT8U  OSTaskStkChk (INT8U         prio,
                     OS_STK_DATA  *p_stk_data)
{
 8003fac:	b570      	push	{r4, r5, r6, lr}
 8003fae:	4605      	mov	r5, r0
 8003fb0:	460c      	mov	r4, r1
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
        return (OS_ERR_PDATA_NULL);
    }
#endif
    p_stk_data->OSFree = 0u;                           /* Assume failure, set to 0 size                */
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	600b      	str	r3, [r1, #0]
    p_stk_data->OSUsed = 0u;
 8003fb6:	604b      	str	r3, [r1, #4]
    OS_ENTER_CRITICAL();
 8003fb8:	f7fc f93a 	bl	8000230 <OS_CPU_SR_Save>
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 8003fbc:	2dff      	cmp	r5, #255	; 0xff
 8003fbe:	d103      	bne.n	8003fc8 <OSTaskStkChk+0x1c>
        prio = OSTCBCur->OSTCBPrio;
 8003fc0:	4b16      	ldr	r3, [pc, #88]	; (800401c <OSTaskStkChk+0x70>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
    }
    ptcb = OSTCBPrioTbl[prio];
 8003fc8:	4b15      	ldr	r3, [pc, #84]	; (8004020 <OSTaskStkChk+0x74>)
 8003fca:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 8003fce:	b91b      	cbnz	r3, 8003fd8 <OSTaskStkChk+0x2c>
        OS_EXIT_CRITICAL();
 8003fd0:	f7fc f932 	bl	8000238 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8003fd4:	2043      	movs	r0, #67	; 0x43
 8003fd6:	bd70      	pop	{r4, r5, r6, pc}
    }
    if (ptcb == OS_TCB_RESERVED) {
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d103      	bne.n	8003fe4 <OSTaskStkChk+0x38>
        OS_EXIT_CRITICAL();
 8003fdc:	f7fc f92c 	bl	8000238 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8003fe0:	2043      	movs	r0, #67	; 0x43
 8003fe2:	bd70      	pop	{r4, r5, r6, pc}
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0u) { /* Make sure stack checking option is set      */
 8003fe4:	8a1a      	ldrh	r2, [r3, #16]
 8003fe6:	f012 0f01 	tst.w	r2, #1
 8003fea:	d103      	bne.n	8003ff4 <OSTaskStkChk+0x48>
        OS_EXIT_CRITICAL();
 8003fec:	f7fc f924 	bl	8000238 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_OPT);
 8003ff0:	2045      	movs	r0, #69	; 0x45
 8003ff2:	bd70      	pop	{r4, r5, r6, pc}
    }
    nfree = 0u;
    size  = ptcb->OSTCBStkSize;
 8003ff4:	68dd      	ldr	r5, [r3, #12]
    pchk  = ptcb->OSTCBStkBottom;
 8003ff6:	689e      	ldr	r6, [r3, #8]
    OS_EXIT_CRITICAL();
 8003ff8:	f7fc f91e 	bl	8000238 <OS_CPU_SR_Restore>
#if OS_STK_GROWTH == 1u
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 8003ffc:	1d32      	adds	r2, r6, #4
 8003ffe:	6833      	ldr	r3, [r6, #0]
 8004000:	b92b      	cbnz	r3, 800400e <OSTaskStkChk+0x62>
        nfree++;
 8004002:	3301      	adds	r3, #1
    nfree = 0u;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1u
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 8004004:	f852 1b04 	ldr.w	r1, [r2], #4
 8004008:	2900      	cmp	r1, #0
 800400a:	d0fa      	beq.n	8004002 <OSTaskStkChk+0x56>
 800400c:	e000      	b.n	8004010 <OSTaskStkChk+0x64>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0u) { /* Make sure stack checking option is set      */
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
    }
    nfree = 0u;
 800400e:	2300      	movs	r3, #0
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree;                       /* Store   number of free entries on the stk     */
 8004010:	6023      	str	r3, [r4, #0]
    p_stk_data->OSUsed = size - nfree;                /* Compute number of entries used on the stk     */
 8004012:	1aeb      	subs	r3, r5, r3
 8004014:	6063      	str	r3, [r4, #4]
    return (OS_ERR_NONE);
 8004016:	2000      	movs	r0, #0
}
 8004018:	bd70      	pop	{r4, r5, r6, pc}
 800401a:	bf00      	nop
 800401c:	20002fb0 	.word	0x20002fb0
 8004020:	20003b38 	.word	0x20003b38

08004024 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0u
INT8U  OSTaskSuspend (INT8U prio)
{
 8004024:	b570      	push	{r4, r5, r6, lr}
 8004026:	4604      	mov	r4, r0
        if (prio != OS_PRIO_SELF) {
            return (OS_ERR_PRIO_INVALID);
        }
    }
#endif
    OS_ENTER_CRITICAL();
 8004028:	f7fc f902 	bl	8000230 <OS_CPU_SR_Save>
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 800402c:	2cff      	cmp	r4, #255	; 0xff
 800402e:	d105      	bne.n	800403c <OSTaskSuspend+0x18>
        prio = OSTCBCur->OSTCBPrio;
 8004030:	4b1d      	ldr	r3, [pc, #116]	; (80040a8 <OSTaskSuspend+0x84>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f893 4036 	ldrb.w	r4, [r3, #54]	; 0x36
        self = OS_TRUE;
 8004038:	2501      	movs	r5, #1
 800403a:	e007      	b.n	800404c <OSTaskSuspend+0x28>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 800403c:	4b1a      	ldr	r3, [pc, #104]	; (80040a8 <OSTaskSuspend+0x84>)
 800403e:	681b      	ldr	r3, [r3, #0]
    }
#endif
    OS_ENTER_CRITICAL();
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
        prio = OSTCBCur->OSTCBPrio;
        self = OS_TRUE;
 8004040:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 8004044:	42a5      	cmp	r5, r4
 8004046:	bf14      	ite	ne
 8004048:	2500      	movne	r5, #0
 800404a:	2501      	moveq	r5, #1
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
        self = OS_TRUE;
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
    }
    ptcb = OSTCBPrioTbl[prio];
 800404c:	4b17      	ldr	r3, [pc, #92]	; (80040ac <OSTaskSuspend+0x88>)
 800404e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 8004052:	b91b      	cbnz	r3, 800405c <OSTaskSuspend+0x38>
        OS_EXIT_CRITICAL();
 8004054:	f7fc f8f0 	bl	8000238 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_SUSPEND_PRIO);
 8004058:	2048      	movs	r0, #72	; 0x48
 800405a:	bd70      	pop	{r4, r5, r6, pc}
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 800405c:	2b01      	cmp	r3, #1
 800405e:	d103      	bne.n	8004068 <OSTaskSuspend+0x44>
        OS_EXIT_CRITICAL();
 8004060:	f7fc f8ea 	bl	8000238 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8004064:	2043      	movs	r0, #67	; 0x43
 8004066:	bd70      	pop	{r4, r5, r6, pc}
    }
    y            = ptcb->OSTCBY;
    OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;                   /* Make task not ready                 */
 8004068:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 800406c:	f893 6039 	ldrb.w	r6, [r3, #57]	; 0x39
 8004070:	4c0f      	ldr	r4, [pc, #60]	; (80040b0 <OSTaskSuspend+0x8c>)
 8004072:	5c62      	ldrb	r2, [r4, r1]
 8004074:	ea22 0206 	bic.w	r2, r2, r6
 8004078:	5462      	strb	r2, [r4, r1]
    if (OSRdyTbl[y] == 0u) {
 800407a:	b932      	cbnz	r2, 800408a <OSTaskSuspend+0x66>
        OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 800407c:	490d      	ldr	r1, [pc, #52]	; (80040b4 <OSTaskSuspend+0x90>)
 800407e:	f893 403a 	ldrb.w	r4, [r3, #58]	; 0x3a
 8004082:	780a      	ldrb	r2, [r1, #0]
 8004084:	ea22 0204 	bic.w	r2, r2, r4
 8004088:	700a      	strb	r2, [r1, #0]
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 800408a:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800408e:	f042 0208 	orr.w	r2, r2, #8
 8004092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    OS_EXIT_CRITICAL();
 8004096:	f7fc f8cf 	bl	8000238 <OS_CPU_SR_Restore>
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 800409a:	b11d      	cbz	r5, 80040a4 <OSTaskSuspend+0x80>
        OS_Sched();                                             /* Find new highest priority task      */
 800409c:	f7ff fc06 	bl	80038ac <OS_Sched>
    }
    return (OS_ERR_NONE);
 80040a0:	2000      	movs	r0, #0
 80040a2:	bd70      	pop	{r4, r5, r6, pc}
 80040a4:	2000      	movs	r0, #0
}
 80040a6:	bd70      	pop	{r4, r5, r6, pc}
 80040a8:	20002fb0 	.word	0x20002fb0
 80040ac:	20003b38 	.word	0x20003b38
 80040b0:	200027a0 	.word	0x200027a0
 80040b4:	2000279c 	.word	0x2000279c

080040b8 <OSTaskQuery>:
*/

#if OS_TASK_QUERY_EN > 0u
INT8U  OSTaskQuery (INT8U    prio,
                    OS_TCB  *p_task_data)
{
 80040b8:	b570      	push	{r4, r5, r6, lr}
 80040ba:	4604      	mov	r4, r0
 80040bc:	460e      	mov	r6, r1
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
        return (OS_ERR_PDATA_NULL);
    }
#endif
    OS_ENTER_CRITICAL();
 80040be:	f7fc f8b7 	bl	8000230 <OS_CPU_SR_Save>
 80040c2:	4605      	mov	r5, r0
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 80040c4:	2cff      	cmp	r4, #255	; 0xff
 80040c6:	d103      	bne.n	80040d0 <OSTaskQuery+0x18>
        prio = OSTCBCur->OSTCBPrio;
 80040c8:	4b0e      	ldr	r3, [pc, #56]	; (8004104 <OSTaskQuery+0x4c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f893 4036 	ldrb.w	r4, [r3, #54]	; 0x36
    }
    ptcb = OSTCBPrioTbl[prio];
 80040d0:	4b0d      	ldr	r3, [pc, #52]	; (8004108 <OSTaskQuery+0x50>)
 80040d2:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 80040d6:	b921      	cbnz	r1, 80040e2 <OSTaskQuery+0x2a>
        OS_EXIT_CRITICAL();
 80040d8:	4628      	mov	r0, r5
 80040da:	f7fc f8ad 	bl	8000238 <OS_CPU_SR_Restore>
        return (OS_ERR_PRIO);
 80040de:	2029      	movs	r0, #41	; 0x29
 80040e0:	bd70      	pop	{r4, r5, r6, pc}
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 80040e2:	2901      	cmp	r1, #1
 80040e4:	d104      	bne.n	80040f0 <OSTaskQuery+0x38>
        OS_EXIT_CRITICAL();
 80040e6:	4628      	mov	r0, r5
 80040e8:	f7fc f8a6 	bl	8000238 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 80040ec:	2043      	movs	r0, #67	; 0x43
 80040ee:	bd70      	pop	{r4, r5, r6, pc}
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 80040f0:	2258      	movs	r2, #88	; 0x58
 80040f2:	4630      	mov	r0, r6
 80040f4:	f7ff fbca 	bl	800388c <OS_MemCopy>
    OS_EXIT_CRITICAL();
 80040f8:	4628      	mov	r0, r5
 80040fa:	f7fc f89d 	bl	8000238 <OS_CPU_SR_Restore>
    return (OS_ERR_NONE);
 80040fe:	2000      	movs	r0, #0
}
 8004100:	bd70      	pop	{r4, r5, r6, pc}
 8004102:	bf00      	nop
 8004104:	20002fb0 	.word	0x20002fb0
 8004108:	20003b38 	.word	0x20003b38

0800410c <OS_TaskReturn>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_TaskReturn (void)
{
 800410c:	b508      	push	{r3, lr}
    OSTaskReturnHook(OSTCBCur);                   /* Call hook to let user decide on what to do        */
 800410e:	4b04      	ldr	r3, [pc, #16]	; (8004120 <OS_TaskReturn+0x14>)
 8004110:	6818      	ldr	r0, [r3, #0]
 8004112:	f7fe ffa9 	bl	8003068 <OSTaskReturnHook>

#if OS_TASK_DEL_EN > 0u
    (void)OSTaskDel(OS_PRIO_SELF);                /* Delete task if it accidentally returns!           */
 8004116:	20ff      	movs	r0, #255	; 0xff
 8004118:	f7ff fe2e 	bl	8003d78 <OSTaskDel>
 800411c:	bd08      	pop	{r3, pc}
 800411e:	bf00      	nop
 8004120:	20002fb0 	.word	0x20002fb0

08004124 <OS_TaskStkClr>:
void  OS_TaskStkClr (OS_STK  *pbos,
                     INT32U   size,
                     INT16U   opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000u) {      /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000u) {  /* See if stack needs to be cleared             */
 8004124:	f002 0203 	and.w	r2, r2, #3
 8004128:	2a03      	cmp	r2, #3
 800412a:	d105      	bne.n	8004138 <OS_TaskStkClr+0x14>
#if OS_STK_GROWTH == 1u
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 800412c:	b121      	cbz	r1, 8004138 <OS_TaskStkClr+0x14>
                size--;
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 800412e:	2300      	movs	r3, #0
 8004130:	f840 3b04 	str.w	r3, [r0], #4
                     INT16U   opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000u) {      /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000u) {  /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1u
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 8004134:	3901      	subs	r1, #1
 8004136:	d1fb      	bne.n	8004130 <OS_TaskStkClr+0xc>
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop

0800413c <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 800413c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004140:	b085      	sub	sp, #20
 8004142:	4607      	mov	r7, r0
 8004144:	4688      	mov	r8, r1
 8004146:	4691      	mov	r9, r2
 8004148:	461d      	mov	r5, r3
 800414a:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
 800414e:	f7fc f86f 	bl	8000230 <OS_CPU_SR_Save>
    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
 8004152:	4b21      	ldr	r3, [pc, #132]	; (80041d8 <OSTaskCreateExt+0x9c>)
 8004154:	781c      	ldrb	r4, [r3, #0]
 8004156:	b11c      	cbz	r4, 8004160 <OSTaskCreateExt+0x24>
        OS_EXIT_CRITICAL();
 8004158:	f7fc f86e 	bl	8000238 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_CREATE_ISR);
 800415c:	243c      	movs	r4, #60	; 0x3c
 800415e:	e036      	b.n	80041ce <OSTaskCreateExt+0x92>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 8004160:	4b1e      	ldr	r3, [pc, #120]	; (80041dc <OSTaskCreateExt+0xa0>)
 8004162:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8004166:	bb7b      	cbnz	r3, 80041c8 <OSTaskCreateExt+0x8c>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 8004168:	2201      	movs	r2, #1
 800416a:	4b1c      	ldr	r3, [pc, #112]	; (80041dc <OSTaskCreateExt+0xa0>)
 800416c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
 8004170:	f7fc f862 	bl	8000238 <OS_CPU_SR_Restore>

#if (OS_TASK_STAT_STK_CHK_EN > 0u)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 8004174:	4632      	mov	r2, r6
 8004176:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004178:	980d      	ldr	r0, [sp, #52]	; 0x34
 800417a:	f7ff ffd3 	bl	8004124 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 800417e:	4633      	mov	r3, r6
 8004180:	464a      	mov	r2, r9
 8004182:	4641      	mov	r1, r8
 8004184:	4638      	mov	r0, r7
 8004186:	f7fe ff77 	bl	8003078 <OSTaskStkInit>
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 800418a:	9602      	str	r6, [sp, #8]
 800418c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800418e:	9301      	str	r3, [sp, #4]
 8004190:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8004198:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800419a:	4601      	mov	r1, r0
 800419c:	4628      	mov	r0, r5
 800419e:	f7ff fc45 	bl	8003a2c <OS_TCBInit>
        if (err == OS_ERR_NONE) {
 80041a2:	4606      	mov	r6, r0
 80041a4:	b930      	cbnz	r0, 80041b4 <OSTaskCreateExt+0x78>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 80041a6:	4b0e      	ldr	r3, [pc, #56]	; (80041e0 <OSTaskCreateExt+0xa4>)
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d10f      	bne.n	80041ce <OSTaskCreateExt+0x92>
                OS_Sched();
 80041ae:	f7ff fb7d 	bl	80038ac <OS_Sched>
 80041b2:	e00c      	b.n	80041ce <OSTaskCreateExt+0x92>
            }
        } else {
            OS_ENTER_CRITICAL();
 80041b4:	f7fc f83c 	bl	8000230 <OS_CPU_SR_Save>
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 80041b8:	2200      	movs	r2, #0
 80041ba:	4b08      	ldr	r3, [pc, #32]	; (80041dc <OSTaskCreateExt+0xa0>)
 80041bc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
            OS_EXIT_CRITICAL();
 80041c0:	f7fc f83a 	bl	8000238 <OS_CPU_SR_Restore>
        }
        return (err);
 80041c4:	4634      	mov	r4, r6
 80041c6:	e002      	b.n	80041ce <OSTaskCreateExt+0x92>
    }
    OS_EXIT_CRITICAL();
 80041c8:	f7fc f836 	bl	8000238 <OS_CPU_SR_Restore>
    return (OS_ERR_PRIO_EXIST);
 80041cc:	2428      	movs	r4, #40	; 0x28
}
 80041ce:	4620      	mov	r0, r4
 80041d0:	b005      	add	sp, #20
 80041d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80041d6:	bf00      	nop
 80041d8:	20002fac 	.word	0x20002fac
 80041dc:	20003b38 	.word	0x20003b38
 80041e0:	200021bd 	.word	0x200021bd

080041e4 <OSTimeDly>:
    OS_CPU_SR  cpu_sr = 0u;
#endif



    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 80041e4:	4b12      	ldr	r3, [pc, #72]	; (8004230 <OSTimeDly+0x4c>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	bb03      	cbnz	r3, 800422c <OSTimeDly+0x48>
        return;
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
 80041ea:	4b12      	ldr	r3, [pc, #72]	; (8004234 <OSTimeDly+0x50>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	b9eb      	cbnz	r3, 800422c <OSTimeDly+0x48>
        return;
    }
    if (ticks > 0u) {                            /* 0 means no delay!                                  */
 80041f0:	b1e0      	cbz	r0, 800422c <OSTimeDly+0x48>
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT32U ticks)
{
 80041f2:	b570      	push	{r4, r5, r6, lr}
 80041f4:	4604      	mov	r4, r0
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
        return;
    }
    if (ticks > 0u) {                            /* 0 means no delay!                                  */
        OS_ENTER_CRITICAL();
 80041f6:	f7fc f81b 	bl	8000230 <OS_CPU_SR_Save>
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 80041fa:	4b0f      	ldr	r3, [pc, #60]	; (8004238 <OSTimeDly+0x54>)
 80041fc:	681a      	ldr	r2, [r3, #0]
        OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 80041fe:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
 8004202:	f892 6039 	ldrb.w	r6, [r2, #57]	; 0x39
 8004206:	4d0d      	ldr	r5, [pc, #52]	; (800423c <OSTimeDly+0x58>)
 8004208:	5c6b      	ldrb	r3, [r5, r1]
 800420a:	ea23 0306 	bic.w	r3, r3, r6
 800420e:	546b      	strb	r3, [r5, r1]
        if (OSRdyTbl[y] == 0u) {
 8004210:	b933      	cbnz	r3, 8004220 <OSTimeDly+0x3c>
            OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 8004212:	490b      	ldr	r1, [pc, #44]	; (8004240 <OSTimeDly+0x5c>)
 8004214:	f892 503a 	ldrb.w	r5, [r2, #58]	; 0x3a
 8004218:	780b      	ldrb	r3, [r1, #0]
 800421a:	ea23 0305 	bic.w	r3, r3, r5
 800421e:	700b      	strb	r3, [r1, #0]
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 8004220:	6314      	str	r4, [r2, #48]	; 0x30
        OS_EXIT_CRITICAL();
 8004222:	f7fc f809 	bl	8000238 <OS_CPU_SR_Restore>
        OS_Sched();                              /* Find next task to run!                             */
 8004226:	f7ff fb41 	bl	80038ac <OS_Sched>
 800422a:	bd70      	pop	{r4, r5, r6, pc}
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	20002fac 	.word	0x20002fac
 8004234:	200021b4 	.word	0x200021b4
 8004238:	20002fb0 	.word	0x20002fb0
 800423c:	200027a0 	.word	0x200027a0
 8004240:	2000279c 	.word	0x2000279c

08004244 <OSTimeDlyHMSM>:
#if OS_TIME_DLY_HMSM_EN > 0u
INT8U  OSTimeDlyHMSM (INT8U   hours,
                      INT8U   minutes,
                      INT8U   seconds,
                      INT16U  ms)
{
 8004244:	b510      	push	{r4, lr}
    INT32U ticks;


    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 8004246:	4c10      	ldr	r4, [pc, #64]	; (8004288 <OSTimeDlyHMSM+0x44>)
 8004248:	7824      	ldrb	r4, [r4, #0]
 800424a:	b9c4      	cbnz	r4, 800427e <OSTimeDlyHMSM+0x3a>
        return (OS_ERR_TIME_DLY_ISR);
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
 800424c:	4c0f      	ldr	r4, [pc, #60]	; (800428c <OSTimeDlyHMSM+0x48>)
 800424e:	7824      	ldrb	r4, [r4, #0]
 8004250:	b9bc      	cbnz	r4, 8004282 <OSTimeDlyHMSM+0x3e>
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600uL + (INT32U)minutes * 60uL + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500uL / OS_TICKS_PER_SEC) / 1000uL;
    OSTimeDly(ticks);
 8004252:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8004256:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800425a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800425e:	fb02 1100 	mla	r1, r2, r0, r1
 8004262:	2064      	movs	r0, #100	; 0x64
 8004264:	fb00 f303 	mul.w	r3, r0, r3
 8004268:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800426c:	4a08      	ldr	r2, [pc, #32]	; (8004290 <OSTimeDlyHMSM+0x4c>)
 800426e:	fba2 2303 	umull	r2, r3, r2, r3
 8004272:	099b      	lsrs	r3, r3, #6
 8004274:	fb00 3001 	mla	r0, r0, r1, r3
 8004278:	f7ff ffb4 	bl	80041e4 <OSTimeDly>
    return (OS_ERR_NONE);
 800427c:	e002      	b.n	8004284 <OSTimeDlyHMSM+0x40>
{
    INT32U ticks;


    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
        return (OS_ERR_TIME_DLY_ISR);
 800427e:	2455      	movs	r4, #85	; 0x55
 8004280:	e000      	b.n	8004284 <OSTimeDlyHMSM+0x40>
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
        return (OS_ERR_SCHED_LOCKED);
 8004282:	2432      	movs	r4, #50	; 0x32
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600uL + (INT32U)minutes * 60uL + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500uL / OS_TICKS_PER_SEC) / 1000uL;
    OSTimeDly(ticks);
    return (OS_ERR_NONE);
}
 8004284:	4620      	mov	r0, r4
 8004286:	bd10      	pop	{r4, pc}
 8004288:	20002fac 	.word	0x20002fac
 800428c:	200021b4 	.word	0x200021b4
 8004290:	10624dd3 	.word	0x10624dd3

08004294 <OSTmr_Link>:
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Link (OS_TMR  *ptmr,
                          INT8U    type)
{
 8004294:	b430      	push	{r4, r5}
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
 8004296:	2303      	movs	r3, #3
 8004298:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
 800429c:	2901      	cmp	r1, #1
 800429e:	d105      	bne.n	80042ac <OSTmr_Link+0x18>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 80042a0:	69c2      	ldr	r2, [r0, #28]
 80042a2:	4b1b      	ldr	r3, [pc, #108]	; (8004310 <OSTmr_Link+0x7c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4413      	add	r3, r2
 80042a8:	6143      	str	r3, [r0, #20]
 80042aa:	e00b      	b.n	80042c4 <OSTmr_Link+0x30>
    } else {
        if (ptmr->OSTmrDly == 0u) {
 80042ac:	6983      	ldr	r3, [r0, #24]
 80042ae:	b92b      	cbnz	r3, 80042bc <OSTmr_Link+0x28>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 80042b0:	69c2      	ldr	r2, [r0, #28]
 80042b2:	4b17      	ldr	r3, [pc, #92]	; (8004310 <OSTmr_Link+0x7c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4413      	add	r3, r2
 80042b8:	6143      	str	r3, [r0, #20]
 80042ba:	e003      	b.n	80042c4 <OSTmr_Link+0x30>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
 80042bc:	4a14      	ldr	r2, [pc, #80]	; (8004310 <OSTmr_Link+0x7c>)
 80042be:	6812      	ldr	r2, [r2, #0]
 80042c0:	4413      	add	r3, r2
 80042c2:	6143      	str	r3, [r0, #20]
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
    pspoke = &OSTmrWheelTbl[spoke];
 80042c4:	6943      	ldr	r3, [r0, #20]
 80042c6:	4c13      	ldr	r4, [pc, #76]	; (8004314 <OSTmr_Link+0x80>)
 80042c8:	fba3 4504 	umull	r4, r5, r3, r4
 80042cc:	1b5a      	subs	r2, r3, r5
 80042ce:	eb05 0252 	add.w	r2, r5, r2, lsr #1
 80042d2:	0892      	lsrs	r2, r2, #2
 80042d4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80042d8:	1a9b      	subs	r3, r3, r2
 80042da:	b29b      	uxth	r3, r3

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
 80042dc:	4a0e      	ldr	r2, [pc, #56]	; (8004318 <OSTmr_Link+0x84>)
 80042de:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80042e2:	b939      	cbnz	r1, 80042f4 <OSTmr_Link+0x60>
        pspoke->OSTmrFirst   = ptmr;
 80042e4:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
        ptmr->OSTmrNext      = (OS_TMR *)0;
 80042e8:	60c1      	str	r1, [r0, #12]
        pspoke->OSTmrEntries = 1u;
 80042ea:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80042ee:	2201      	movs	r2, #1
 80042f0:	809a      	strh	r2, [r3, #4]
 80042f2:	e009      	b.n	8004308 <OSTmr_Link+0x74>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
        pspoke->OSTmrFirst   = ptmr;
 80042f4:	4a08      	ldr	r2, [pc, #32]	; (8004318 <OSTmr_Link+0x84>)
 80042f6:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
        ptmr->OSTmrNext      = (void *)ptmr1;
 80042fa:	60c1      	str	r1, [r0, #12]
        ptmr1->OSTmrPrev     = (void *)ptmr;
 80042fc:	6108      	str	r0, [r1, #16]
        pspoke->OSTmrEntries++;
 80042fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004302:	889a      	ldrh	r2, [r3, #4]
 8004304:	3201      	adds	r2, #1
 8004306:	809a      	strh	r2, [r3, #4]
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
 8004308:	2300      	movs	r3, #0
 800430a:	6103      	str	r3, [r0, #16]
}
 800430c:	bc30      	pop	{r4, r5}
 800430e:	4770      	bx	lr
 8004310:	20002fb4 	.word	0x20002fb4
 8004314:	24924925 	.word	0x24924925
 8004318:	2000217c 	.word	0x2000217c

0800431c <OSTmr_Unlink>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
 800431c:	b430      	push	{r4, r5}
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
    pspoke = &OSTmrWheelTbl[spoke];
 800431e:	6943      	ldr	r3, [r0, #20]
 8004320:	4c15      	ldr	r4, [pc, #84]	; (8004378 <OSTmr_Unlink+0x5c>)
 8004322:	fba3 4504 	umull	r4, r5, r3, r4
 8004326:	1b5a      	subs	r2, r3, r5
 8004328:	eb05 0252 	add.w	r2, r5, r2, lsr #1
 800432c:	0892      	lsrs	r2, r2, #2
 800432e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8004332:	1a9b      	subs	r3, r3, r2
 8004334:	b29b      	uxth	r3, r3

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
 8004336:	4a11      	ldr	r2, [pc, #68]	; (800437c <OSTmr_Unlink+0x60>)
 8004338:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800433c:	4290      	cmp	r0, r2
 800433e:	d107      	bne.n	8004350 <OSTmr_Unlink+0x34>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
 8004340:	68c2      	ldr	r2, [r0, #12]
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
 8004342:	490e      	ldr	r1, [pc, #56]	; (800437c <OSTmr_Unlink+0x60>)
 8004344:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        if (ptmr1 != (OS_TMR *)0) {
 8004348:	b13a      	cbz	r2, 800435a <OSTmr_Unlink+0x3e>
            ptmr1->OSTmrPrev = (void *)0;
 800434a:	2100      	movs	r1, #0
 800434c:	6111      	str	r1, [r2, #16]
 800434e:	e004      	b.n	800435a <OSTmr_Unlink+0x3e>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
 8004350:	6901      	ldr	r1, [r0, #16]
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
 8004352:	68c2      	ldr	r2, [r0, #12]
        ptmr1->OSTmrNext = ptmr2;
 8004354:	60ca      	str	r2, [r1, #12]
        if (ptmr2 != (OS_TMR *)0) {
 8004356:	b102      	cbz	r2, 800435a <OSTmr_Unlink+0x3e>
            ptmr2->OSTmrPrev = (void *)ptmr1;
 8004358:	6111      	str	r1, [r2, #16]
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
 800435a:	2201      	movs	r2, #1
 800435c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    ptmr->OSTmrNext  = (void *)0;
 8004360:	2200      	movs	r2, #0
 8004362:	60c2      	str	r2, [r0, #12]
    ptmr->OSTmrPrev  = (void *)0;
 8004364:	6102      	str	r2, [r0, #16]
    pspoke->OSTmrEntries--;
 8004366:	4a05      	ldr	r2, [pc, #20]	; (800437c <OSTmr_Unlink+0x60>)
 8004368:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800436c:	889a      	ldrh	r2, [r3, #4]
 800436e:	3a01      	subs	r2, #1
 8004370:	809a      	strh	r2, [r3, #4]
}
 8004372:	bc30      	pop	{r4, r5}
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	24924925 	.word	0x24924925
 800437c:	2000217c 	.word	0x2000217c

08004380 <OSTmr_Task>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Task (void *p_arg)
{
 8004380:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004384:	b083      	sub	sp, #12

    p_arg = p_arg;                                               /* Prevent compiler warning for not using 'p_arg'    */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
        OSSchedLock();
        OSTmrTime++;                                             /* Increment the current time                        */
 8004386:	4e1f      	ldr	r6, [pc, #124]	; (8004404 <OSTmr_Task+0x84>)
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
        pspoke = &OSTmrWheelTbl[spoke];
        ptmr   = pspoke->OSTmrFirst;
 8004388:	4f1f      	ldr	r7, [pc, #124]	; (8004408 <OSTmr_Task+0x88>)
    INT16U           spoke;


    p_arg = p_arg;                                               /* Prevent compiler warning for not using 'p_arg'    */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
 800438a:	f10d 0207 	add.w	r2, sp, #7
 800438e:	2100      	movs	r1, #0
 8004390:	4b1e      	ldr	r3, [pc, #120]	; (800440c <OSTmr_Task+0x8c>)
 8004392:	6818      	ldr	r0, [r3, #0]
 8004394:	f7ff fc64 	bl	8003c60 <OSSemPend>
        OSSchedLock();
 8004398:	f7ff f82a 	bl	80033f0 <OSSchedLock>
        OSTmrTime++;                                             /* Increment the current time                        */
 800439c:	6833      	ldr	r3, [r6, #0]
 800439e:	3301      	adds	r3, #1
 80043a0:	6033      	str	r3, [r6, #0]
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
        pspoke = &OSTmrWheelTbl[spoke];
        ptmr   = pspoke->OSTmrFirst;
 80043a2:	fba3 0107 	umull	r0, r1, r3, r7
 80043a6:	1a5a      	subs	r2, r3, r1
 80043a8:	eb01 0252 	add.w	r2, r1, r2, lsr #1
 80043ac:	0892      	lsrs	r2, r2, #2
 80043ae:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80043b2:	1a9b      	subs	r3, r3, r2
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	4a16      	ldr	r2, [pc, #88]	; (8004410 <OSTmr_Task+0x90>)
 80043b8:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
        while (ptmr != (OS_TMR *)0) {
 80043bc:	b1f4      	cbz	r4, 80043fc <OSTmr_Task+0x7c>
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
 80043be:	f04f 0802 	mov.w	r8, #2
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
 80043c2:	f04f 0901 	mov.w	r9, #1
        OSTmrTime++;                                             /* Increment the current time                        */
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
        pspoke = &OSTmrWheelTbl[spoke];
        ptmr   = pspoke->OSTmrFirst;
        while (ptmr != (OS_TMR *)0) {
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
 80043c6:	68e5      	ldr	r5, [r4, #12]
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
 80043c8:	6962      	ldr	r2, [r4, #20]
 80043ca:	6833      	ldr	r3, [r6, #0]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d112      	bne.n	80043f6 <OSTmr_Task+0x76>
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
 80043d0:	4620      	mov	r0, r4
 80043d2:	f7ff ffa3 	bl	800431c <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
 80043d6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d104      	bne.n	80043e8 <OSTmr_Task+0x68>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
 80043de:	4649      	mov	r1, r9
 80043e0:	4620      	mov	r0, r4
 80043e2:	f7ff ff57 	bl	8004294 <OSTmr_Link>
 80043e6:	e001      	b.n	80043ec <OSTmr_Task+0x6c>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
 80043e8:	f884 8025 	strb.w	r8, [r4, #37]	; 0x25
                }
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
 80043ec:	6863      	ldr	r3, [r4, #4]
                if (pfnct != (OS_TMR_CALLBACK)0) {
 80043ee:	b113      	cbz	r3, 80043f6 <OSTmr_Task+0x76>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
 80043f0:	68a1      	ldr	r1, [r4, #8]
 80043f2:	4620      	mov	r0, r4
 80043f4:	4798      	blx	r3
 80043f6:	462c      	mov	r4, r5
        OSSchedLock();
        OSTmrTime++;                                             /* Increment the current time                        */
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
        pspoke = &OSTmrWheelTbl[spoke];
        ptmr   = pspoke->OSTmrFirst;
        while (ptmr != (OS_TMR *)0) {
 80043f8:	2d00      	cmp	r5, #0
 80043fa:	d1e4      	bne.n	80043c6 <OSTmr_Task+0x46>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
                }
            }
            ptmr = ptmr_next;
        }
        OSSchedUnlock();
 80043fc:	f7ff fa88 	bl	8003910 <OSSchedUnlock>
    }
 8004400:	e7c3      	b.n	800438a <OSTmr_Task+0xa>
 8004402:	bf00      	nop
 8004404:	20002fb4 	.word	0x20002fb4
 8004408:	24924925 	.word	0x24924925
 800440c:	200021b8 	.word	0x200021b8
 8004410:	2000217c 	.word	0x2000217c

08004414 <OSTmrSignal>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
INT8U  OSTmrSignal (void)
{
 8004414:	b508      	push	{r3, lr}
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
 8004416:	4b02      	ldr	r3, [pc, #8]	; (8004420 <OSTmrSignal+0xc>)
 8004418:	6818      	ldr	r0, [r3, #0]
 800441a:	f7ff fc85 	bl	8003d28 <OSSemPost>
    return (err);
}
 800441e:	bd08      	pop	{r3, pc}
 8004420:	200021b8 	.word	0x200021b8

08004424 <OSTmr_Init>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
void  OSTmr_Init (void)
{
 8004424:	b570      	push	{r4, r5, r6, lr}
 8004426:	b088      	sub	sp, #32
    INT16U   ix_next;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
 8004428:	4c30      	ldr	r4, [pc, #192]	; (80044ec <OSTmr_Init+0xc8>)
 800442a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800442e:	4620      	mov	r0, r4
 8004430:	f7ff f93a 	bl	80036a8 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
 8004434:	2138      	movs	r1, #56	; 0x38
 8004436:	482e      	ldr	r0, [pc, #184]	; (80044f0 <OSTmr_Init+0xcc>)
 8004438:	f7ff f936 	bl	80036a8 <OS_MemClr>
 800443c:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8004440:	f504 7220 	add.w	r2, r4, #640	; 0x280

    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
        ix_next = ix + 1u;
        ptmr1 = &OSTmrTbl[ix];
        ptmr2 = &OSTmrTbl[ix_next];
        ptmr1->OSTmrType    = OS_TMR_TYPE;
 8004444:	2464      	movs	r4, #100	; 0x64
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
 8004446:	2000      	movs	r0, #0
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
#if OS_TMR_CFG_NAME_EN > 0u
        ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 8004448:	492a      	ldr	r1, [pc, #168]	; (80044f4 <OSTmr_Init+0xd0>)

    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
        ix_next = ix + 1u;
        ptmr1 = &OSTmrTbl[ix];
        ptmr2 = &OSTmrTbl[ix_next];
        ptmr1->OSTmrType    = OS_TMR_TYPE;
 800444a:	f803 4c28 	strb.w	r4, [r3, #-40]
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
 800444e:	f803 0c03 	strb.w	r0, [r3, #-3]
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
 8004452:	f843 3c1c 	str.w	r3, [r3, #-28]
#if OS_TMR_CFG_NAME_EN > 0u
        ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 8004456:	f843 1c08 	str.w	r1, [r3, #-8]
 800445a:	3328      	adds	r3, #40	; 0x28


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */

    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
 800445c:	4293      	cmp	r3, r2
 800445e:	d1f4      	bne.n	800444a <OSTmr_Init+0x26>
#if OS_TMR_CFG_NAME_EN > 0u
        ptmr1->OSTmrName    = (INT8U *)(void *)"?";
#endif
    }
    ptmr1               = &OSTmrTbl[ix];
    ptmr1->OSTmrType    = OS_TMR_TYPE;
 8004460:	4b22      	ldr	r3, [pc, #136]	; (80044ec <OSTmr_Init+0xc8>)
 8004462:	2264      	movs	r2, #100	; 0x64
 8004464:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
 8004468:	2400      	movs	r4, #0
 800446a:	f883 427d 	strb.w	r4, [r3, #637]	; 0x27d
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
 800446e:	f8c3 4264 	str.w	r4, [r3, #612]	; 0x264
#if OS_TMR_CFG_NAME_EN > 0u
    ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 8004472:	4a20      	ldr	r2, [pc, #128]	; (80044f4 <OSTmr_Init+0xd0>)
 8004474:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
#endif
    OSTmrTime           = 0u;
 8004478:	4a1f      	ldr	r2, [pc, #124]	; (80044f8 <OSTmr_Init+0xd4>)
 800447a:	6014      	str	r4, [r2, #0]
    OSTmrUsed           = 0u;
 800447c:	4a1f      	ldr	r2, [pc, #124]	; (80044fc <OSTmr_Init+0xd8>)
 800447e:	8014      	strh	r4, [r2, #0]
    OSTmrFree           = OS_TMR_CFG_MAX;
 8004480:	2110      	movs	r1, #16
 8004482:	4a1f      	ldr	r2, [pc, #124]	; (8004500 <OSTmr_Init+0xdc>)
 8004484:	8011      	strh	r1, [r2, #0]
    OSTmrFreeList       = &OSTmrTbl[0];
 8004486:	4a1f      	ldr	r2, [pc, #124]	; (8004504 <OSTmr_Init+0xe0>)
 8004488:	6013      	str	r3, [r2, #0]
    OSTmrSem            = OSSemCreate(1u);
 800448a:	2001      	movs	r0, #1
 800448c:	f7ff fbc2 	bl	8003c14 <OSSemCreate>
 8004490:	4e1d      	ldr	r6, [pc, #116]	; (8004508 <OSTmr_Init+0xe4>)
 8004492:	6030      	str	r0, [r6, #0]
    OSTmrSemSignal      = OSSemCreate(0u);
 8004494:	4620      	mov	r0, r4
 8004496:	f7ff fbbd 	bl	8003c14 <OSSemCreate>
 800449a:	4d1c      	ldr	r5, [pc, #112]	; (800450c <OSTmr_Init+0xe8>)
 800449c:	6028      	str	r0, [r5, #0]

#if OS_EVENT_NAME_EN > 0u                                               /* Assign names to semaphores                 */
    OSEventNameSet(OSTmrSem,       (INT8U *)(void *)"uC/OS-II TmrLock",   &err);
 800449e:	f10d 021f 	add.w	r2, sp, #31
 80044a2:	491b      	ldr	r1, [pc, #108]	; (8004510 <OSTmr_Init+0xec>)
 80044a4:	6830      	ldr	r0, [r6, #0]
 80044a6:	f7fe ff39 	bl	800331c <OSEventNameSet>
    OSEventNameSet(OSTmrSemSignal, (INT8U *)(void *)"uC/OS-II TmrSignal", &err);
 80044aa:	f10d 021f 	add.w	r2, sp, #31
 80044ae:	4919      	ldr	r1, [pc, #100]	; (8004514 <OSTmr_Init+0xf0>)
 80044b0:	6828      	ldr	r0, [r5, #0]
 80044b2:	f7fe ff33 	bl	800331c <OSEventNameSet>
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OSTmr_Task,
 80044b6:	4a18      	ldr	r2, [pc, #96]	; (8004518 <OSTmr_Init+0xf4>)
 80044b8:	2303      	movs	r3, #3
 80044ba:	9304      	str	r3, [sp, #16]
 80044bc:	9403      	str	r4, [sp, #12]
 80044be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044c2:	9302      	str	r3, [sp, #8]
 80044c4:	f2a2 73fc 	subw	r3, r2, #2044	; 0x7fc
 80044c8:	9301      	str	r3, [sp, #4]
 80044ca:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	233d      	movs	r3, #61	; 0x3d
 80044d2:	4621      	mov	r1, r4
 80044d4:	4811      	ldr	r0, [pc, #68]	; (800451c <OSTmr_Init+0xf8>)
 80044d6:	f7ff fe31 	bl	800413c <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)(void *)"uC/OS-II Tmr", &err);
 80044da:	f10d 021e 	add.w	r2, sp, #30
 80044de:	4910      	ldr	r1, [pc, #64]	; (8004520 <OSTmr_Init+0xfc>)
 80044e0:	203d      	movs	r0, #61	; 0x3d
 80044e2:	f7ff fce9 	bl	8003eb8 <OSTaskNameSet>
    OSEventNameSet(OSTmrSem,       (INT8U *)(void *)"uC/OS-II TmrLock",   &err);
    OSEventNameSet(OSTmrSemSignal, (INT8U *)(void *)"uC/OS-II TmrSignal", &err);
#endif

    OSTmr_InitTask();
}
 80044e6:	b008      	add	sp, #32
 80044e8:	bd70      	pop	{r4, r5, r6, pc}
 80044ea:	bf00      	nop
 80044ec:	20002218 	.word	0x20002218
 80044f0:	2000217c 	.word	0x2000217c
 80044f4:	080075c8 	.word	0x080075c8
 80044f8:	20002fb4 	.word	0x20002fb4
 80044fc:	200021c4 	.word	0x200021c4
 8004500:	20002720 	.word	0x20002720
 8004504:	20002178 	.word	0x20002178
 8004508:	20002fbc 	.word	0x20002fbc
 800450c:	200021b8 	.word	0x200021b8
 8004510:	080075ec 	.word	0x080075ec
 8004514:	08007600 	.word	0x08007600
 8004518:	20002fa4 	.word	0x20002fa4
 800451c:	08004381 	.word	0x08004381
 8004520:	08007614 	.word	0x08007614

08004524 <memset>:
 8004524:	4402      	add	r2, r0
 8004526:	4603      	mov	r3, r0
 8004528:	4293      	cmp	r3, r2
 800452a:	d002      	beq.n	8004532 <memset+0xe>
 800452c:	f803 1b01 	strb.w	r1, [r3], #1
 8004530:	e7fa      	b.n	8004528 <memset+0x4>
 8004532:	4770      	bx	lr
 8004534:	0000      	movs	r0, r0
	...

08004538 <_svfprintf_r>:
 8004538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800453c:	b0bd      	sub	sp, #244	; 0xf4
 800453e:	468b      	mov	fp, r1
 8004540:	9205      	str	r2, [sp, #20]
 8004542:	461f      	mov	r7, r3
 8004544:	4682      	mov	sl, r0
 8004546:	f001 fe0b 	bl	8006160 <_localeconv_r>
 800454a:	6803      	ldr	r3, [r0, #0]
 800454c:	930d      	str	r3, [sp, #52]	; 0x34
 800454e:	4618      	mov	r0, r3
 8004550:	f7fb ff16 	bl	8000380 <strlen>
 8004554:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8004558:	9008      	str	r0, [sp, #32]
 800455a:	0619      	lsls	r1, r3, #24
 800455c:	d515      	bpl.n	800458a <_svfprintf_r+0x52>
 800455e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8004562:	b993      	cbnz	r3, 800458a <_svfprintf_r+0x52>
 8004564:	2140      	movs	r1, #64	; 0x40
 8004566:	4650      	mov	r0, sl
 8004568:	f001 fe06 	bl	8006178 <_malloc_r>
 800456c:	f8cb 0000 	str.w	r0, [fp]
 8004570:	f8cb 0010 	str.w	r0, [fp, #16]
 8004574:	b930      	cbnz	r0, 8004584 <_svfprintf_r+0x4c>
 8004576:	230c      	movs	r3, #12
 8004578:	f8ca 3000 	str.w	r3, [sl]
 800457c:	f04f 30ff 	mov.w	r0, #4294967295
 8004580:	f000 bf95 	b.w	80054ae <_svfprintf_r+0xf76>
 8004584:	2340      	movs	r3, #64	; 0x40
 8004586:	f8cb 3014 	str.w	r3, [fp, #20]
 800458a:	ed9f 7b99 	vldr	d7, [pc, #612]	; 80047f0 <_svfprintf_r+0x2b8>
 800458e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004592:	2300      	movs	r3, #0
 8004594:	ac2c      	add	r4, sp, #176	; 0xb0
 8004596:	941f      	str	r4, [sp, #124]	; 0x7c
 8004598:	9321      	str	r3, [sp, #132]	; 0x84
 800459a:	9320      	str	r3, [sp, #128]	; 0x80
 800459c:	9304      	str	r3, [sp, #16]
 800459e:	9311      	str	r3, [sp, #68]	; 0x44
 80045a0:	9310      	str	r3, [sp, #64]	; 0x40
 80045a2:	930a      	str	r3, [sp, #40]	; 0x28
 80045a4:	9d05      	ldr	r5, [sp, #20]
 80045a6:	462b      	mov	r3, r5
 80045a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045ac:	b11a      	cbz	r2, 80045b6 <_svfprintf_r+0x7e>
 80045ae:	2a25      	cmp	r2, #37	; 0x25
 80045b0:	d001      	beq.n	80045b6 <_svfprintf_r+0x7e>
 80045b2:	461d      	mov	r5, r3
 80045b4:	e7f7      	b.n	80045a6 <_svfprintf_r+0x6e>
 80045b6:	9b05      	ldr	r3, [sp, #20]
 80045b8:	1aee      	subs	r6, r5, r3
 80045ba:	d017      	beq.n	80045ec <_svfprintf_r+0xb4>
 80045bc:	e884 0048 	stmia.w	r4, {r3, r6}
 80045c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80045c2:	4433      	add	r3, r6
 80045c4:	9321      	str	r3, [sp, #132]	; 0x84
 80045c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80045c8:	3301      	adds	r3, #1
 80045ca:	2b07      	cmp	r3, #7
 80045cc:	9320      	str	r3, [sp, #128]	; 0x80
 80045ce:	dc01      	bgt.n	80045d4 <_svfprintf_r+0x9c>
 80045d0:	3408      	adds	r4, #8
 80045d2:	e008      	b.n	80045e6 <_svfprintf_r+0xae>
 80045d4:	aa1f      	add	r2, sp, #124	; 0x7c
 80045d6:	4659      	mov	r1, fp
 80045d8:	4650      	mov	r0, sl
 80045da:	f002 fae1 	bl	8006ba0 <__ssprint_r>
 80045de:	2800      	cmp	r0, #0
 80045e0:	f040 862c 	bne.w	800523c <_svfprintf_r+0xd04>
 80045e4:	ac2c      	add	r4, sp, #176	; 0xb0
 80045e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045e8:	4433      	add	r3, r6
 80045ea:	930a      	str	r3, [sp, #40]	; 0x28
 80045ec:	782b      	ldrb	r3, [r5, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 861d 	beq.w	800522e <_svfprintf_r+0xcf6>
 80045f4:	2200      	movs	r2, #0
 80045f6:	1c6b      	adds	r3, r5, #1
 80045f8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80045fc:	4611      	mov	r1, r2
 80045fe:	f04f 39ff 	mov.w	r9, #4294967295
 8004602:	9209      	str	r2, [sp, #36]	; 0x24
 8004604:	4615      	mov	r5, r2
 8004606:	200a      	movs	r0, #10
 8004608:	1c5e      	adds	r6, r3, #1
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	9605      	str	r6, [sp, #20]
 800460e:	9302      	str	r3, [sp, #8]
 8004610:	9b02      	ldr	r3, [sp, #8]
 8004612:	3b20      	subs	r3, #32
 8004614:	2b58      	cmp	r3, #88	; 0x58
 8004616:	f200 8263 	bhi.w	8004ae0 <_svfprintf_r+0x5a8>
 800461a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800461e:	005c      	.short	0x005c
 8004620:	02610261 	.word	0x02610261
 8004624:	0261006b 	.word	0x0261006b
 8004628:	02610261 	.word	0x02610261
 800462c:	02610261 	.word	0x02610261
 8004630:	006e0261 	.word	0x006e0261
 8004634:	02610059 	.word	0x02610059
 8004638:	007c0079 	.word	0x007c0079
 800463c:	00a30261 	.word	0x00a30261
 8004640:	00a600a6 	.word	0x00a600a6
 8004644:	00a600a6 	.word	0x00a600a6
 8004648:	00a600a6 	.word	0x00a600a6
 800464c:	00a600a6 	.word	0x00a600a6
 8004650:	026100a6 	.word	0x026100a6
 8004654:	02610261 	.word	0x02610261
 8004658:	02610261 	.word	0x02610261
 800465c:	02610261 	.word	0x02610261
 8004660:	02610261 	.word	0x02610261
 8004664:	00d60261 	.word	0x00d60261
 8004668:	0261010b 	.word	0x0261010b
 800466c:	0261010b 	.word	0x0261010b
 8004670:	02610261 	.word	0x02610261
 8004674:	00b90261 	.word	0x00b90261
 8004678:	02610261 	.word	0x02610261
 800467c:	02610152 	.word	0x02610152
 8004680:	02610261 	.word	0x02610261
 8004684:	02610261 	.word	0x02610261
 8004688:	02610199 	.word	0x02610199
 800468c:	00660261 	.word	0x00660261
 8004690:	02610261 	.word	0x02610261
 8004694:	02610261 	.word	0x02610261
 8004698:	02610261 	.word	0x02610261
 800469c:	02610261 	.word	0x02610261
 80046a0:	02610261 	.word	0x02610261
 80046a4:	006100cd 	.word	0x006100cd
 80046a8:	010b010b 	.word	0x010b010b
 80046ac:	00bc010b 	.word	0x00bc010b
 80046b0:	02610061 	.word	0x02610061
 80046b4:	00bf0261 	.word	0x00bf0261
 80046b8:	01340261 	.word	0x01340261
 80046bc:	016f0154 	.word	0x016f0154
 80046c0:	026100ca 	.word	0x026100ca
 80046c4:	02610180 	.word	0x02610180
 80046c8:	0261019b 	.word	0x0261019b
 80046cc:	01b30261 	.word	0x01b30261
 80046d0:	2201      	movs	r2, #1
 80046d2:	212b      	movs	r1, #43	; 0x2b
 80046d4:	e002      	b.n	80046dc <_svfprintf_r+0x1a4>
 80046d6:	b909      	cbnz	r1, 80046dc <_svfprintf_r+0x1a4>
 80046d8:	2201      	movs	r2, #1
 80046da:	2120      	movs	r1, #32
 80046dc:	9b05      	ldr	r3, [sp, #20]
 80046de:	e793      	b.n	8004608 <_svfprintf_r+0xd0>
 80046e0:	2a00      	cmp	r2, #0
 80046e2:	d077      	beq.n	80047d4 <_svfprintf_r+0x29c>
 80046e4:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80046e8:	e074      	b.n	80047d4 <_svfprintf_r+0x29c>
 80046ea:	b10a      	cbz	r2, 80046f0 <_svfprintf_r+0x1b8>
 80046ec:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80046f0:	4b41      	ldr	r3, [pc, #260]	; (80047f8 <_svfprintf_r+0x2c0>)
 80046f2:	e14b      	b.n	800498c <_svfprintf_r+0x454>
 80046f4:	f045 0501 	orr.w	r5, r5, #1
 80046f8:	e7f0      	b.n	80046dc <_svfprintf_r+0x1a4>
 80046fa:	683e      	ldr	r6, [r7, #0]
 80046fc:	9609      	str	r6, [sp, #36]	; 0x24
 80046fe:	2e00      	cmp	r6, #0
 8004700:	f107 0304 	add.w	r3, r7, #4
 8004704:	db01      	blt.n	800470a <_svfprintf_r+0x1d2>
 8004706:	461f      	mov	r7, r3
 8004708:	e7e8      	b.n	80046dc <_svfprintf_r+0x1a4>
 800470a:	4276      	negs	r6, r6
 800470c:	9609      	str	r6, [sp, #36]	; 0x24
 800470e:	461f      	mov	r7, r3
 8004710:	f045 0504 	orr.w	r5, r5, #4
 8004714:	e7e2      	b.n	80046dc <_svfprintf_r+0x1a4>
 8004716:	9e05      	ldr	r6, [sp, #20]
 8004718:	9b05      	ldr	r3, [sp, #20]
 800471a:	7836      	ldrb	r6, [r6, #0]
 800471c:	9602      	str	r6, [sp, #8]
 800471e:	2e2a      	cmp	r6, #42	; 0x2a
 8004720:	f103 0301 	add.w	r3, r3, #1
 8004724:	d002      	beq.n	800472c <_svfprintf_r+0x1f4>
 8004726:	f04f 0900 	mov.w	r9, #0
 800472a:	e00a      	b.n	8004742 <_svfprintf_r+0x20a>
 800472c:	f8d7 9000 	ldr.w	r9, [r7]
 8004730:	9305      	str	r3, [sp, #20]
 8004732:	1d3e      	adds	r6, r7, #4
 8004734:	f1b9 0f00 	cmp.w	r9, #0
 8004738:	4637      	mov	r7, r6
 800473a:	dacf      	bge.n	80046dc <_svfprintf_r+0x1a4>
 800473c:	f04f 39ff 	mov.w	r9, #4294967295
 8004740:	e7cc      	b.n	80046dc <_svfprintf_r+0x1a4>
 8004742:	9305      	str	r3, [sp, #20]
 8004744:	9b02      	ldr	r3, [sp, #8]
 8004746:	3b30      	subs	r3, #48	; 0x30
 8004748:	2b09      	cmp	r3, #9
 800474a:	d808      	bhi.n	800475e <_svfprintf_r+0x226>
 800474c:	fb00 3909 	mla	r9, r0, r9, r3
 8004750:	9b05      	ldr	r3, [sp, #20]
 8004752:	461e      	mov	r6, r3
 8004754:	f816 3b01 	ldrb.w	r3, [r6], #1
 8004758:	9302      	str	r3, [sp, #8]
 800475a:	4633      	mov	r3, r6
 800475c:	e7f1      	b.n	8004742 <_svfprintf_r+0x20a>
 800475e:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 8004762:	e755      	b.n	8004610 <_svfprintf_r+0xd8>
 8004764:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8004768:	e7b8      	b.n	80046dc <_svfprintf_r+0x1a4>
 800476a:	2300      	movs	r3, #0
 800476c:	9309      	str	r3, [sp, #36]	; 0x24
 800476e:	9b02      	ldr	r3, [sp, #8]
 8004770:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004772:	3b30      	subs	r3, #48	; 0x30
 8004774:	fb00 3306 	mla	r3, r0, r6, r3
 8004778:	9309      	str	r3, [sp, #36]	; 0x24
 800477a:	9b05      	ldr	r3, [sp, #20]
 800477c:	461e      	mov	r6, r3
 800477e:	f816 3b01 	ldrb.w	r3, [r6], #1
 8004782:	9302      	str	r3, [sp, #8]
 8004784:	9b02      	ldr	r3, [sp, #8]
 8004786:	9605      	str	r6, [sp, #20]
 8004788:	3b30      	subs	r3, #48	; 0x30
 800478a:	2b09      	cmp	r3, #9
 800478c:	d9ef      	bls.n	800476e <_svfprintf_r+0x236>
 800478e:	e73f      	b.n	8004610 <_svfprintf_r+0xd8>
 8004790:	f045 0508 	orr.w	r5, r5, #8
 8004794:	e7a2      	b.n	80046dc <_svfprintf_r+0x1a4>
 8004796:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800479a:	e79f      	b.n	80046dc <_svfprintf_r+0x1a4>
 800479c:	9b05      	ldr	r3, [sp, #20]
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	2b6c      	cmp	r3, #108	; 0x6c
 80047a2:	d103      	bne.n	80047ac <_svfprintf_r+0x274>
 80047a4:	9b05      	ldr	r3, [sp, #20]
 80047a6:	3301      	adds	r3, #1
 80047a8:	9305      	str	r3, [sp, #20]
 80047aa:	e002      	b.n	80047b2 <_svfprintf_r+0x27a>
 80047ac:	f045 0510 	orr.w	r5, r5, #16
 80047b0:	e794      	b.n	80046dc <_svfprintf_r+0x1a4>
 80047b2:	f045 0520 	orr.w	r5, r5, #32
 80047b6:	e791      	b.n	80046dc <_svfprintf_r+0x1a4>
 80047b8:	1d3b      	adds	r3, r7, #4
 80047ba:	9303      	str	r3, [sp, #12]
 80047bc:	2600      	movs	r6, #0
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80047c4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80047c8:	e199      	b.n	8004afe <_svfprintf_r+0x5c6>
 80047ca:	b10a      	cbz	r2, 80047d0 <_svfprintf_r+0x298>
 80047cc:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80047d0:	f045 0510 	orr.w	r5, r5, #16
 80047d4:	06aa      	lsls	r2, r5, #26
 80047d6:	d511      	bpl.n	80047fc <_svfprintf_r+0x2c4>
 80047d8:	3707      	adds	r7, #7
 80047da:	f027 0707 	bic.w	r7, r7, #7
 80047de:	f107 0308 	add.w	r3, r7, #8
 80047e2:	9303      	str	r3, [sp, #12]
 80047e4:	e9d7 6700 	ldrd	r6, r7, [r7]
 80047e8:	e017      	b.n	800481a <_svfprintf_r+0x2e2>
 80047ea:	bf00      	nop
 80047ec:	f3af 8000 	nop.w
	...
 80047f8:	08007644 	.word	0x08007644
 80047fc:	f015 0f10 	tst.w	r5, #16
 8004800:	f107 0304 	add.w	r3, r7, #4
 8004804:	d002      	beq.n	800480c <_svfprintf_r+0x2d4>
 8004806:	9303      	str	r3, [sp, #12]
 8004808:	683e      	ldr	r6, [r7, #0]
 800480a:	e005      	b.n	8004818 <_svfprintf_r+0x2e0>
 800480c:	683e      	ldr	r6, [r7, #0]
 800480e:	9303      	str	r3, [sp, #12]
 8004810:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004814:	bf18      	it	ne
 8004816:	b236      	sxthne	r6, r6
 8004818:	17f7      	asrs	r7, r6, #31
 800481a:	2e00      	cmp	r6, #0
 800481c:	f177 0300 	sbcs.w	r3, r7, #0
 8004820:	f280 80de 	bge.w	80049e0 <_svfprintf_r+0x4a8>
 8004824:	4276      	negs	r6, r6
 8004826:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800482a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800482e:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8004832:	e0d5      	b.n	80049e0 <_svfprintf_r+0x4a8>
 8004834:	b10a      	cbz	r2, 800483a <_svfprintf_r+0x302>
 8004836:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800483a:	3707      	adds	r7, #7
 800483c:	f027 0707 	bic.w	r7, r7, #7
 8004840:	f107 0308 	add.w	r3, r7, #8
 8004844:	9303      	str	r3, [sp, #12]
 8004846:	ed97 7b00 	vldr	d7, [r7]
 800484a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800484e:	9b06      	ldr	r3, [sp, #24]
 8004850:	9312      	str	r3, [sp, #72]	; 0x48
 8004852:	9b07      	ldr	r3, [sp, #28]
 8004854:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004858:	9313      	str	r3, [sp, #76]	; 0x4c
 800485a:	f04f 32ff 	mov.w	r2, #4294967295
 800485e:	4bab      	ldr	r3, [pc, #684]	; (8004b0c <_svfprintf_r+0x5d4>)
 8004860:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8004864:	f7fc f9e6 	bl	8000c34 <__aeabi_dcmpun>
 8004868:	2800      	cmp	r0, #0
 800486a:	f040 84f1 	bne.w	8005250 <_svfprintf_r+0xd18>
 800486e:	f04f 32ff 	mov.w	r2, #4294967295
 8004872:	4ba6      	ldr	r3, [pc, #664]	; (8004b0c <_svfprintf_r+0x5d4>)
 8004874:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8004878:	f7fc f9be 	bl	8000bf8 <__aeabi_dcmple>
 800487c:	2800      	cmp	r0, #0
 800487e:	f040 84e7 	bne.w	8005250 <_svfprintf_r+0xd18>
 8004882:	f000 bdfd 	b.w	8005480 <_svfprintf_r+0xf48>
 8004886:	b10a      	cbz	r2, 800488c <_svfprintf_r+0x354>
 8004888:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800488c:	f015 0f20 	tst.w	r5, #32
 8004890:	f107 0304 	add.w	r3, r7, #4
 8004894:	d007      	beq.n	80048a6 <_svfprintf_r+0x36e>
 8004896:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	17ce      	asrs	r6, r1, #31
 800489c:	4608      	mov	r0, r1
 800489e:	4631      	mov	r1, r6
 80048a0:	e9c2 0100 	strd	r0, r1, [r2]
 80048a4:	e00b      	b.n	80048be <_svfprintf_r+0x386>
 80048a6:	06e9      	lsls	r1, r5, #27
 80048a8:	d406      	bmi.n	80048b8 <_svfprintf_r+0x380>
 80048aa:	066a      	lsls	r2, r5, #25
 80048ac:	d504      	bpl.n	80048b8 <_svfprintf_r+0x380>
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80048b4:	8011      	strh	r1, [r2, #0]
 80048b6:	e002      	b.n	80048be <_svfprintf_r+0x386>
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	990a      	ldr	r1, [sp, #40]	; 0x28
 80048bc:	6011      	str	r1, [r2, #0]
 80048be:	461f      	mov	r7, r3
 80048c0:	e670      	b.n	80045a4 <_svfprintf_r+0x6c>
 80048c2:	f045 0510 	orr.w	r5, r5, #16
 80048c6:	f015 0320 	ands.w	r3, r5, #32
 80048ca:	d009      	beq.n	80048e0 <_svfprintf_r+0x3a8>
 80048cc:	3707      	adds	r7, #7
 80048ce:	f027 0707 	bic.w	r7, r7, #7
 80048d2:	f107 0308 	add.w	r3, r7, #8
 80048d6:	e9d7 6700 	ldrd	r6, r7, [r7]
 80048da:	9303      	str	r3, [sp, #12]
 80048dc:	2300      	movs	r3, #0
 80048de:	e07b      	b.n	80049d8 <_svfprintf_r+0x4a0>
 80048e0:	1d3a      	adds	r2, r7, #4
 80048e2:	f015 0110 	ands.w	r1, r5, #16
 80048e6:	9203      	str	r2, [sp, #12]
 80048e8:	d105      	bne.n	80048f6 <_svfprintf_r+0x3be>
 80048ea:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 80048ee:	d002      	beq.n	80048f6 <_svfprintf_r+0x3be>
 80048f0:	883e      	ldrh	r6, [r7, #0]
 80048f2:	2700      	movs	r7, #0
 80048f4:	e7f2      	b.n	80048dc <_svfprintf_r+0x3a4>
 80048f6:	683e      	ldr	r6, [r7, #0]
 80048f8:	2700      	movs	r7, #0
 80048fa:	e06d      	b.n	80049d8 <_svfprintf_r+0x4a0>
 80048fc:	1d3b      	adds	r3, r7, #4
 80048fe:	9303      	str	r3, [sp, #12]
 8004900:	2330      	movs	r3, #48	; 0x30
 8004902:	2278      	movs	r2, #120	; 0x78
 8004904:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8004908:	4b81      	ldr	r3, [pc, #516]	; (8004b10 <_svfprintf_r+0x5d8>)
 800490a:	683e      	ldr	r6, [r7, #0]
 800490c:	9311      	str	r3, [sp, #68]	; 0x44
 800490e:	2700      	movs	r7, #0
 8004910:	f045 0502 	orr.w	r5, r5, #2
 8004914:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8004918:	2302      	movs	r3, #2
 800491a:	9202      	str	r2, [sp, #8]
 800491c:	e05c      	b.n	80049d8 <_svfprintf_r+0x4a0>
 800491e:	2600      	movs	r6, #0
 8004920:	1d3b      	adds	r3, r7, #4
 8004922:	45b1      	cmp	r9, r6
 8004924:	9303      	str	r3, [sp, #12]
 8004926:	f8d7 8000 	ldr.w	r8, [r7]
 800492a:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800492e:	db0a      	blt.n	8004946 <_svfprintf_r+0x40e>
 8004930:	464a      	mov	r2, r9
 8004932:	4631      	mov	r1, r6
 8004934:	4640      	mov	r0, r8
 8004936:	f7fb fcd3 	bl	80002e0 <memchr>
 800493a:	2800      	cmp	r0, #0
 800493c:	f000 80ea 	beq.w	8004b14 <_svfprintf_r+0x5dc>
 8004940:	ebc8 0900 	rsb	r9, r8, r0
 8004944:	e0e7      	b.n	8004b16 <_svfprintf_r+0x5de>
 8004946:	4640      	mov	r0, r8
 8004948:	f7fb fd1a 	bl	8000380 <strlen>
 800494c:	4681      	mov	r9, r0
 800494e:	e0e2      	b.n	8004b16 <_svfprintf_r+0x5de>
 8004950:	f045 0510 	orr.w	r5, r5, #16
 8004954:	06ae      	lsls	r6, r5, #26
 8004956:	d508      	bpl.n	800496a <_svfprintf_r+0x432>
 8004958:	3707      	adds	r7, #7
 800495a:	f027 0707 	bic.w	r7, r7, #7
 800495e:	f107 0308 	add.w	r3, r7, #8
 8004962:	9303      	str	r3, [sp, #12]
 8004964:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004968:	e00a      	b.n	8004980 <_svfprintf_r+0x448>
 800496a:	1d3b      	adds	r3, r7, #4
 800496c:	f015 0f10 	tst.w	r5, #16
 8004970:	9303      	str	r3, [sp, #12]
 8004972:	d103      	bne.n	800497c <_svfprintf_r+0x444>
 8004974:	0668      	lsls	r0, r5, #25
 8004976:	d501      	bpl.n	800497c <_svfprintf_r+0x444>
 8004978:	883e      	ldrh	r6, [r7, #0]
 800497a:	e000      	b.n	800497e <_svfprintf_r+0x446>
 800497c:	683e      	ldr	r6, [r7, #0]
 800497e:	2700      	movs	r7, #0
 8004980:	2301      	movs	r3, #1
 8004982:	e029      	b.n	80049d8 <_svfprintf_r+0x4a0>
 8004984:	b10a      	cbz	r2, 800498a <_svfprintf_r+0x452>
 8004986:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800498a:	4b61      	ldr	r3, [pc, #388]	; (8004b10 <_svfprintf_r+0x5d8>)
 800498c:	9311      	str	r3, [sp, #68]	; 0x44
 800498e:	06a9      	lsls	r1, r5, #26
 8004990:	d508      	bpl.n	80049a4 <_svfprintf_r+0x46c>
 8004992:	3707      	adds	r7, #7
 8004994:	f027 0707 	bic.w	r7, r7, #7
 8004998:	f107 0308 	add.w	r3, r7, #8
 800499c:	9303      	str	r3, [sp, #12]
 800499e:	e9d7 6700 	ldrd	r6, r7, [r7]
 80049a2:	e00a      	b.n	80049ba <_svfprintf_r+0x482>
 80049a4:	1d3b      	adds	r3, r7, #4
 80049a6:	f015 0f10 	tst.w	r5, #16
 80049aa:	9303      	str	r3, [sp, #12]
 80049ac:	d103      	bne.n	80049b6 <_svfprintf_r+0x47e>
 80049ae:	066a      	lsls	r2, r5, #25
 80049b0:	d501      	bpl.n	80049b6 <_svfprintf_r+0x47e>
 80049b2:	883e      	ldrh	r6, [r7, #0]
 80049b4:	e000      	b.n	80049b8 <_svfprintf_r+0x480>
 80049b6:	683e      	ldr	r6, [r7, #0]
 80049b8:	2700      	movs	r7, #0
 80049ba:	07eb      	lsls	r3, r5, #31
 80049bc:	d50b      	bpl.n	80049d6 <_svfprintf_r+0x49e>
 80049be:	ea56 0307 	orrs.w	r3, r6, r7
 80049c2:	d008      	beq.n	80049d6 <_svfprintf_r+0x49e>
 80049c4:	2330      	movs	r3, #48	; 0x30
 80049c6:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80049ca:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80049ce:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 80049d2:	f045 0502 	orr.w	r5, r5, #2
 80049d6:	2302      	movs	r3, #2
 80049d8:	2200      	movs	r2, #0
 80049da:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80049de:	e000      	b.n	80049e2 <_svfprintf_r+0x4aa>
 80049e0:	2301      	movs	r3, #1
 80049e2:	f1b9 0f00 	cmp.w	r9, #0
 80049e6:	f2c0 855c 	blt.w	80054a2 <_svfprintf_r+0xf6a>
 80049ea:	ea56 0207 	orrs.w	r2, r6, r7
 80049ee:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 80049f2:	d103      	bne.n	80049fc <_svfprintf_r+0x4c4>
 80049f4:	f1b9 0f00 	cmp.w	r9, #0
 80049f8:	d05f      	beq.n	8004aba <_svfprintf_r+0x582>
 80049fa:	e006      	b.n	8004a0a <_svfprintf_r+0x4d2>
 80049fc:	460d      	mov	r5, r1
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d025      	beq.n	8004a4e <_svfprintf_r+0x516>
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d046      	beq.n	8004a94 <_svfprintf_r+0x55c>
 8004a06:	4629      	mov	r1, r5
 8004a08:	e007      	b.n	8004a1a <_svfprintf_r+0x4e2>
 8004a0a:	460d      	mov	r5, r1
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d022      	beq.n	8004a56 <_svfprintf_r+0x51e>
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d03d      	beq.n	8004a90 <_svfprintf_r+0x558>
 8004a14:	4629      	mov	r1, r5
 8004a16:	2600      	movs	r6, #0
 8004a18:	2700      	movs	r7, #0
 8004a1a:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8004a1e:	08f2      	lsrs	r2, r6, #3
 8004a20:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8004a24:	08f8      	lsrs	r0, r7, #3
 8004a26:	f006 0307 	and.w	r3, r6, #7
 8004a2a:	4607      	mov	r7, r0
 8004a2c:	4616      	mov	r6, r2
 8004a2e:	3330      	adds	r3, #48	; 0x30
 8004a30:	ea56 0207 	orrs.w	r2, r6, r7
 8004a34:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8004a38:	d1f1      	bne.n	8004a1e <_svfprintf_r+0x4e6>
 8004a3a:	07e8      	lsls	r0, r5, #31
 8004a3c:	d548      	bpl.n	8004ad0 <_svfprintf_r+0x598>
 8004a3e:	2b30      	cmp	r3, #48	; 0x30
 8004a40:	d046      	beq.n	8004ad0 <_svfprintf_r+0x598>
 8004a42:	2330      	movs	r3, #48	; 0x30
 8004a44:	f808 3c01 	strb.w	r3, [r8, #-1]
 8004a48:	f108 38ff 	add.w	r8, r8, #4294967295
 8004a4c:	e040      	b.n	8004ad0 <_svfprintf_r+0x598>
 8004a4e:	2f00      	cmp	r7, #0
 8004a50:	bf08      	it	eq
 8004a52:	2e0a      	cmpeq	r6, #10
 8004a54:	d205      	bcs.n	8004a62 <_svfprintf_r+0x52a>
 8004a56:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8004a5a:	3630      	adds	r6, #48	; 0x30
 8004a5c:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8004a60:	e029      	b.n	8004ab6 <_svfprintf_r+0x57e>
 8004a62:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8004a66:	4630      	mov	r0, r6
 8004a68:	4639      	mov	r1, r7
 8004a6a:	220a      	movs	r2, #10
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f7fc f91f 	bl	8000cb0 <__aeabi_uldivmod>
 8004a72:	3230      	adds	r2, #48	; 0x30
 8004a74:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8004a78:	2300      	movs	r3, #0
 8004a7a:	4630      	mov	r0, r6
 8004a7c:	4639      	mov	r1, r7
 8004a7e:	220a      	movs	r2, #10
 8004a80:	f7fc f916 	bl	8000cb0 <__aeabi_uldivmod>
 8004a84:	4606      	mov	r6, r0
 8004a86:	460f      	mov	r7, r1
 8004a88:	ea56 0307 	orrs.w	r3, r6, r7
 8004a8c:	d1eb      	bne.n	8004a66 <_svfprintf_r+0x52e>
 8004a8e:	e012      	b.n	8004ab6 <_svfprintf_r+0x57e>
 8004a90:	2600      	movs	r6, #0
 8004a92:	2700      	movs	r7, #0
 8004a94:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8004a98:	f006 030f 	and.w	r3, r6, #15
 8004a9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004a9e:	5cd3      	ldrb	r3, [r2, r3]
 8004aa0:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8004aa4:	0933      	lsrs	r3, r6, #4
 8004aa6:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8004aaa:	093a      	lsrs	r2, r7, #4
 8004aac:	461e      	mov	r6, r3
 8004aae:	4617      	mov	r7, r2
 8004ab0:	ea56 0307 	orrs.w	r3, r6, r7
 8004ab4:	d1f0      	bne.n	8004a98 <_svfprintf_r+0x560>
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	e00a      	b.n	8004ad0 <_svfprintf_r+0x598>
 8004aba:	b93b      	cbnz	r3, 8004acc <_svfprintf_r+0x594>
 8004abc:	07ea      	lsls	r2, r5, #31
 8004abe:	d505      	bpl.n	8004acc <_svfprintf_r+0x594>
 8004ac0:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8004ac4:	2330      	movs	r3, #48	; 0x30
 8004ac6:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8004aca:	e001      	b.n	8004ad0 <_svfprintf_r+0x598>
 8004acc:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8004ad0:	464e      	mov	r6, r9
 8004ad2:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8004ad6:	ebc8 0909 	rsb	r9, r8, r9
 8004ada:	460d      	mov	r5, r1
 8004adc:	2700      	movs	r7, #0
 8004ade:	e01b      	b.n	8004b18 <_svfprintf_r+0x5e0>
 8004ae0:	b10a      	cbz	r2, 8004ae6 <_svfprintf_r+0x5ae>
 8004ae2:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8004ae6:	9b02      	ldr	r3, [sp, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 83a0 	beq.w	800522e <_svfprintf_r+0xcf6>
 8004aee:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004af2:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8004af6:	2600      	movs	r6, #0
 8004af8:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8004afc:	9703      	str	r7, [sp, #12]
 8004afe:	f04f 0901 	mov.w	r9, #1
 8004b02:	4637      	mov	r7, r6
 8004b04:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8004b08:	e006      	b.n	8004b18 <_svfprintf_r+0x5e0>
 8004b0a:	bf00      	nop
 8004b0c:	7fefffff 	.word	0x7fefffff
 8004b10:	08007655 	.word	0x08007655
 8004b14:	4606      	mov	r6, r0
 8004b16:	4637      	mov	r7, r6
 8004b18:	454e      	cmp	r6, r9
 8004b1a:	4633      	mov	r3, r6
 8004b1c:	bfb8      	it	lt
 8004b1e:	464b      	movlt	r3, r9
 8004b20:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b22:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8004b26:	b113      	cbz	r3, 8004b2e <_svfprintf_r+0x5f6>
 8004b28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b2e:	f015 0302 	ands.w	r3, r5, #2
 8004b32:	9314      	str	r3, [sp, #80]	; 0x50
 8004b34:	bf1e      	ittt	ne
 8004b36:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8004b38:	3302      	addne	r3, #2
 8004b3a:	930b      	strne	r3, [sp, #44]	; 0x2c
 8004b3c:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8004b40:	9315      	str	r3, [sp, #84]	; 0x54
 8004b42:	d139      	bne.n	8004bb8 <_svfprintf_r+0x680>
 8004b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b48:	1a9b      	subs	r3, r3, r2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	930c      	str	r3, [sp, #48]	; 0x30
 8004b4e:	dd33      	ble.n	8004bb8 <_svfprintf_r+0x680>
 8004b50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b52:	2b10      	cmp	r3, #16
 8004b54:	4ba6      	ldr	r3, [pc, #664]	; (8004df0 <_svfprintf_r+0x8b8>)
 8004b56:	6023      	str	r3, [r4, #0]
 8004b58:	dd18      	ble.n	8004b8c <_svfprintf_r+0x654>
 8004b5a:	2310      	movs	r3, #16
 8004b5c:	6063      	str	r3, [r4, #4]
 8004b5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b60:	3310      	adds	r3, #16
 8004b62:	9321      	str	r3, [sp, #132]	; 0x84
 8004b64:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004b66:	3301      	adds	r3, #1
 8004b68:	2b07      	cmp	r3, #7
 8004b6a:	9320      	str	r3, [sp, #128]	; 0x80
 8004b6c:	dc01      	bgt.n	8004b72 <_svfprintf_r+0x63a>
 8004b6e:	3408      	adds	r4, #8
 8004b70:	e008      	b.n	8004b84 <_svfprintf_r+0x64c>
 8004b72:	aa1f      	add	r2, sp, #124	; 0x7c
 8004b74:	4659      	mov	r1, fp
 8004b76:	4650      	mov	r0, sl
 8004b78:	f002 f812 	bl	8006ba0 <__ssprint_r>
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	f040 835d 	bne.w	800523c <_svfprintf_r+0xd04>
 8004b82:	ac2c      	add	r4, sp, #176	; 0xb0
 8004b84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b86:	3b10      	subs	r3, #16
 8004b88:	930c      	str	r3, [sp, #48]	; 0x30
 8004b8a:	e7e1      	b.n	8004b50 <_svfprintf_r+0x618>
 8004b8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b8e:	6063      	str	r3, [r4, #4]
 8004b90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b94:	4413      	add	r3, r2
 8004b96:	9321      	str	r3, [sp, #132]	; 0x84
 8004b98:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	2b07      	cmp	r3, #7
 8004b9e:	9320      	str	r3, [sp, #128]	; 0x80
 8004ba0:	dc01      	bgt.n	8004ba6 <_svfprintf_r+0x66e>
 8004ba2:	3408      	adds	r4, #8
 8004ba4:	e008      	b.n	8004bb8 <_svfprintf_r+0x680>
 8004ba6:	aa1f      	add	r2, sp, #124	; 0x7c
 8004ba8:	4659      	mov	r1, fp
 8004baa:	4650      	mov	r0, sl
 8004bac:	f001 fff8 	bl	8006ba0 <__ssprint_r>
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	f040 8343 	bne.w	800523c <_svfprintf_r+0xd04>
 8004bb6:	ac2c      	add	r4, sp, #176	; 0xb0
 8004bb8:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8004bbc:	b1bb      	cbz	r3, 8004bee <_svfprintf_r+0x6b6>
 8004bbe:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8004bc2:	6023      	str	r3, [r4, #0]
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	6063      	str	r3, [r4, #4]
 8004bc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bca:	3301      	adds	r3, #1
 8004bcc:	9321      	str	r3, [sp, #132]	; 0x84
 8004bce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	2b07      	cmp	r3, #7
 8004bd4:	9320      	str	r3, [sp, #128]	; 0x80
 8004bd6:	dc01      	bgt.n	8004bdc <_svfprintf_r+0x6a4>
 8004bd8:	3408      	adds	r4, #8
 8004bda:	e008      	b.n	8004bee <_svfprintf_r+0x6b6>
 8004bdc:	aa1f      	add	r2, sp, #124	; 0x7c
 8004bde:	4659      	mov	r1, fp
 8004be0:	4650      	mov	r0, sl
 8004be2:	f001 ffdd 	bl	8006ba0 <__ssprint_r>
 8004be6:	2800      	cmp	r0, #0
 8004be8:	f040 8328 	bne.w	800523c <_svfprintf_r+0xd04>
 8004bec:	ac2c      	add	r4, sp, #176	; 0xb0
 8004bee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004bf0:	b1b3      	cbz	r3, 8004c20 <_svfprintf_r+0x6e8>
 8004bf2:	ab18      	add	r3, sp, #96	; 0x60
 8004bf4:	6023      	str	r3, [r4, #0]
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	6063      	str	r3, [r4, #4]
 8004bfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bfc:	3302      	adds	r3, #2
 8004bfe:	9321      	str	r3, [sp, #132]	; 0x84
 8004c00:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004c02:	3301      	adds	r3, #1
 8004c04:	2b07      	cmp	r3, #7
 8004c06:	9320      	str	r3, [sp, #128]	; 0x80
 8004c08:	dc01      	bgt.n	8004c0e <_svfprintf_r+0x6d6>
 8004c0a:	3408      	adds	r4, #8
 8004c0c:	e008      	b.n	8004c20 <_svfprintf_r+0x6e8>
 8004c0e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004c10:	4659      	mov	r1, fp
 8004c12:	4650      	mov	r0, sl
 8004c14:	f001 ffc4 	bl	8006ba0 <__ssprint_r>
 8004c18:	2800      	cmp	r0, #0
 8004c1a:	f040 830f 	bne.w	800523c <_svfprintf_r+0xd04>
 8004c1e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004c20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004c22:	2b80      	cmp	r3, #128	; 0x80
 8004c24:	d135      	bne.n	8004c92 <_svfprintf_r+0x75a>
 8004c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c2a:	1a9b      	subs	r3, r3, r2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	dd30      	ble.n	8004c92 <_svfprintf_r+0x75a>
 8004c30:	4a70      	ldr	r2, [pc, #448]	; (8004df4 <_svfprintf_r+0x8bc>)
 8004c32:	6022      	str	r2, [r4, #0]
 8004c34:	2b10      	cmp	r3, #16
 8004c36:	dd18      	ble.n	8004c6a <_svfprintf_r+0x732>
 8004c38:	2210      	movs	r2, #16
 8004c3a:	6062      	str	r2, [r4, #4]
 8004c3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004c3e:	3210      	adds	r2, #16
 8004c40:	9221      	str	r2, [sp, #132]	; 0x84
 8004c42:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004c44:	3201      	adds	r2, #1
 8004c46:	2a07      	cmp	r2, #7
 8004c48:	9220      	str	r2, [sp, #128]	; 0x80
 8004c4a:	dc01      	bgt.n	8004c50 <_svfprintf_r+0x718>
 8004c4c:	3408      	adds	r4, #8
 8004c4e:	e00a      	b.n	8004c66 <_svfprintf_r+0x72e>
 8004c50:	aa1f      	add	r2, sp, #124	; 0x7c
 8004c52:	4659      	mov	r1, fp
 8004c54:	4650      	mov	r0, sl
 8004c56:	930c      	str	r3, [sp, #48]	; 0x30
 8004c58:	f001 ffa2 	bl	8006ba0 <__ssprint_r>
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	f040 82ed 	bne.w	800523c <_svfprintf_r+0xd04>
 8004c62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c64:	ac2c      	add	r4, sp, #176	; 0xb0
 8004c66:	3b10      	subs	r3, #16
 8004c68:	e7e2      	b.n	8004c30 <_svfprintf_r+0x6f8>
 8004c6a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004c6c:	6063      	str	r3, [r4, #4]
 8004c6e:	4413      	add	r3, r2
 8004c70:	9321      	str	r3, [sp, #132]	; 0x84
 8004c72:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004c74:	3301      	adds	r3, #1
 8004c76:	2b07      	cmp	r3, #7
 8004c78:	9320      	str	r3, [sp, #128]	; 0x80
 8004c7a:	dc01      	bgt.n	8004c80 <_svfprintf_r+0x748>
 8004c7c:	3408      	adds	r4, #8
 8004c7e:	e008      	b.n	8004c92 <_svfprintf_r+0x75a>
 8004c80:	aa1f      	add	r2, sp, #124	; 0x7c
 8004c82:	4659      	mov	r1, fp
 8004c84:	4650      	mov	r0, sl
 8004c86:	f001 ff8b 	bl	8006ba0 <__ssprint_r>
 8004c8a:	2800      	cmp	r0, #0
 8004c8c:	f040 82d6 	bne.w	800523c <_svfprintf_r+0xd04>
 8004c90:	ac2c      	add	r4, sp, #176	; 0xb0
 8004c92:	ebc9 0606 	rsb	r6, r9, r6
 8004c96:	2e00      	cmp	r6, #0
 8004c98:	dd2e      	ble.n	8004cf8 <_svfprintf_r+0x7c0>
 8004c9a:	4b56      	ldr	r3, [pc, #344]	; (8004df4 <_svfprintf_r+0x8bc>)
 8004c9c:	6023      	str	r3, [r4, #0]
 8004c9e:	2e10      	cmp	r6, #16
 8004ca0:	dd16      	ble.n	8004cd0 <_svfprintf_r+0x798>
 8004ca2:	2310      	movs	r3, #16
 8004ca4:	6063      	str	r3, [r4, #4]
 8004ca6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ca8:	3310      	adds	r3, #16
 8004caa:	9321      	str	r3, [sp, #132]	; 0x84
 8004cac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004cae:	3301      	adds	r3, #1
 8004cb0:	2b07      	cmp	r3, #7
 8004cb2:	9320      	str	r3, [sp, #128]	; 0x80
 8004cb4:	dc01      	bgt.n	8004cba <_svfprintf_r+0x782>
 8004cb6:	3408      	adds	r4, #8
 8004cb8:	e008      	b.n	8004ccc <_svfprintf_r+0x794>
 8004cba:	aa1f      	add	r2, sp, #124	; 0x7c
 8004cbc:	4659      	mov	r1, fp
 8004cbe:	4650      	mov	r0, sl
 8004cc0:	f001 ff6e 	bl	8006ba0 <__ssprint_r>
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	f040 82b9 	bne.w	800523c <_svfprintf_r+0xd04>
 8004cca:	ac2c      	add	r4, sp, #176	; 0xb0
 8004ccc:	3e10      	subs	r6, #16
 8004cce:	e7e4      	b.n	8004c9a <_svfprintf_r+0x762>
 8004cd0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004cd2:	9821      	ldr	r0, [sp, #132]	; 0x84
 8004cd4:	6066      	str	r6, [r4, #4]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	4406      	add	r6, r0
 8004cda:	2b07      	cmp	r3, #7
 8004cdc:	9621      	str	r6, [sp, #132]	; 0x84
 8004cde:	9320      	str	r3, [sp, #128]	; 0x80
 8004ce0:	dc01      	bgt.n	8004ce6 <_svfprintf_r+0x7ae>
 8004ce2:	3408      	adds	r4, #8
 8004ce4:	e008      	b.n	8004cf8 <_svfprintf_r+0x7c0>
 8004ce6:	aa1f      	add	r2, sp, #124	; 0x7c
 8004ce8:	4659      	mov	r1, fp
 8004cea:	4650      	mov	r0, sl
 8004cec:	f001 ff58 	bl	8006ba0 <__ssprint_r>
 8004cf0:	2800      	cmp	r0, #0
 8004cf2:	f040 82a3 	bne.w	800523c <_svfprintf_r+0xd04>
 8004cf6:	ac2c      	add	r4, sp, #176	; 0xb0
 8004cf8:	05eb      	lsls	r3, r5, #23
 8004cfa:	d414      	bmi.n	8004d26 <_svfprintf_r+0x7ee>
 8004cfc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004cfe:	e884 0300 	stmia.w	r4, {r8, r9}
 8004d02:	444b      	add	r3, r9
 8004d04:	9321      	str	r3, [sp, #132]	; 0x84
 8004d06:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004d08:	3301      	adds	r3, #1
 8004d0a:	2b07      	cmp	r3, #7
 8004d0c:	9320      	str	r3, [sp, #128]	; 0x80
 8004d0e:	f340 8244 	ble.w	800519a <_svfprintf_r+0xc62>
 8004d12:	aa1f      	add	r2, sp, #124	; 0x7c
 8004d14:	4659      	mov	r1, fp
 8004d16:	4650      	mov	r0, sl
 8004d18:	f001 ff42 	bl	8006ba0 <__ssprint_r>
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	f040 828d 	bne.w	800523c <_svfprintf_r+0xd04>
 8004d22:	ac2c      	add	r4, sp, #176	; 0xb0
 8004d24:	e23a      	b.n	800519c <_svfprintf_r+0xc64>
 8004d26:	9b02      	ldr	r3, [sp, #8]
 8004d28:	2b65      	cmp	r3, #101	; 0x65
 8004d2a:	f340 81ad 	ble.w	8005088 <_svfprintf_r+0xb50>
 8004d2e:	2200      	movs	r2, #0
 8004d30:	2300      	movs	r3, #0
 8004d32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d36:	f7fb ff4b 	bl	8000bd0 <__aeabi_dcmpeq>
 8004d3a:	2800      	cmp	r0, #0
 8004d3c:	d05e      	beq.n	8004dfc <_svfprintf_r+0x8c4>
 8004d3e:	4b2e      	ldr	r3, [pc, #184]	; (8004df8 <_svfprintf_r+0x8c0>)
 8004d40:	6023      	str	r3, [r4, #0]
 8004d42:	2301      	movs	r3, #1
 8004d44:	6063      	str	r3, [r4, #4]
 8004d46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d48:	3301      	adds	r3, #1
 8004d4a:	9321      	str	r3, [sp, #132]	; 0x84
 8004d4c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004d4e:	3301      	adds	r3, #1
 8004d50:	2b07      	cmp	r3, #7
 8004d52:	9320      	str	r3, [sp, #128]	; 0x80
 8004d54:	dc01      	bgt.n	8004d5a <_svfprintf_r+0x822>
 8004d56:	3408      	adds	r4, #8
 8004d58:	e008      	b.n	8004d6c <_svfprintf_r+0x834>
 8004d5a:	aa1f      	add	r2, sp, #124	; 0x7c
 8004d5c:	4659      	mov	r1, fp
 8004d5e:	4650      	mov	r0, sl
 8004d60:	f001 ff1e 	bl	8006ba0 <__ssprint_r>
 8004d64:	2800      	cmp	r0, #0
 8004d66:	f040 8269 	bne.w	800523c <_svfprintf_r+0xd04>
 8004d6a:	ac2c      	add	r4, sp, #176	; 0xb0
 8004d6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004d6e:	9a04      	ldr	r2, [sp, #16]
 8004d70:	4293      	cmp	r3, r2
 8004d72:	db02      	blt.n	8004d7a <_svfprintf_r+0x842>
 8004d74:	07ee      	lsls	r6, r5, #31
 8004d76:	f140 8211 	bpl.w	800519c <_svfprintf_r+0xc64>
 8004d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d7c:	6023      	str	r3, [r4, #0]
 8004d7e:	9b08      	ldr	r3, [sp, #32]
 8004d80:	6063      	str	r3, [r4, #4]
 8004d82:	9a08      	ldr	r2, [sp, #32]
 8004d84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d86:	4413      	add	r3, r2
 8004d88:	9321      	str	r3, [sp, #132]	; 0x84
 8004d8a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	2b07      	cmp	r3, #7
 8004d90:	9320      	str	r3, [sp, #128]	; 0x80
 8004d92:	dc01      	bgt.n	8004d98 <_svfprintf_r+0x860>
 8004d94:	3408      	adds	r4, #8
 8004d96:	e008      	b.n	8004daa <_svfprintf_r+0x872>
 8004d98:	aa1f      	add	r2, sp, #124	; 0x7c
 8004d9a:	4659      	mov	r1, fp
 8004d9c:	4650      	mov	r0, sl
 8004d9e:	f001 feff 	bl	8006ba0 <__ssprint_r>
 8004da2:	2800      	cmp	r0, #0
 8004da4:	f040 824a 	bne.w	800523c <_svfprintf_r+0xd04>
 8004da8:	ac2c      	add	r4, sp, #176	; 0xb0
 8004daa:	9b04      	ldr	r3, [sp, #16]
 8004dac:	1e5e      	subs	r6, r3, #1
 8004dae:	2e00      	cmp	r6, #0
 8004db0:	f340 81f4 	ble.w	800519c <_svfprintf_r+0xc64>
 8004db4:	4f0f      	ldr	r7, [pc, #60]	; (8004df4 <_svfprintf_r+0x8bc>)
 8004db6:	f04f 0810 	mov.w	r8, #16
 8004dba:	2e10      	cmp	r6, #16
 8004dbc:	f340 8159 	ble.w	8005072 <_svfprintf_r+0xb3a>
 8004dc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004dc2:	3310      	adds	r3, #16
 8004dc4:	9321      	str	r3, [sp, #132]	; 0x84
 8004dc6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004dc8:	3301      	adds	r3, #1
 8004dca:	2b07      	cmp	r3, #7
 8004dcc:	e884 0180 	stmia.w	r4, {r7, r8}
 8004dd0:	9320      	str	r3, [sp, #128]	; 0x80
 8004dd2:	dc01      	bgt.n	8004dd8 <_svfprintf_r+0x8a0>
 8004dd4:	3408      	adds	r4, #8
 8004dd6:	e008      	b.n	8004dea <_svfprintf_r+0x8b2>
 8004dd8:	aa1f      	add	r2, sp, #124	; 0x7c
 8004dda:	4659      	mov	r1, fp
 8004ddc:	4650      	mov	r0, sl
 8004dde:	f001 fedf 	bl	8006ba0 <__ssprint_r>
 8004de2:	2800      	cmp	r0, #0
 8004de4:	f040 822a 	bne.w	800523c <_svfprintf_r+0xd04>
 8004de8:	ac2c      	add	r4, sp, #176	; 0xb0
 8004dea:	3e10      	subs	r6, #16
 8004dec:	e7e5      	b.n	8004dba <_svfprintf_r+0x882>
 8004dee:	bf00      	nop
 8004df0:	08007668 	.word	0x08007668
 8004df4:	08007624 	.word	0x08007624
 8004df8:	08007666 	.word	0x08007666
 8004dfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	dc7c      	bgt.n	8004efc <_svfprintf_r+0x9c4>
 8004e02:	4b9f      	ldr	r3, [pc, #636]	; (8005080 <_svfprintf_r+0xb48>)
 8004e04:	6023      	str	r3, [r4, #0]
 8004e06:	2301      	movs	r3, #1
 8004e08:	6063      	str	r3, [r4, #4]
 8004e0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	9321      	str	r3, [sp, #132]	; 0x84
 8004e10:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004e12:	3301      	adds	r3, #1
 8004e14:	2b07      	cmp	r3, #7
 8004e16:	9320      	str	r3, [sp, #128]	; 0x80
 8004e18:	dc01      	bgt.n	8004e1e <_svfprintf_r+0x8e6>
 8004e1a:	3408      	adds	r4, #8
 8004e1c:	e008      	b.n	8004e30 <_svfprintf_r+0x8f8>
 8004e1e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004e20:	4659      	mov	r1, fp
 8004e22:	4650      	mov	r0, sl
 8004e24:	f001 febc 	bl	8006ba0 <__ssprint_r>
 8004e28:	2800      	cmp	r0, #0
 8004e2a:	f040 8207 	bne.w	800523c <_svfprintf_r+0xd04>
 8004e2e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004e30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e32:	b923      	cbnz	r3, 8004e3e <_svfprintf_r+0x906>
 8004e34:	9b04      	ldr	r3, [sp, #16]
 8004e36:	b913      	cbnz	r3, 8004e3e <_svfprintf_r+0x906>
 8004e38:	07e8      	lsls	r0, r5, #31
 8004e3a:	f140 81af 	bpl.w	800519c <_svfprintf_r+0xc64>
 8004e3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e40:	6023      	str	r3, [r4, #0]
 8004e42:	9b08      	ldr	r3, [sp, #32]
 8004e44:	6063      	str	r3, [r4, #4]
 8004e46:	9a08      	ldr	r2, [sp, #32]
 8004e48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e4a:	4413      	add	r3, r2
 8004e4c:	9321      	str	r3, [sp, #132]	; 0x84
 8004e4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004e50:	3301      	adds	r3, #1
 8004e52:	2b07      	cmp	r3, #7
 8004e54:	9320      	str	r3, [sp, #128]	; 0x80
 8004e56:	dc02      	bgt.n	8004e5e <_svfprintf_r+0x926>
 8004e58:	f104 0308 	add.w	r3, r4, #8
 8004e5c:	e008      	b.n	8004e70 <_svfprintf_r+0x938>
 8004e5e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004e60:	4659      	mov	r1, fp
 8004e62:	4650      	mov	r0, sl
 8004e64:	f001 fe9c 	bl	8006ba0 <__ssprint_r>
 8004e68:	2800      	cmp	r0, #0
 8004e6a:	f040 81e7 	bne.w	800523c <_svfprintf_r+0xd04>
 8004e6e:	ab2c      	add	r3, sp, #176	; 0xb0
 8004e70:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004e72:	4276      	negs	r6, r6
 8004e74:	2e00      	cmp	r6, #0
 8004e76:	dd30      	ble.n	8004eda <_svfprintf_r+0x9a2>
 8004e78:	4f82      	ldr	r7, [pc, #520]	; (8005084 <_svfprintf_r+0xb4c>)
 8004e7a:	2410      	movs	r4, #16
 8004e7c:	2e10      	cmp	r6, #16
 8004e7e:	dd16      	ble.n	8004eae <_svfprintf_r+0x976>
 8004e80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004e82:	601f      	str	r7, [r3, #0]
 8004e84:	3210      	adds	r2, #16
 8004e86:	9221      	str	r2, [sp, #132]	; 0x84
 8004e88:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004e8a:	605c      	str	r4, [r3, #4]
 8004e8c:	3201      	adds	r2, #1
 8004e8e:	2a07      	cmp	r2, #7
 8004e90:	9220      	str	r2, [sp, #128]	; 0x80
 8004e92:	dc01      	bgt.n	8004e98 <_svfprintf_r+0x960>
 8004e94:	3308      	adds	r3, #8
 8004e96:	e008      	b.n	8004eaa <_svfprintf_r+0x972>
 8004e98:	aa1f      	add	r2, sp, #124	; 0x7c
 8004e9a:	4659      	mov	r1, fp
 8004e9c:	4650      	mov	r0, sl
 8004e9e:	f001 fe7f 	bl	8006ba0 <__ssprint_r>
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	f040 81ca 	bne.w	800523c <_svfprintf_r+0xd04>
 8004ea8:	ab2c      	add	r3, sp, #176	; 0xb0
 8004eaa:	3e10      	subs	r6, #16
 8004eac:	e7e6      	b.n	8004e7c <_svfprintf_r+0x944>
 8004eae:	4a75      	ldr	r2, [pc, #468]	; (8005084 <_svfprintf_r+0xb4c>)
 8004eb0:	e883 0044 	stmia.w	r3, {r2, r6}
 8004eb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004eb6:	4416      	add	r6, r2
 8004eb8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004eba:	9621      	str	r6, [sp, #132]	; 0x84
 8004ebc:	3201      	adds	r2, #1
 8004ebe:	2a07      	cmp	r2, #7
 8004ec0:	9220      	str	r2, [sp, #128]	; 0x80
 8004ec2:	dc01      	bgt.n	8004ec8 <_svfprintf_r+0x990>
 8004ec4:	3308      	adds	r3, #8
 8004ec6:	e008      	b.n	8004eda <_svfprintf_r+0x9a2>
 8004ec8:	aa1f      	add	r2, sp, #124	; 0x7c
 8004eca:	4659      	mov	r1, fp
 8004ecc:	4650      	mov	r0, sl
 8004ece:	f001 fe67 	bl	8006ba0 <__ssprint_r>
 8004ed2:	2800      	cmp	r0, #0
 8004ed4:	f040 81b2 	bne.w	800523c <_svfprintf_r+0xd04>
 8004ed8:	ab2c      	add	r3, sp, #176	; 0xb0
 8004eda:	9a04      	ldr	r2, [sp, #16]
 8004edc:	605a      	str	r2, [r3, #4]
 8004ede:	9904      	ldr	r1, [sp, #16]
 8004ee0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004ee2:	f8c3 8000 	str.w	r8, [r3]
 8004ee6:	440a      	add	r2, r1
 8004ee8:	9221      	str	r2, [sp, #132]	; 0x84
 8004eea:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004eec:	3201      	adds	r2, #1
 8004eee:	2a07      	cmp	r2, #7
 8004ef0:	9220      	str	r2, [sp, #128]	; 0x80
 8004ef2:	f73f af0e 	bgt.w	8004d12 <_svfprintf_r+0x7da>
 8004ef6:	f103 0408 	add.w	r4, r3, #8
 8004efa:	e14f      	b.n	800519c <_svfprintf_r+0xc64>
 8004efc:	9b04      	ldr	r3, [sp, #16]
 8004efe:	42bb      	cmp	r3, r7
 8004f00:	bfa8      	it	ge
 8004f02:	463b      	movge	r3, r7
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	461e      	mov	r6, r3
 8004f08:	dd15      	ble.n	8004f36 <_svfprintf_r+0x9fe>
 8004f0a:	6063      	str	r3, [r4, #4]
 8004f0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f0e:	f8c4 8000 	str.w	r8, [r4]
 8004f12:	4433      	add	r3, r6
 8004f14:	9321      	str	r3, [sp, #132]	; 0x84
 8004f16:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004f18:	3301      	adds	r3, #1
 8004f1a:	2b07      	cmp	r3, #7
 8004f1c:	9320      	str	r3, [sp, #128]	; 0x80
 8004f1e:	dc01      	bgt.n	8004f24 <_svfprintf_r+0x9ec>
 8004f20:	3408      	adds	r4, #8
 8004f22:	e008      	b.n	8004f36 <_svfprintf_r+0x9fe>
 8004f24:	aa1f      	add	r2, sp, #124	; 0x7c
 8004f26:	4659      	mov	r1, fp
 8004f28:	4650      	mov	r0, sl
 8004f2a:	f001 fe39 	bl	8006ba0 <__ssprint_r>
 8004f2e:	2800      	cmp	r0, #0
 8004f30:	f040 8184 	bne.w	800523c <_svfprintf_r+0xd04>
 8004f34:	ac2c      	add	r4, sp, #176	; 0xb0
 8004f36:	2e00      	cmp	r6, #0
 8004f38:	bfac      	ite	ge
 8004f3a:	1bbe      	subge	r6, r7, r6
 8004f3c:	463e      	movlt	r6, r7
 8004f3e:	2e00      	cmp	r6, #0
 8004f40:	dd30      	ble.n	8004fa4 <_svfprintf_r+0xa6c>
 8004f42:	f04f 0910 	mov.w	r9, #16
 8004f46:	4b4f      	ldr	r3, [pc, #316]	; (8005084 <_svfprintf_r+0xb4c>)
 8004f48:	6023      	str	r3, [r4, #0]
 8004f4a:	2e10      	cmp	r6, #16
 8004f4c:	dd16      	ble.n	8004f7c <_svfprintf_r+0xa44>
 8004f4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f50:	f8c4 9004 	str.w	r9, [r4, #4]
 8004f54:	3310      	adds	r3, #16
 8004f56:	9321      	str	r3, [sp, #132]	; 0x84
 8004f58:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	2b07      	cmp	r3, #7
 8004f5e:	9320      	str	r3, [sp, #128]	; 0x80
 8004f60:	dc01      	bgt.n	8004f66 <_svfprintf_r+0xa2e>
 8004f62:	3408      	adds	r4, #8
 8004f64:	e008      	b.n	8004f78 <_svfprintf_r+0xa40>
 8004f66:	aa1f      	add	r2, sp, #124	; 0x7c
 8004f68:	4659      	mov	r1, fp
 8004f6a:	4650      	mov	r0, sl
 8004f6c:	f001 fe18 	bl	8006ba0 <__ssprint_r>
 8004f70:	2800      	cmp	r0, #0
 8004f72:	f040 8163 	bne.w	800523c <_svfprintf_r+0xd04>
 8004f76:	ac2c      	add	r4, sp, #176	; 0xb0
 8004f78:	3e10      	subs	r6, #16
 8004f7a:	e7e4      	b.n	8004f46 <_svfprintf_r+0xa0e>
 8004f7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f7e:	6066      	str	r6, [r4, #4]
 8004f80:	441e      	add	r6, r3
 8004f82:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004f84:	9621      	str	r6, [sp, #132]	; 0x84
 8004f86:	3301      	adds	r3, #1
 8004f88:	2b07      	cmp	r3, #7
 8004f8a:	9320      	str	r3, [sp, #128]	; 0x80
 8004f8c:	dc01      	bgt.n	8004f92 <_svfprintf_r+0xa5a>
 8004f8e:	3408      	adds	r4, #8
 8004f90:	e008      	b.n	8004fa4 <_svfprintf_r+0xa6c>
 8004f92:	aa1f      	add	r2, sp, #124	; 0x7c
 8004f94:	4659      	mov	r1, fp
 8004f96:	4650      	mov	r0, sl
 8004f98:	f001 fe02 	bl	8006ba0 <__ssprint_r>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	f040 814d 	bne.w	800523c <_svfprintf_r+0xd04>
 8004fa2:	ac2c      	add	r4, sp, #176	; 0xb0
 8004fa4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004fa6:	9a04      	ldr	r2, [sp, #16]
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	4447      	add	r7, r8
 8004fac:	db01      	blt.n	8004fb2 <_svfprintf_r+0xa7a>
 8004fae:	07e9      	lsls	r1, r5, #31
 8004fb0:	d517      	bpl.n	8004fe2 <_svfprintf_r+0xaaa>
 8004fb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fb4:	6023      	str	r3, [r4, #0]
 8004fb6:	9b08      	ldr	r3, [sp, #32]
 8004fb8:	6063      	str	r3, [r4, #4]
 8004fba:	9a08      	ldr	r2, [sp, #32]
 8004fbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fbe:	4413      	add	r3, r2
 8004fc0:	9321      	str	r3, [sp, #132]	; 0x84
 8004fc2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	2b07      	cmp	r3, #7
 8004fc8:	9320      	str	r3, [sp, #128]	; 0x80
 8004fca:	dc01      	bgt.n	8004fd0 <_svfprintf_r+0xa98>
 8004fcc:	3408      	adds	r4, #8
 8004fce:	e008      	b.n	8004fe2 <_svfprintf_r+0xaaa>
 8004fd0:	aa1f      	add	r2, sp, #124	; 0x7c
 8004fd2:	4659      	mov	r1, fp
 8004fd4:	4650      	mov	r0, sl
 8004fd6:	f001 fde3 	bl	8006ba0 <__ssprint_r>
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	f040 812e 	bne.w	800523c <_svfprintf_r+0xd04>
 8004fe0:	ac2c      	add	r4, sp, #176	; 0xb0
 8004fe2:	9b04      	ldr	r3, [sp, #16]
 8004fe4:	9a04      	ldr	r2, [sp, #16]
 8004fe6:	eb08 0603 	add.w	r6, r8, r3
 8004fea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004fec:	1bf6      	subs	r6, r6, r7
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	429e      	cmp	r6, r3
 8004ff2:	bfa8      	it	ge
 8004ff4:	461e      	movge	r6, r3
 8004ff6:	2e00      	cmp	r6, #0
 8004ff8:	dd14      	ble.n	8005024 <_svfprintf_r+0xaec>
 8004ffa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ffc:	6027      	str	r7, [r4, #0]
 8004ffe:	4433      	add	r3, r6
 8005000:	9321      	str	r3, [sp, #132]	; 0x84
 8005002:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005004:	6066      	str	r6, [r4, #4]
 8005006:	3301      	adds	r3, #1
 8005008:	2b07      	cmp	r3, #7
 800500a:	9320      	str	r3, [sp, #128]	; 0x80
 800500c:	dc01      	bgt.n	8005012 <_svfprintf_r+0xada>
 800500e:	3408      	adds	r4, #8
 8005010:	e008      	b.n	8005024 <_svfprintf_r+0xaec>
 8005012:	aa1f      	add	r2, sp, #124	; 0x7c
 8005014:	4659      	mov	r1, fp
 8005016:	4650      	mov	r0, sl
 8005018:	f001 fdc2 	bl	8006ba0 <__ssprint_r>
 800501c:	2800      	cmp	r0, #0
 800501e:	f040 810d 	bne.w	800523c <_svfprintf_r+0xd04>
 8005022:	ac2c      	add	r4, sp, #176	; 0xb0
 8005024:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005026:	9a04      	ldr	r2, [sp, #16]
 8005028:	2e00      	cmp	r6, #0
 800502a:	eba2 0303 	sub.w	r3, r2, r3
 800502e:	bfac      	ite	ge
 8005030:	1b9e      	subge	r6, r3, r6
 8005032:	461e      	movlt	r6, r3
 8005034:	2e00      	cmp	r6, #0
 8005036:	f340 80b1 	ble.w	800519c <_svfprintf_r+0xc64>
 800503a:	4f12      	ldr	r7, [pc, #72]	; (8005084 <_svfprintf_r+0xb4c>)
 800503c:	f04f 0810 	mov.w	r8, #16
 8005040:	2e10      	cmp	r6, #16
 8005042:	dd16      	ble.n	8005072 <_svfprintf_r+0xb3a>
 8005044:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005046:	3310      	adds	r3, #16
 8005048:	9321      	str	r3, [sp, #132]	; 0x84
 800504a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800504c:	3301      	adds	r3, #1
 800504e:	2b07      	cmp	r3, #7
 8005050:	e884 0180 	stmia.w	r4, {r7, r8}
 8005054:	9320      	str	r3, [sp, #128]	; 0x80
 8005056:	dc01      	bgt.n	800505c <_svfprintf_r+0xb24>
 8005058:	3408      	adds	r4, #8
 800505a:	e008      	b.n	800506e <_svfprintf_r+0xb36>
 800505c:	aa1f      	add	r2, sp, #124	; 0x7c
 800505e:	4659      	mov	r1, fp
 8005060:	4650      	mov	r0, sl
 8005062:	f001 fd9d 	bl	8006ba0 <__ssprint_r>
 8005066:	2800      	cmp	r0, #0
 8005068:	f040 80e8 	bne.w	800523c <_svfprintf_r+0xd04>
 800506c:	ac2c      	add	r4, sp, #176	; 0xb0
 800506e:	3e10      	subs	r6, #16
 8005070:	e7e6      	b.n	8005040 <_svfprintf_r+0xb08>
 8005072:	4b04      	ldr	r3, [pc, #16]	; (8005084 <_svfprintf_r+0xb4c>)
 8005074:	e884 0048 	stmia.w	r4, {r3, r6}
 8005078:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800507a:	441e      	add	r6, r3
 800507c:	9621      	str	r6, [sp, #132]	; 0x84
 800507e:	e642      	b.n	8004d06 <_svfprintf_r+0x7ce>
 8005080:	08007666 	.word	0x08007666
 8005084:	08007624 	.word	0x08007624
 8005088:	9b04      	ldr	r3, [sp, #16]
 800508a:	2b01      	cmp	r3, #1
 800508c:	dc01      	bgt.n	8005092 <_svfprintf_r+0xb5a>
 800508e:	07ea      	lsls	r2, r5, #31
 8005090:	d573      	bpl.n	800517a <_svfprintf_r+0xc42>
 8005092:	2301      	movs	r3, #1
 8005094:	6063      	str	r3, [r4, #4]
 8005096:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005098:	f8c4 8000 	str.w	r8, [r4]
 800509c:	3301      	adds	r3, #1
 800509e:	9321      	str	r3, [sp, #132]	; 0x84
 80050a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80050a2:	3301      	adds	r3, #1
 80050a4:	2b07      	cmp	r3, #7
 80050a6:	9320      	str	r3, [sp, #128]	; 0x80
 80050a8:	dc01      	bgt.n	80050ae <_svfprintf_r+0xb76>
 80050aa:	3408      	adds	r4, #8
 80050ac:	e008      	b.n	80050c0 <_svfprintf_r+0xb88>
 80050ae:	aa1f      	add	r2, sp, #124	; 0x7c
 80050b0:	4659      	mov	r1, fp
 80050b2:	4650      	mov	r0, sl
 80050b4:	f001 fd74 	bl	8006ba0 <__ssprint_r>
 80050b8:	2800      	cmp	r0, #0
 80050ba:	f040 80bf 	bne.w	800523c <_svfprintf_r+0xd04>
 80050be:	ac2c      	add	r4, sp, #176	; 0xb0
 80050c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050c2:	6023      	str	r3, [r4, #0]
 80050c4:	9b08      	ldr	r3, [sp, #32]
 80050c6:	6063      	str	r3, [r4, #4]
 80050c8:	9a08      	ldr	r2, [sp, #32]
 80050ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80050cc:	4413      	add	r3, r2
 80050ce:	9321      	str	r3, [sp, #132]	; 0x84
 80050d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80050d2:	3301      	adds	r3, #1
 80050d4:	2b07      	cmp	r3, #7
 80050d6:	9320      	str	r3, [sp, #128]	; 0x80
 80050d8:	dc01      	bgt.n	80050de <_svfprintf_r+0xba6>
 80050da:	3408      	adds	r4, #8
 80050dc:	e008      	b.n	80050f0 <_svfprintf_r+0xbb8>
 80050de:	aa1f      	add	r2, sp, #124	; 0x7c
 80050e0:	4659      	mov	r1, fp
 80050e2:	4650      	mov	r0, sl
 80050e4:	f001 fd5c 	bl	8006ba0 <__ssprint_r>
 80050e8:	2800      	cmp	r0, #0
 80050ea:	f040 80a7 	bne.w	800523c <_svfprintf_r+0xd04>
 80050ee:	ac2c      	add	r4, sp, #176	; 0xb0
 80050f0:	2300      	movs	r3, #0
 80050f2:	2200      	movs	r2, #0
 80050f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050f8:	f7fb fd6a 	bl	8000bd0 <__aeabi_dcmpeq>
 80050fc:	9b04      	ldr	r3, [sp, #16]
 80050fe:	1e5e      	subs	r6, r3, #1
 8005100:	b9b8      	cbnz	r0, 8005132 <_svfprintf_r+0xbfa>
 8005102:	f108 0301 	add.w	r3, r8, #1
 8005106:	e884 0048 	stmia.w	r4, {r3, r6}
 800510a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800510c:	9a04      	ldr	r2, [sp, #16]
 800510e:	3b01      	subs	r3, #1
 8005110:	4413      	add	r3, r2
 8005112:	9321      	str	r3, [sp, #132]	; 0x84
 8005114:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005116:	3301      	adds	r3, #1
 8005118:	2b07      	cmp	r3, #7
 800511a:	9320      	str	r3, [sp, #128]	; 0x80
 800511c:	dd34      	ble.n	8005188 <_svfprintf_r+0xc50>
 800511e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005120:	4659      	mov	r1, fp
 8005122:	4650      	mov	r0, sl
 8005124:	f001 fd3c 	bl	8006ba0 <__ssprint_r>
 8005128:	2800      	cmp	r0, #0
 800512a:	f040 8087 	bne.w	800523c <_svfprintf_r+0xd04>
 800512e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005130:	e02b      	b.n	800518a <_svfprintf_r+0xc52>
 8005132:	2e00      	cmp	r6, #0
 8005134:	dd29      	ble.n	800518a <_svfprintf_r+0xc52>
 8005136:	4fa7      	ldr	r7, [pc, #668]	; (80053d4 <_svfprintf_r+0xe9c>)
 8005138:	f04f 0810 	mov.w	r8, #16
 800513c:	2e10      	cmp	r6, #16
 800513e:	dd15      	ble.n	800516c <_svfprintf_r+0xc34>
 8005140:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005142:	3310      	adds	r3, #16
 8005144:	9321      	str	r3, [sp, #132]	; 0x84
 8005146:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005148:	3301      	adds	r3, #1
 800514a:	2b07      	cmp	r3, #7
 800514c:	e884 0180 	stmia.w	r4, {r7, r8}
 8005150:	9320      	str	r3, [sp, #128]	; 0x80
 8005152:	dc01      	bgt.n	8005158 <_svfprintf_r+0xc20>
 8005154:	3408      	adds	r4, #8
 8005156:	e007      	b.n	8005168 <_svfprintf_r+0xc30>
 8005158:	aa1f      	add	r2, sp, #124	; 0x7c
 800515a:	4659      	mov	r1, fp
 800515c:	4650      	mov	r0, sl
 800515e:	f001 fd1f 	bl	8006ba0 <__ssprint_r>
 8005162:	2800      	cmp	r0, #0
 8005164:	d16a      	bne.n	800523c <_svfprintf_r+0xd04>
 8005166:	ac2c      	add	r4, sp, #176	; 0xb0
 8005168:	3e10      	subs	r6, #16
 800516a:	e7e7      	b.n	800513c <_svfprintf_r+0xc04>
 800516c:	4b99      	ldr	r3, [pc, #612]	; (80053d4 <_svfprintf_r+0xe9c>)
 800516e:	e884 0048 	stmia.w	r4, {r3, r6}
 8005172:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005174:	441e      	add	r6, r3
 8005176:	9621      	str	r6, [sp, #132]	; 0x84
 8005178:	e7cc      	b.n	8005114 <_svfprintf_r+0xbdc>
 800517a:	2301      	movs	r3, #1
 800517c:	6063      	str	r3, [r4, #4]
 800517e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005180:	f8c4 8000 	str.w	r8, [r4]
 8005184:	3301      	adds	r3, #1
 8005186:	e7c4      	b.n	8005112 <_svfprintf_r+0xbda>
 8005188:	3408      	adds	r4, #8
 800518a:	ab1b      	add	r3, sp, #108	; 0x6c
 800518c:	6023      	str	r3, [r4, #0]
 800518e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005190:	6063      	str	r3, [r4, #4]
 8005192:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005194:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005196:	4413      	add	r3, r2
 8005198:	e5b4      	b.n	8004d04 <_svfprintf_r+0x7cc>
 800519a:	3408      	adds	r4, #8
 800519c:	076b      	lsls	r3, r5, #29
 800519e:	d40b      	bmi.n	80051b8 <_svfprintf_r+0xc80>
 80051a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051a6:	428a      	cmp	r2, r1
 80051a8:	bfac      	ite	ge
 80051aa:	189b      	addge	r3, r3, r2
 80051ac:	185b      	addlt	r3, r3, r1
 80051ae:	930a      	str	r3, [sp, #40]	; 0x28
 80051b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d035      	beq.n	8005222 <_svfprintf_r+0xcea>
 80051b6:	e02e      	b.n	8005216 <_svfprintf_r+0xcde>
 80051b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80051bc:	1a9d      	subs	r5, r3, r2
 80051be:	2d00      	cmp	r5, #0
 80051c0:	ddee      	ble.n	80051a0 <_svfprintf_r+0xc68>
 80051c2:	2610      	movs	r6, #16
 80051c4:	4b84      	ldr	r3, [pc, #528]	; (80053d8 <_svfprintf_r+0xea0>)
 80051c6:	6023      	str	r3, [r4, #0]
 80051c8:	2d10      	cmp	r5, #16
 80051ca:	dd13      	ble.n	80051f4 <_svfprintf_r+0xcbc>
 80051cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051ce:	6066      	str	r6, [r4, #4]
 80051d0:	3310      	adds	r3, #16
 80051d2:	9321      	str	r3, [sp, #132]	; 0x84
 80051d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80051d6:	3301      	adds	r3, #1
 80051d8:	2b07      	cmp	r3, #7
 80051da:	9320      	str	r3, [sp, #128]	; 0x80
 80051dc:	dc01      	bgt.n	80051e2 <_svfprintf_r+0xcaa>
 80051de:	3408      	adds	r4, #8
 80051e0:	e006      	b.n	80051f0 <_svfprintf_r+0xcb8>
 80051e2:	aa1f      	add	r2, sp, #124	; 0x7c
 80051e4:	4659      	mov	r1, fp
 80051e6:	4650      	mov	r0, sl
 80051e8:	f001 fcda 	bl	8006ba0 <__ssprint_r>
 80051ec:	bb30      	cbnz	r0, 800523c <_svfprintf_r+0xd04>
 80051ee:	ac2c      	add	r4, sp, #176	; 0xb0
 80051f0:	3d10      	subs	r5, #16
 80051f2:	e7e7      	b.n	80051c4 <_svfprintf_r+0xc8c>
 80051f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051f6:	6065      	str	r5, [r4, #4]
 80051f8:	441d      	add	r5, r3
 80051fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80051fc:	9521      	str	r5, [sp, #132]	; 0x84
 80051fe:	3301      	adds	r3, #1
 8005200:	2b07      	cmp	r3, #7
 8005202:	9320      	str	r3, [sp, #128]	; 0x80
 8005204:	ddcc      	ble.n	80051a0 <_svfprintf_r+0xc68>
 8005206:	aa1f      	add	r2, sp, #124	; 0x7c
 8005208:	4659      	mov	r1, fp
 800520a:	4650      	mov	r0, sl
 800520c:	f001 fcc8 	bl	8006ba0 <__ssprint_r>
 8005210:	2800      	cmp	r0, #0
 8005212:	d0c5      	beq.n	80051a0 <_svfprintf_r+0xc68>
 8005214:	e012      	b.n	800523c <_svfprintf_r+0xd04>
 8005216:	aa1f      	add	r2, sp, #124	; 0x7c
 8005218:	4659      	mov	r1, fp
 800521a:	4650      	mov	r0, sl
 800521c:	f001 fcc0 	bl	8006ba0 <__ssprint_r>
 8005220:	b960      	cbnz	r0, 800523c <_svfprintf_r+0xd04>
 8005222:	2300      	movs	r3, #0
 8005224:	9320      	str	r3, [sp, #128]	; 0x80
 8005226:	9f03      	ldr	r7, [sp, #12]
 8005228:	ac2c      	add	r4, sp, #176	; 0xb0
 800522a:	f7ff b9bb 	b.w	80045a4 <_svfprintf_r+0x6c>
 800522e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005230:	b123      	cbz	r3, 800523c <_svfprintf_r+0xd04>
 8005232:	aa1f      	add	r2, sp, #124	; 0x7c
 8005234:	4659      	mov	r1, fp
 8005236:	4650      	mov	r0, sl
 8005238:	f001 fcb2 	bl	8006ba0 <__ssprint_r>
 800523c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8005240:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005246:	bf18      	it	ne
 8005248:	f04f 33ff 	movne.w	r3, #4294967295
 800524c:	4618      	mov	r0, r3
 800524e:	e12e      	b.n	80054ae <_svfprintf_r+0xf76>
 8005250:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005254:	4610      	mov	r0, r2
 8005256:	4619      	mov	r1, r3
 8005258:	f7fb fcec 	bl	8000c34 <__aeabi_dcmpun>
 800525c:	b160      	cbz	r0, 8005278 <_svfprintf_r+0xd40>
 800525e:	4b5f      	ldr	r3, [pc, #380]	; (80053dc <_svfprintf_r+0xea4>)
 8005260:	4a5f      	ldr	r2, [pc, #380]	; (80053e0 <_svfprintf_r+0xea8>)
 8005262:	9902      	ldr	r1, [sp, #8]
 8005264:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8005268:	2947      	cmp	r1, #71	; 0x47
 800526a:	bfcc      	ite	gt
 800526c:	4690      	movgt	r8, r2
 800526e:	4698      	movle	r8, r3
 8005270:	f04f 0903 	mov.w	r9, #3
 8005274:	2600      	movs	r6, #0
 8005276:	e44e      	b.n	8004b16 <_svfprintf_r+0x5de>
 8005278:	f1b9 3fff 	cmp.w	r9, #4294967295
 800527c:	d00a      	beq.n	8005294 <_svfprintf_r+0xd5c>
 800527e:	9b02      	ldr	r3, [sp, #8]
 8005280:	f023 0320 	bic.w	r3, r3, #32
 8005284:	2b47      	cmp	r3, #71	; 0x47
 8005286:	d107      	bne.n	8005298 <_svfprintf_r+0xd60>
 8005288:	f1b9 0f00 	cmp.w	r9, #0
 800528c:	bf08      	it	eq
 800528e:	f04f 0901 	moveq.w	r9, #1
 8005292:	e001      	b.n	8005298 <_svfprintf_r+0xd60>
 8005294:	f04f 0906 	mov.w	r9, #6
 8005298:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800529c:	930c      	str	r3, [sp, #48]	; 0x30
 800529e:	9b07      	ldr	r3, [sp, #28]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	da07      	bge.n	80052b4 <_svfprintf_r+0xd7c>
 80052a4:	9b06      	ldr	r3, [sp, #24]
 80052a6:	930e      	str	r3, [sp, #56]	; 0x38
 80052a8:	9b07      	ldr	r3, [sp, #28]
 80052aa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80052ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80052b0:	232d      	movs	r3, #45	; 0x2d
 80052b2:	e004      	b.n	80052be <_svfprintf_r+0xd86>
 80052b4:	ed9d 7b06 	vldr	d7, [sp, #24]
 80052b8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80052bc:	2300      	movs	r3, #0
 80052be:	930b      	str	r3, [sp, #44]	; 0x2c
 80052c0:	9b02      	ldr	r3, [sp, #8]
 80052c2:	f023 0720 	bic.w	r7, r3, #32
 80052c6:	2f46      	cmp	r7, #70	; 0x46
 80052c8:	d004      	beq.n	80052d4 <_svfprintf_r+0xd9c>
 80052ca:	2f45      	cmp	r7, #69	; 0x45
 80052cc:	d105      	bne.n	80052da <_svfprintf_r+0xda2>
 80052ce:	f109 0601 	add.w	r6, r9, #1
 80052d2:	e003      	b.n	80052dc <_svfprintf_r+0xda4>
 80052d4:	464e      	mov	r6, r9
 80052d6:	2103      	movs	r1, #3
 80052d8:	e001      	b.n	80052de <_svfprintf_r+0xda6>
 80052da:	464e      	mov	r6, r9
 80052dc:	2102      	movs	r1, #2
 80052de:	ab1d      	add	r3, sp, #116	; 0x74
 80052e0:	9301      	str	r3, [sp, #4]
 80052e2:	ab1a      	add	r3, sp, #104	; 0x68
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	4632      	mov	r2, r6
 80052e8:	ab19      	add	r3, sp, #100	; 0x64
 80052ea:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 80052ee:	4650      	mov	r0, sl
 80052f0:	f000 f996 	bl	8005620 <_dtoa_r>
 80052f4:	2f47      	cmp	r7, #71	; 0x47
 80052f6:	4680      	mov	r8, r0
 80052f8:	d102      	bne.n	8005300 <_svfprintf_r+0xdc8>
 80052fa:	07eb      	lsls	r3, r5, #31
 80052fc:	f140 80cd 	bpl.w	800549a <_svfprintf_r+0xf62>
 8005300:	eb08 0306 	add.w	r3, r8, r6
 8005304:	2f46      	cmp	r7, #70	; 0x46
 8005306:	9304      	str	r3, [sp, #16]
 8005308:	d111      	bne.n	800532e <_svfprintf_r+0xdf6>
 800530a:	f898 3000 	ldrb.w	r3, [r8]
 800530e:	2b30      	cmp	r3, #48	; 0x30
 8005310:	d109      	bne.n	8005326 <_svfprintf_r+0xdee>
 8005312:	2200      	movs	r2, #0
 8005314:	2300      	movs	r3, #0
 8005316:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800531a:	f7fb fc59 	bl	8000bd0 <__aeabi_dcmpeq>
 800531e:	b910      	cbnz	r0, 8005326 <_svfprintf_r+0xdee>
 8005320:	f1c6 0601 	rsb	r6, r6, #1
 8005324:	9619      	str	r6, [sp, #100]	; 0x64
 8005326:	9a04      	ldr	r2, [sp, #16]
 8005328:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800532a:	441a      	add	r2, r3
 800532c:	9204      	str	r2, [sp, #16]
 800532e:	2200      	movs	r2, #0
 8005330:	2300      	movs	r3, #0
 8005332:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005336:	f7fb fc4b 	bl	8000bd0 <__aeabi_dcmpeq>
 800533a:	b908      	cbnz	r0, 8005340 <_svfprintf_r+0xe08>
 800533c:	2230      	movs	r2, #48	; 0x30
 800533e:	e002      	b.n	8005346 <_svfprintf_r+0xe0e>
 8005340:	9b04      	ldr	r3, [sp, #16]
 8005342:	931d      	str	r3, [sp, #116]	; 0x74
 8005344:	e007      	b.n	8005356 <_svfprintf_r+0xe1e>
 8005346:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005348:	9904      	ldr	r1, [sp, #16]
 800534a:	4299      	cmp	r1, r3
 800534c:	d903      	bls.n	8005356 <_svfprintf_r+0xe1e>
 800534e:	1c59      	adds	r1, r3, #1
 8005350:	911d      	str	r1, [sp, #116]	; 0x74
 8005352:	701a      	strb	r2, [r3, #0]
 8005354:	e7f7      	b.n	8005346 <_svfprintf_r+0xe0e>
 8005356:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005358:	2f47      	cmp	r7, #71	; 0x47
 800535a:	ebc8 0303 	rsb	r3, r8, r3
 800535e:	9304      	str	r3, [sp, #16]
 8005360:	d108      	bne.n	8005374 <_svfprintf_r+0xe3c>
 8005362:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005364:	1cdf      	adds	r7, r3, #3
 8005366:	db01      	blt.n	800536c <_svfprintf_r+0xe34>
 8005368:	4599      	cmp	r9, r3
 800536a:	da68      	bge.n	800543e <_svfprintf_r+0xf06>
 800536c:	9b02      	ldr	r3, [sp, #8]
 800536e:	3b02      	subs	r3, #2
 8005370:	9302      	str	r3, [sp, #8]
 8005372:	e002      	b.n	800537a <_svfprintf_r+0xe42>
 8005374:	9b02      	ldr	r3, [sp, #8]
 8005376:	2b65      	cmp	r3, #101	; 0x65
 8005378:	dc4a      	bgt.n	8005410 <_svfprintf_r+0xed8>
 800537a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800537c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8005380:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 8005384:	3b01      	subs	r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	9319      	str	r3, [sp, #100]	; 0x64
 800538a:	bfba      	itte	lt
 800538c:	425b      	neglt	r3, r3
 800538e:	222d      	movlt	r2, #45	; 0x2d
 8005390:	222b      	movge	r2, #43	; 0x2b
 8005392:	2b09      	cmp	r3, #9
 8005394:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8005398:	dd24      	ble.n	80053e4 <_svfprintf_r+0xeac>
 800539a:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800539e:	200a      	movs	r0, #10
 80053a0:	fb93 f1f0 	sdiv	r1, r3, r0
 80053a4:	fb00 3311 	mls	r3, r0, r1, r3
 80053a8:	3330      	adds	r3, #48	; 0x30
 80053aa:	2909      	cmp	r1, #9
 80053ac:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80053b0:	460b      	mov	r3, r1
 80053b2:	dcf5      	bgt.n	80053a0 <_svfprintf_r+0xe68>
 80053b4:	3330      	adds	r3, #48	; 0x30
 80053b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80053ba:	1e51      	subs	r1, r2, #1
 80053bc:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 80053c0:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 80053c4:	4281      	cmp	r1, r0
 80053c6:	461a      	mov	r2, r3
 80053c8:	d213      	bcs.n	80053f2 <_svfprintf_r+0xeba>
 80053ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053ce:	f803 2b01 	strb.w	r2, [r3], #1
 80053d2:	e7f7      	b.n	80053c4 <_svfprintf_r+0xe8c>
 80053d4:	08007624 	.word	0x08007624
 80053d8:	08007668 	.word	0x08007668
 80053dc:	0800763c 	.word	0x0800763c
 80053e0:	08007640 	.word	0x08007640
 80053e4:	2230      	movs	r2, #48	; 0x30
 80053e6:	4413      	add	r3, r2
 80053e8:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 80053ec:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80053f0:	aa1c      	add	r2, sp, #112	; 0x70
 80053f2:	ab1b      	add	r3, sp, #108	; 0x6c
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	9a04      	ldr	r2, [sp, #16]
 80053f8:	9310      	str	r3, [sp, #64]	; 0x40
 80053fa:	2a01      	cmp	r2, #1
 80053fc:	eb03 0902 	add.w	r9, r3, r2
 8005400:	dc02      	bgt.n	8005408 <_svfprintf_r+0xed0>
 8005402:	f015 0701 	ands.w	r7, r5, #1
 8005406:	d032      	beq.n	800546e <_svfprintf_r+0xf36>
 8005408:	9b08      	ldr	r3, [sp, #32]
 800540a:	2700      	movs	r7, #0
 800540c:	4499      	add	r9, r3
 800540e:	e02e      	b.n	800546e <_svfprintf_r+0xf36>
 8005410:	9b02      	ldr	r3, [sp, #8]
 8005412:	2b66      	cmp	r3, #102	; 0x66
 8005414:	d113      	bne.n	800543e <_svfprintf_r+0xf06>
 8005416:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005418:	2b00      	cmp	r3, #0
 800541a:	dd07      	ble.n	800542c <_svfprintf_r+0xef4>
 800541c:	f1b9 0f00 	cmp.w	r9, #0
 8005420:	d101      	bne.n	8005426 <_svfprintf_r+0xeee>
 8005422:	07ee      	lsls	r6, r5, #31
 8005424:	d521      	bpl.n	800546a <_svfprintf_r+0xf32>
 8005426:	9a08      	ldr	r2, [sp, #32]
 8005428:	4413      	add	r3, r2
 800542a:	e006      	b.n	800543a <_svfprintf_r+0xf02>
 800542c:	f1b9 0f00 	cmp.w	r9, #0
 8005430:	d101      	bne.n	8005436 <_svfprintf_r+0xefe>
 8005432:	07ed      	lsls	r5, r5, #31
 8005434:	d514      	bpl.n	8005460 <_svfprintf_r+0xf28>
 8005436:	9b08      	ldr	r3, [sp, #32]
 8005438:	3301      	adds	r3, #1
 800543a:	444b      	add	r3, r9
 800543c:	e015      	b.n	800546a <_svfprintf_r+0xf32>
 800543e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005440:	9a04      	ldr	r2, [sp, #16]
 8005442:	4293      	cmp	r3, r2
 8005444:	db03      	blt.n	800544e <_svfprintf_r+0xf16>
 8005446:	07e8      	lsls	r0, r5, #31
 8005448:	d50d      	bpl.n	8005466 <_svfprintf_r+0xf2e>
 800544a:	9a08      	ldr	r2, [sp, #32]
 800544c:	e006      	b.n	800545c <_svfprintf_r+0xf24>
 800544e:	9a04      	ldr	r2, [sp, #16]
 8005450:	9908      	ldr	r1, [sp, #32]
 8005452:	2b00      	cmp	r3, #0
 8005454:	440a      	add	r2, r1
 8005456:	dc05      	bgt.n	8005464 <_svfprintf_r+0xf2c>
 8005458:	f1c3 0301 	rsb	r3, r3, #1
 800545c:	4413      	add	r3, r2
 800545e:	e002      	b.n	8005466 <_svfprintf_r+0xf2e>
 8005460:	2301      	movs	r3, #1
 8005462:	e002      	b.n	800546a <_svfprintf_r+0xf32>
 8005464:	4613      	mov	r3, r2
 8005466:	2267      	movs	r2, #103	; 0x67
 8005468:	9202      	str	r2, [sp, #8]
 800546a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800546c:	4699      	mov	r9, r3
 800546e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005470:	b113      	cbz	r3, 8005478 <_svfprintf_r+0xf40>
 8005472:	232d      	movs	r3, #45	; 0x2d
 8005474:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005478:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800547a:	2600      	movs	r6, #0
 800547c:	f7ff bb4c 	b.w	8004b18 <_svfprintf_r+0x5e0>
 8005480:	2200      	movs	r2, #0
 8005482:	2300      	movs	r3, #0
 8005484:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005488:	f7fb fbac 	bl	8000be4 <__aeabi_dcmplt>
 800548c:	b110      	cbz	r0, 8005494 <_svfprintf_r+0xf5c>
 800548e:	232d      	movs	r3, #45	; 0x2d
 8005490:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005494:	4b07      	ldr	r3, [pc, #28]	; (80054b4 <_svfprintf_r+0xf7c>)
 8005496:	4a08      	ldr	r2, [pc, #32]	; (80054b8 <_svfprintf_r+0xf80>)
 8005498:	e6e3      	b.n	8005262 <_svfprintf_r+0xd2a>
 800549a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800549c:	1a1b      	subs	r3, r3, r0
 800549e:	9304      	str	r3, [sp, #16]
 80054a0:	e75f      	b.n	8005362 <_svfprintf_r+0xe2a>
 80054a2:	ea56 0207 	orrs.w	r2, r6, r7
 80054a6:	f47f aaaa 	bne.w	80049fe <_svfprintf_r+0x4c6>
 80054aa:	f7ff baaf 	b.w	8004a0c <_svfprintf_r+0x4d4>
 80054ae:	b03d      	add	sp, #244	; 0xf4
 80054b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054b4:	08007634 	.word	0x08007634
 80054b8:	08007638 	.word	0x08007638

080054bc <_vsprintf_r>:
 80054bc:	b510      	push	{r4, lr}
 80054be:	b09a      	sub	sp, #104	; 0x68
 80054c0:	f44f 7402 	mov.w	r4, #520	; 0x208
 80054c4:	9100      	str	r1, [sp, #0]
 80054c6:	9104      	str	r1, [sp, #16]
 80054c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054cc:	9102      	str	r1, [sp, #8]
 80054ce:	9105      	str	r1, [sp, #20]
 80054d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80054d4:	f8ad 100e 	strh.w	r1, [sp, #14]
 80054d8:	4669      	mov	r1, sp
 80054da:	f8ad 400c 	strh.w	r4, [sp, #12]
 80054de:	f7ff f82b 	bl	8004538 <_svfprintf_r>
 80054e2:	9b00      	ldr	r3, [sp, #0]
 80054e4:	2200      	movs	r2, #0
 80054e6:	701a      	strb	r2, [r3, #0]
 80054e8:	b01a      	add	sp, #104	; 0x68
 80054ea:	bd10      	pop	{r4, pc}

080054ec <vsprintf>:
 80054ec:	4613      	mov	r3, r2
 80054ee:	460a      	mov	r2, r1
 80054f0:	4601      	mov	r1, r0
 80054f2:	4802      	ldr	r0, [pc, #8]	; (80054fc <vsprintf+0x10>)
 80054f4:	6800      	ldr	r0, [r0, #0]
 80054f6:	f7ff bfe1 	b.w	80054bc <_vsprintf_r>
 80054fa:	bf00      	nop
 80054fc:	200000f4 	.word	0x200000f4

08005500 <quorem>:
 8005500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005504:	6903      	ldr	r3, [r0, #16]
 8005506:	690c      	ldr	r4, [r1, #16]
 8005508:	429c      	cmp	r4, r3
 800550a:	4680      	mov	r8, r0
 800550c:	f300 8083 	bgt.w	8005616 <quorem+0x116>
 8005510:	3c01      	subs	r4, #1
 8005512:	f101 0714 	add.w	r7, r1, #20
 8005516:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800551a:	f100 0614 	add.w	r6, r0, #20
 800551e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005522:	eb06 030e 	add.w	r3, r6, lr
 8005526:	9301      	str	r3, [sp, #4]
 8005528:	3501      	adds	r5, #1
 800552a:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800552e:	fbb3 f5f5 	udiv	r5, r3, r5
 8005532:	eb07 090e 	add.w	r9, r7, lr
 8005536:	2d00      	cmp	r5, #0
 8005538:	d039      	beq.n	80055ae <quorem+0xae>
 800553a:	f04f 0a00 	mov.w	sl, #0
 800553e:	4638      	mov	r0, r7
 8005540:	46b4      	mov	ip, r6
 8005542:	46d3      	mov	fp, sl
 8005544:	f850 2b04 	ldr.w	r2, [r0], #4
 8005548:	b293      	uxth	r3, r2
 800554a:	fb05 a303 	mla	r3, r5, r3, sl
 800554e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005552:	b29b      	uxth	r3, r3
 8005554:	ebc3 030b 	rsb	r3, r3, fp
 8005558:	0c12      	lsrs	r2, r2, #16
 800555a:	f8bc b000 	ldrh.w	fp, [ip]
 800555e:	fb05 a202 	mla	r2, r5, r2, sl
 8005562:	fa13 f38b 	uxtah	r3, r3, fp
 8005566:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800556a:	fa1f fb82 	uxth.w	fp, r2
 800556e:	f8dc 2000 	ldr.w	r2, [ip]
 8005572:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005576:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800557a:	b29b      	uxth	r3, r3
 800557c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005580:	4581      	cmp	r9, r0
 8005582:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005586:	f84c 3b04 	str.w	r3, [ip], #4
 800558a:	d2db      	bcs.n	8005544 <quorem+0x44>
 800558c:	f856 300e 	ldr.w	r3, [r6, lr]
 8005590:	b96b      	cbnz	r3, 80055ae <quorem+0xae>
 8005592:	9b01      	ldr	r3, [sp, #4]
 8005594:	3b04      	subs	r3, #4
 8005596:	429e      	cmp	r6, r3
 8005598:	461a      	mov	r2, r3
 800559a:	d302      	bcc.n	80055a2 <quorem+0xa2>
 800559c:	f8c8 4010 	str.w	r4, [r8, #16]
 80055a0:	e005      	b.n	80055ae <quorem+0xae>
 80055a2:	6812      	ldr	r2, [r2, #0]
 80055a4:	3b04      	subs	r3, #4
 80055a6:	2a00      	cmp	r2, #0
 80055a8:	d1f8      	bne.n	800559c <quorem+0x9c>
 80055aa:	3c01      	subs	r4, #1
 80055ac:	e7f3      	b.n	8005596 <quorem+0x96>
 80055ae:	4640      	mov	r0, r8
 80055b0:	f001 fa1d 	bl	80069ee <__mcmp>
 80055b4:	2800      	cmp	r0, #0
 80055b6:	db2c      	blt.n	8005612 <quorem+0x112>
 80055b8:	3501      	adds	r5, #1
 80055ba:	4630      	mov	r0, r6
 80055bc:	f04f 0e00 	mov.w	lr, #0
 80055c0:	f857 1b04 	ldr.w	r1, [r7], #4
 80055c4:	f8d0 c000 	ldr.w	ip, [r0]
 80055c8:	b28a      	uxth	r2, r1
 80055ca:	ebc2 030e 	rsb	r3, r2, lr
 80055ce:	0c09      	lsrs	r1, r1, #16
 80055d0:	fa13 f38c 	uxtah	r3, r3, ip
 80055d4:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 80055d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055dc:	b29b      	uxth	r3, r3
 80055de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055e2:	45b9      	cmp	r9, r7
 80055e4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80055e8:	f840 3b04 	str.w	r3, [r0], #4
 80055ec:	d2e8      	bcs.n	80055c0 <quorem+0xc0>
 80055ee:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80055f2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80055f6:	b962      	cbnz	r2, 8005612 <quorem+0x112>
 80055f8:	3b04      	subs	r3, #4
 80055fa:	429e      	cmp	r6, r3
 80055fc:	461a      	mov	r2, r3
 80055fe:	d302      	bcc.n	8005606 <quorem+0x106>
 8005600:	f8c8 4010 	str.w	r4, [r8, #16]
 8005604:	e005      	b.n	8005612 <quorem+0x112>
 8005606:	6812      	ldr	r2, [r2, #0]
 8005608:	3b04      	subs	r3, #4
 800560a:	2a00      	cmp	r2, #0
 800560c:	d1f8      	bne.n	8005600 <quorem+0x100>
 800560e:	3c01      	subs	r4, #1
 8005610:	e7f3      	b.n	80055fa <quorem+0xfa>
 8005612:	4628      	mov	r0, r5
 8005614:	e000      	b.n	8005618 <quorem+0x118>
 8005616:	2000      	movs	r0, #0
 8005618:	b003      	add	sp, #12
 800561a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005620 <_dtoa_r>:
 8005620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005624:	ec59 8b10 	vmov	r8, r9, d0
 8005628:	b097      	sub	sp, #92	; 0x5c
 800562a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800562c:	9106      	str	r1, [sp, #24]
 800562e:	4682      	mov	sl, r0
 8005630:	9209      	str	r2, [sp, #36]	; 0x24
 8005632:	9310      	str	r3, [sp, #64]	; 0x40
 8005634:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8005636:	e9cd 8900 	strd	r8, r9, [sp]
 800563a:	b945      	cbnz	r5, 800564e <_dtoa_r+0x2e>
 800563c:	2010      	movs	r0, #16
 800563e:	f000 fd93 	bl	8006168 <malloc>
 8005642:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8005646:	6045      	str	r5, [r0, #4]
 8005648:	6085      	str	r5, [r0, #8]
 800564a:	6005      	str	r5, [r0, #0]
 800564c:	60c5      	str	r5, [r0, #12]
 800564e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8005652:	6819      	ldr	r1, [r3, #0]
 8005654:	b159      	cbz	r1, 800566e <_dtoa_r+0x4e>
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	604a      	str	r2, [r1, #4]
 800565a:	2301      	movs	r3, #1
 800565c:	4093      	lsls	r3, r2
 800565e:	608b      	str	r3, [r1, #8]
 8005660:	4650      	mov	r0, sl
 8005662:	f000 ffeb 	bl	800663c <_Bfree>
 8005666:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800566a:	2200      	movs	r2, #0
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	9b01      	ldr	r3, [sp, #4]
 8005670:	4a9f      	ldr	r2, [pc, #636]	; (80058f0 <_dtoa_r+0x2d0>)
 8005672:	2b00      	cmp	r3, #0
 8005674:	bfbf      	itttt	lt
 8005676:	2301      	movlt	r3, #1
 8005678:	6023      	strlt	r3, [r4, #0]
 800567a:	9b01      	ldrlt	r3, [sp, #4]
 800567c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005680:	bfb8      	it	lt
 8005682:	9301      	strlt	r3, [sp, #4]
 8005684:	9f01      	ldr	r7, [sp, #4]
 8005686:	bfa4      	itt	ge
 8005688:	2300      	movge	r3, #0
 800568a:	6023      	strge	r3, [r4, #0]
 800568c:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8005690:	0d1b      	lsrs	r3, r3, #20
 8005692:	051b      	lsls	r3, r3, #20
 8005694:	4293      	cmp	r3, r2
 8005696:	d11d      	bne.n	80056d4 <_dtoa_r+0xb4>
 8005698:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800569a:	f242 730f 	movw	r3, #9999	; 0x270f
 800569e:	6013      	str	r3, [r2, #0]
 80056a0:	9b00      	ldr	r3, [sp, #0]
 80056a2:	b943      	cbnz	r3, 80056b6 <_dtoa_r+0x96>
 80056a4:	4a93      	ldr	r2, [pc, #588]	; (80058f4 <_dtoa_r+0x2d4>)
 80056a6:	4b94      	ldr	r3, [pc, #592]	; (80058f8 <_dtoa_r+0x2d8>)
 80056a8:	f3c7 0013 	ubfx	r0, r7, #0, #20
 80056ac:	2800      	cmp	r0, #0
 80056ae:	bf14      	ite	ne
 80056b0:	4618      	movne	r0, r3
 80056b2:	4610      	moveq	r0, r2
 80056b4:	e000      	b.n	80056b8 <_dtoa_r+0x98>
 80056b6:	4890      	ldr	r0, [pc, #576]	; (80058f8 <_dtoa_r+0x2d8>)
 80056b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 854a 	beq.w	8006154 <_dtoa_r+0xb34>
 80056c0:	78c3      	ldrb	r3, [r0, #3]
 80056c2:	b113      	cbz	r3, 80056ca <_dtoa_r+0xaa>
 80056c4:	f100 0308 	add.w	r3, r0, #8
 80056c8:	e000      	b.n	80056cc <_dtoa_r+0xac>
 80056ca:	1cc3      	adds	r3, r0, #3
 80056cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80056ce:	6013      	str	r3, [r2, #0]
 80056d0:	f000 bd40 	b.w	8006154 <_dtoa_r+0xb34>
 80056d4:	e9dd 4500 	ldrd	r4, r5, [sp]
 80056d8:	2200      	movs	r2, #0
 80056da:	2300      	movs	r3, #0
 80056dc:	4620      	mov	r0, r4
 80056de:	4629      	mov	r1, r5
 80056e0:	f7fb fa76 	bl	8000bd0 <__aeabi_dcmpeq>
 80056e4:	4680      	mov	r8, r0
 80056e6:	b158      	cbz	r0, 8005700 <_dtoa_r+0xe0>
 80056e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80056ea:	2301      	movs	r3, #1
 80056ec:	6013      	str	r3, [r2, #0]
 80056ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f000 8522 	beq.w	800613a <_dtoa_r+0xb1a>
 80056f6:	4881      	ldr	r0, [pc, #516]	; (80058fc <_dtoa_r+0x2dc>)
 80056f8:	6018      	str	r0, [r3, #0]
 80056fa:	3801      	subs	r0, #1
 80056fc:	f000 bd2a 	b.w	8006154 <_dtoa_r+0xb34>
 8005700:	aa14      	add	r2, sp, #80	; 0x50
 8005702:	a915      	add	r1, sp, #84	; 0x54
 8005704:	ec45 4b10 	vmov	d0, r4, r5
 8005708:	4650      	mov	r0, sl
 800570a:	f001 f9eb 	bl	8006ae4 <__d2b>
 800570e:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005712:	9002      	str	r0, [sp, #8]
 8005714:	b15e      	cbz	r6, 800572e <_dtoa_r+0x10e>
 8005716:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800571a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800571e:	4620      	mov	r0, r4
 8005720:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005724:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8005728:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 800572c:	e01d      	b.n	800576a <_dtoa_r+0x14a>
 800572e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005730:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8005732:	441e      	add	r6, r3
 8005734:	f206 4332 	addw	r3, r6, #1074	; 0x432
 8005738:	2b20      	cmp	r3, #32
 800573a:	dd0a      	ble.n	8005752 <_dtoa_r+0x132>
 800573c:	9a00      	ldr	r2, [sp, #0]
 800573e:	f206 4012 	addw	r0, r6, #1042	; 0x412
 8005742:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005746:	fa22 f000 	lsr.w	r0, r2, r0
 800574a:	fa07 f303 	lsl.w	r3, r7, r3
 800574e:	4318      	orrs	r0, r3
 8005750:	e004      	b.n	800575c <_dtoa_r+0x13c>
 8005752:	f1c3 0020 	rsb	r0, r3, #32
 8005756:	9b00      	ldr	r3, [sp, #0]
 8005758:	fa03 f000 	lsl.w	r0, r3, r0
 800575c:	f7fa ff5a 	bl	8000614 <__aeabi_ui2d>
 8005760:	2301      	movs	r3, #1
 8005762:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005766:	3e01      	subs	r6, #1
 8005768:	9311      	str	r3, [sp, #68]	; 0x44
 800576a:	2200      	movs	r2, #0
 800576c:	4b64      	ldr	r3, [pc, #400]	; (8005900 <_dtoa_r+0x2e0>)
 800576e:	f7fa fe13 	bl	8000398 <__aeabi_dsub>
 8005772:	a359      	add	r3, pc, #356	; (adr r3, 80058d8 <_dtoa_r+0x2b8>)
 8005774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005778:	f7fa ffc2 	bl	8000700 <__aeabi_dmul>
 800577c:	a358      	add	r3, pc, #352	; (adr r3, 80058e0 <_dtoa_r+0x2c0>)
 800577e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005782:	f7fa fe0b 	bl	800039c <__adddf3>
 8005786:	4604      	mov	r4, r0
 8005788:	4630      	mov	r0, r6
 800578a:	460d      	mov	r5, r1
 800578c:	f7fa ff52 	bl	8000634 <__aeabi_i2d>
 8005790:	a355      	add	r3, pc, #340	; (adr r3, 80058e8 <_dtoa_r+0x2c8>)
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	f7fa ffb3 	bl	8000700 <__aeabi_dmul>
 800579a:	4602      	mov	r2, r0
 800579c:	460b      	mov	r3, r1
 800579e:	4620      	mov	r0, r4
 80057a0:	4629      	mov	r1, r5
 80057a2:	f7fa fdfb 	bl	800039c <__adddf3>
 80057a6:	4604      	mov	r4, r0
 80057a8:	460d      	mov	r5, r1
 80057aa:	f7fb fa59 	bl	8000c60 <__aeabi_d2iz>
 80057ae:	2200      	movs	r2, #0
 80057b0:	4683      	mov	fp, r0
 80057b2:	2300      	movs	r3, #0
 80057b4:	4620      	mov	r0, r4
 80057b6:	4629      	mov	r1, r5
 80057b8:	f7fb fa14 	bl	8000be4 <__aeabi_dcmplt>
 80057bc:	b158      	cbz	r0, 80057d6 <_dtoa_r+0x1b6>
 80057be:	4658      	mov	r0, fp
 80057c0:	f7fa ff38 	bl	8000634 <__aeabi_i2d>
 80057c4:	4602      	mov	r2, r0
 80057c6:	460b      	mov	r3, r1
 80057c8:	4620      	mov	r0, r4
 80057ca:	4629      	mov	r1, r5
 80057cc:	f7fb fa00 	bl	8000bd0 <__aeabi_dcmpeq>
 80057d0:	b908      	cbnz	r0, 80057d6 <_dtoa_r+0x1b6>
 80057d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80057d6:	f1bb 0f16 	cmp.w	fp, #22
 80057da:	d80d      	bhi.n	80057f8 <_dtoa_r+0x1d8>
 80057dc:	4949      	ldr	r1, [pc, #292]	; (8005904 <_dtoa_r+0x2e4>)
 80057de:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80057e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057ea:	f7fb fa19 	bl	8000c20 <__aeabi_dcmpgt>
 80057ee:	b130      	cbz	r0, 80057fe <_dtoa_r+0x1de>
 80057f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80057f4:	2300      	movs	r3, #0
 80057f6:	e000      	b.n	80057fa <_dtoa_r+0x1da>
 80057f8:	2301      	movs	r3, #1
 80057fa:	930d      	str	r3, [sp, #52]	; 0x34
 80057fc:	e000      	b.n	8005800 <_dtoa_r+0x1e0>
 80057fe:	900d      	str	r0, [sp, #52]	; 0x34
 8005800:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005802:	1b9e      	subs	r6, r3, r6
 8005804:	1e73      	subs	r3, r6, #1
 8005806:	9305      	str	r3, [sp, #20]
 8005808:	bf43      	ittte	mi
 800580a:	f1c3 0900 	rsbmi	r9, r3, #0
 800580e:	2300      	movmi	r3, #0
 8005810:	9305      	strmi	r3, [sp, #20]
 8005812:	f04f 0900 	movpl.w	r9, #0
 8005816:	f1bb 0f00 	cmp.w	fp, #0
 800581a:	db07      	blt.n	800582c <_dtoa_r+0x20c>
 800581c:	9b05      	ldr	r3, [sp, #20]
 800581e:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8005822:	445b      	add	r3, fp
 8005824:	9305      	str	r3, [sp, #20]
 8005826:	2300      	movs	r3, #0
 8005828:	9307      	str	r3, [sp, #28]
 800582a:	e006      	b.n	800583a <_dtoa_r+0x21a>
 800582c:	f1cb 0300 	rsb	r3, fp, #0
 8005830:	9307      	str	r3, [sp, #28]
 8005832:	2300      	movs	r3, #0
 8005834:	ebcb 0909 	rsb	r9, fp, r9
 8005838:	930c      	str	r3, [sp, #48]	; 0x30
 800583a:	9b06      	ldr	r3, [sp, #24]
 800583c:	2b09      	cmp	r3, #9
 800583e:	d827      	bhi.n	8005890 <_dtoa_r+0x270>
 8005840:	2b05      	cmp	r3, #5
 8005842:	bfc4      	itt	gt
 8005844:	3b04      	subgt	r3, #4
 8005846:	9306      	strgt	r3, [sp, #24]
 8005848:	9b06      	ldr	r3, [sp, #24]
 800584a:	f1a3 0302 	sub.w	r3, r3, #2
 800584e:	bfcc      	ite	gt
 8005850:	2500      	movgt	r5, #0
 8005852:	2501      	movle	r5, #1
 8005854:	2b03      	cmp	r3, #3
 8005856:	d820      	bhi.n	800589a <_dtoa_r+0x27a>
 8005858:	e8df f003 	tbb	[pc, r3]
 800585c:	04020e06 	.word	0x04020e06
 8005860:	2301      	movs	r3, #1
 8005862:	e002      	b.n	800586a <_dtoa_r+0x24a>
 8005864:	2301      	movs	r3, #1
 8005866:	e008      	b.n	800587a <_dtoa_r+0x25a>
 8005868:	2300      	movs	r3, #0
 800586a:	9308      	str	r3, [sp, #32]
 800586c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800586e:	2b00      	cmp	r3, #0
 8005870:	dd1c      	ble.n	80058ac <_dtoa_r+0x28c>
 8005872:	9303      	str	r3, [sp, #12]
 8005874:	4698      	mov	r8, r3
 8005876:	e01e      	b.n	80058b6 <_dtoa_r+0x296>
 8005878:	2300      	movs	r3, #0
 800587a:	9308      	str	r3, [sp, #32]
 800587c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800587e:	445b      	add	r3, fp
 8005880:	f103 0801 	add.w	r8, r3, #1
 8005884:	9303      	str	r3, [sp, #12]
 8005886:	4643      	mov	r3, r8
 8005888:	2b01      	cmp	r3, #1
 800588a:	bfb8      	it	lt
 800588c:	2301      	movlt	r3, #1
 800588e:	e012      	b.n	80058b6 <_dtoa_r+0x296>
 8005890:	2501      	movs	r5, #1
 8005892:	2300      	movs	r3, #0
 8005894:	9306      	str	r3, [sp, #24]
 8005896:	9508      	str	r5, [sp, #32]
 8005898:	e001      	b.n	800589e <_dtoa_r+0x27e>
 800589a:	2301      	movs	r3, #1
 800589c:	9308      	str	r3, [sp, #32]
 800589e:	f04f 33ff 	mov.w	r3, #4294967295
 80058a2:	9303      	str	r3, [sp, #12]
 80058a4:	4698      	mov	r8, r3
 80058a6:	2200      	movs	r2, #0
 80058a8:	2312      	movs	r3, #18
 80058aa:	e003      	b.n	80058b4 <_dtoa_r+0x294>
 80058ac:	2301      	movs	r3, #1
 80058ae:	9303      	str	r3, [sp, #12]
 80058b0:	4698      	mov	r8, r3
 80058b2:	461a      	mov	r2, r3
 80058b4:	9209      	str	r2, [sp, #36]	; 0x24
 80058b6:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 80058ba:	2200      	movs	r2, #0
 80058bc:	6062      	str	r2, [r4, #4]
 80058be:	2104      	movs	r1, #4
 80058c0:	f101 0214 	add.w	r2, r1, #20
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d81f      	bhi.n	8005908 <_dtoa_r+0x2e8>
 80058c8:	6862      	ldr	r2, [r4, #4]
 80058ca:	3201      	adds	r2, #1
 80058cc:	6062      	str	r2, [r4, #4]
 80058ce:	0049      	lsls	r1, r1, #1
 80058d0:	e7f6      	b.n	80058c0 <_dtoa_r+0x2a0>
 80058d2:	bf00      	nop
 80058d4:	f3af 8000 	nop.w
 80058d8:	636f4361 	.word	0x636f4361
 80058dc:	3fd287a7 	.word	0x3fd287a7
 80058e0:	8b60c8b3 	.word	0x8b60c8b3
 80058e4:	3fc68a28 	.word	0x3fc68a28
 80058e8:	509f79fb 	.word	0x509f79fb
 80058ec:	3fd34413 	.word	0x3fd34413
 80058f0:	7ff00000 	.word	0x7ff00000
 80058f4:	08007678 	.word	0x08007678
 80058f8:	08007681 	.word	0x08007681
 80058fc:	08007667 	.word	0x08007667
 8005900:	3ff80000 	.word	0x3ff80000
 8005904:	08007690 	.word	0x08007690
 8005908:	6861      	ldr	r1, [r4, #4]
 800590a:	4650      	mov	r0, sl
 800590c:	f000 fe61 	bl	80065d2 <_Balloc>
 8005910:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8005914:	6020      	str	r0, [r4, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	9304      	str	r3, [sp, #16]
 800591a:	f1b8 0f0e 	cmp.w	r8, #14
 800591e:	f200 815d 	bhi.w	8005bdc <_dtoa_r+0x5bc>
 8005922:	2d00      	cmp	r5, #0
 8005924:	f000 815a 	beq.w	8005bdc <_dtoa_r+0x5bc>
 8005928:	ed9d 7b00 	vldr	d7, [sp]
 800592c:	f1bb 0f00 	cmp.w	fp, #0
 8005930:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8005934:	dd31      	ble.n	800599a <_dtoa_r+0x37a>
 8005936:	4aa0      	ldr	r2, [pc, #640]	; (8005bb8 <_dtoa_r+0x598>)
 8005938:	f00b 030f 	and.w	r3, fp, #15
 800593c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005940:	ed93 7b00 	vldr	d7, [r3]
 8005944:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005948:	06e2      	lsls	r2, r4, #27
 800594a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800594e:	d50c      	bpl.n	800596a <_dtoa_r+0x34a>
 8005950:	4b9a      	ldr	r3, [pc, #616]	; (8005bbc <_dtoa_r+0x59c>)
 8005952:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005956:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800595a:	f7fa fffb 	bl	8000954 <__aeabi_ddiv>
 800595e:	f004 040f 	and.w	r4, r4, #15
 8005962:	e9cd 0100 	strd	r0, r1, [sp]
 8005966:	2603      	movs	r6, #3
 8005968:	e000      	b.n	800596c <_dtoa_r+0x34c>
 800596a:	2602      	movs	r6, #2
 800596c:	4d93      	ldr	r5, [pc, #588]	; (8005bbc <_dtoa_r+0x59c>)
 800596e:	b16c      	cbz	r4, 800598c <_dtoa_r+0x36c>
 8005970:	07e3      	lsls	r3, r4, #31
 8005972:	d508      	bpl.n	8005986 <_dtoa_r+0x366>
 8005974:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005978:	e9d5 2300 	ldrd	r2, r3, [r5]
 800597c:	f7fa fec0 	bl	8000700 <__aeabi_dmul>
 8005980:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005984:	3601      	adds	r6, #1
 8005986:	1064      	asrs	r4, r4, #1
 8005988:	3508      	adds	r5, #8
 800598a:	e7f0      	b.n	800596e <_dtoa_r+0x34e>
 800598c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005990:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005994:	f7fa ffde 	bl	8000954 <__aeabi_ddiv>
 8005998:	e020      	b.n	80059dc <_dtoa_r+0x3bc>
 800599a:	f1cb 0400 	rsb	r4, fp, #0
 800599e:	b304      	cbz	r4, 80059e2 <_dtoa_r+0x3c2>
 80059a0:	4b85      	ldr	r3, [pc, #532]	; (8005bb8 <_dtoa_r+0x598>)
 80059a2:	4d86      	ldr	r5, [pc, #536]	; (8005bbc <_dtoa_r+0x59c>)
 80059a4:	f004 020f 	and.w	r2, r4, #15
 80059a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80059b4:	f7fa fea4 	bl	8000700 <__aeabi_dmul>
 80059b8:	e9cd 0100 	strd	r0, r1, [sp]
 80059bc:	1124      	asrs	r4, r4, #4
 80059be:	2300      	movs	r3, #0
 80059c0:	2602      	movs	r6, #2
 80059c2:	b154      	cbz	r4, 80059da <_dtoa_r+0x3ba>
 80059c4:	07e7      	lsls	r7, r4, #31
 80059c6:	d505      	bpl.n	80059d4 <_dtoa_r+0x3b4>
 80059c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80059cc:	f7fa fe98 	bl	8000700 <__aeabi_dmul>
 80059d0:	3601      	adds	r6, #1
 80059d2:	2301      	movs	r3, #1
 80059d4:	1064      	asrs	r4, r4, #1
 80059d6:	3508      	adds	r5, #8
 80059d8:	e7f3      	b.n	80059c2 <_dtoa_r+0x3a2>
 80059da:	b11b      	cbz	r3, 80059e4 <_dtoa_r+0x3c4>
 80059dc:	e9cd 0100 	strd	r0, r1, [sp]
 80059e0:	e000      	b.n	80059e4 <_dtoa_r+0x3c4>
 80059e2:	2602      	movs	r6, #2
 80059e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059e6:	b1eb      	cbz	r3, 8005a24 <_dtoa_r+0x404>
 80059e8:	e9dd 4500 	ldrd	r4, r5, [sp]
 80059ec:	2200      	movs	r2, #0
 80059ee:	4b74      	ldr	r3, [pc, #464]	; (8005bc0 <_dtoa_r+0x5a0>)
 80059f0:	4620      	mov	r0, r4
 80059f2:	4629      	mov	r1, r5
 80059f4:	f7fb f8f6 	bl	8000be4 <__aeabi_dcmplt>
 80059f8:	b1a0      	cbz	r0, 8005a24 <_dtoa_r+0x404>
 80059fa:	f1b8 0f00 	cmp.w	r8, #0
 80059fe:	d011      	beq.n	8005a24 <_dtoa_r+0x404>
 8005a00:	9b03      	ldr	r3, [sp, #12]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f340 80e6 	ble.w	8005bd4 <_dtoa_r+0x5b4>
 8005a08:	f10b 33ff 	add.w	r3, fp, #4294967295
 8005a0c:	930a      	str	r3, [sp, #40]	; 0x28
 8005a0e:	2200      	movs	r2, #0
 8005a10:	4b6c      	ldr	r3, [pc, #432]	; (8005bc4 <_dtoa_r+0x5a4>)
 8005a12:	4620      	mov	r0, r4
 8005a14:	4629      	mov	r1, r5
 8005a16:	f7fa fe73 	bl	8000700 <__aeabi_dmul>
 8005a1a:	3601      	adds	r6, #1
 8005a1c:	e9cd 0100 	strd	r0, r1, [sp]
 8005a20:	9f03      	ldr	r7, [sp, #12]
 8005a22:	e002      	b.n	8005a2a <_dtoa_r+0x40a>
 8005a24:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8005a28:	4647      	mov	r7, r8
 8005a2a:	4630      	mov	r0, r6
 8005a2c:	f7fa fe02 	bl	8000634 <__aeabi_i2d>
 8005a30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a34:	f7fa fe64 	bl	8000700 <__aeabi_dmul>
 8005a38:	2200      	movs	r2, #0
 8005a3a:	4b63      	ldr	r3, [pc, #396]	; (8005bc8 <_dtoa_r+0x5a8>)
 8005a3c:	f7fa fcae 	bl	800039c <__adddf3>
 8005a40:	4604      	mov	r4, r0
 8005a42:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005a46:	b9cf      	cbnz	r7, 8005a7c <_dtoa_r+0x45c>
 8005a48:	2200      	movs	r2, #0
 8005a4a:	4b60      	ldr	r3, [pc, #384]	; (8005bcc <_dtoa_r+0x5ac>)
 8005a4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a50:	f7fa fca2 	bl	8000398 <__aeabi_dsub>
 8005a54:	4622      	mov	r2, r4
 8005a56:	462b      	mov	r3, r5
 8005a58:	e9cd 0100 	strd	r0, r1, [sp]
 8005a5c:	f7fb f8e0 	bl	8000c20 <__aeabi_dcmpgt>
 8005a60:	2800      	cmp	r0, #0
 8005a62:	f040 8241 	bne.w	8005ee8 <_dtoa_r+0x8c8>
 8005a66:	4622      	mov	r2, r4
 8005a68:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005a6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a70:	f7fb f8b8 	bl	8000be4 <__aeabi_dcmplt>
 8005a74:	2800      	cmp	r0, #0
 8005a76:	f040 822e 	bne.w	8005ed6 <_dtoa_r+0x8b6>
 8005a7a:	e0ab      	b.n	8005bd4 <_dtoa_r+0x5b4>
 8005a7c:	9a08      	ldr	r2, [sp, #32]
 8005a7e:	4b4e      	ldr	r3, [pc, #312]	; (8005bb8 <_dtoa_r+0x598>)
 8005a80:	1e79      	subs	r1, r7, #1
 8005a82:	2a00      	cmp	r2, #0
 8005a84:	d04a      	beq.n	8005b1c <_dtoa_r+0x4fc>
 8005a86:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8e:	2000      	movs	r0, #0
 8005a90:	494f      	ldr	r1, [pc, #316]	; (8005bd0 <_dtoa_r+0x5b0>)
 8005a92:	f7fa ff5f 	bl	8000954 <__aeabi_ddiv>
 8005a96:	4622      	mov	r2, r4
 8005a98:	462b      	mov	r3, r5
 8005a9a:	f7fa fc7d 	bl	8000398 <__aeabi_dsub>
 8005a9e:	9c04      	ldr	r4, [sp, #16]
 8005aa0:	4605      	mov	r5, r0
 8005aa2:	460e      	mov	r6, r1
 8005aa4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005aa8:	f7fb f8da 	bl	8000c60 <__aeabi_d2iz>
 8005aac:	9012      	str	r0, [sp, #72]	; 0x48
 8005aae:	f7fa fdc1 	bl	8000634 <__aeabi_i2d>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005aba:	f7fa fc6d 	bl	8000398 <__aeabi_dsub>
 8005abe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ac0:	3330      	adds	r3, #48	; 0x30
 8005ac2:	f804 3b01 	strb.w	r3, [r4], #1
 8005ac6:	462a      	mov	r2, r5
 8005ac8:	4633      	mov	r3, r6
 8005aca:	e9cd 0100 	strd	r0, r1, [sp]
 8005ace:	f7fb f889 	bl	8000be4 <__aeabi_dcmplt>
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	f040 8321 	bne.w	800611a <_dtoa_r+0xafa>
 8005ad8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005adc:	2000      	movs	r0, #0
 8005ade:	4938      	ldr	r1, [pc, #224]	; (8005bc0 <_dtoa_r+0x5a0>)
 8005ae0:	f7fa fc5a 	bl	8000398 <__aeabi_dsub>
 8005ae4:	462a      	mov	r2, r5
 8005ae6:	4633      	mov	r3, r6
 8005ae8:	f7fb f87c 	bl	8000be4 <__aeabi_dcmplt>
 8005aec:	2800      	cmp	r0, #0
 8005aee:	f040 80d2 	bne.w	8005c96 <_dtoa_r+0x676>
 8005af2:	9b04      	ldr	r3, [sp, #16]
 8005af4:	1ae3      	subs	r3, r4, r3
 8005af6:	42bb      	cmp	r3, r7
 8005af8:	da6c      	bge.n	8005bd4 <_dtoa_r+0x5b4>
 8005afa:	2200      	movs	r2, #0
 8005afc:	4b31      	ldr	r3, [pc, #196]	; (8005bc4 <_dtoa_r+0x5a4>)
 8005afe:	4628      	mov	r0, r5
 8005b00:	4631      	mov	r1, r6
 8005b02:	f7fa fdfd 	bl	8000700 <__aeabi_dmul>
 8005b06:	2200      	movs	r2, #0
 8005b08:	4605      	mov	r5, r0
 8005b0a:	460e      	mov	r6, r1
 8005b0c:	4b2d      	ldr	r3, [pc, #180]	; (8005bc4 <_dtoa_r+0x5a4>)
 8005b0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b12:	f7fa fdf5 	bl	8000700 <__aeabi_dmul>
 8005b16:	e9cd 0100 	strd	r0, r1, [sp]
 8005b1a:	e7c3      	b.n	8005aa4 <_dtoa_r+0x484>
 8005b1c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8005b20:	4622      	mov	r2, r4
 8005b22:	462b      	mov	r3, r5
 8005b24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b28:	f7fa fdea 	bl	8000700 <__aeabi_dmul>
 8005b2c:	9b04      	ldr	r3, [sp, #16]
 8005b2e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8005b32:	19dc      	adds	r4, r3, r7
 8005b34:	461d      	mov	r5, r3
 8005b36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b3a:	f7fb f891 	bl	8000c60 <__aeabi_d2iz>
 8005b3e:	4606      	mov	r6, r0
 8005b40:	f7fa fd78 	bl	8000634 <__aeabi_i2d>
 8005b44:	3630      	adds	r6, #48	; 0x30
 8005b46:	4602      	mov	r2, r0
 8005b48:	460b      	mov	r3, r1
 8005b4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b4e:	f7fa fc23 	bl	8000398 <__aeabi_dsub>
 8005b52:	f805 6b01 	strb.w	r6, [r5], #1
 8005b56:	42ac      	cmp	r4, r5
 8005b58:	e9cd 0100 	strd	r0, r1, [sp]
 8005b5c:	f04f 0200 	mov.w	r2, #0
 8005b60:	d123      	bne.n	8005baa <_dtoa_r+0x58a>
 8005b62:	4b1b      	ldr	r3, [pc, #108]	; (8005bd0 <_dtoa_r+0x5b0>)
 8005b64:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8005b68:	f7fa fc18 	bl	800039c <__adddf3>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	460b      	mov	r3, r1
 8005b70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b74:	f7fb f854 	bl	8000c20 <__aeabi_dcmpgt>
 8005b78:	2800      	cmp	r0, #0
 8005b7a:	f040 808c 	bne.w	8005c96 <_dtoa_r+0x676>
 8005b7e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005b82:	2000      	movs	r0, #0
 8005b84:	4912      	ldr	r1, [pc, #72]	; (8005bd0 <_dtoa_r+0x5b0>)
 8005b86:	f7fa fc07 	bl	8000398 <__aeabi_dsub>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b92:	f7fb f827 	bl	8000be4 <__aeabi_dcmplt>
 8005b96:	b1e8      	cbz	r0, 8005bd4 <_dtoa_r+0x5b4>
 8005b98:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8005b9c:	2b30      	cmp	r3, #48	; 0x30
 8005b9e:	f104 32ff 	add.w	r2, r4, #4294967295
 8005ba2:	f040 82ba 	bne.w	800611a <_dtoa_r+0xafa>
 8005ba6:	4614      	mov	r4, r2
 8005ba8:	e7f6      	b.n	8005b98 <_dtoa_r+0x578>
 8005baa:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <_dtoa_r+0x5a4>)
 8005bac:	f7fa fda8 	bl	8000700 <__aeabi_dmul>
 8005bb0:	e9cd 0100 	strd	r0, r1, [sp]
 8005bb4:	e7bf      	b.n	8005b36 <_dtoa_r+0x516>
 8005bb6:	bf00      	nop
 8005bb8:	08007690 	.word	0x08007690
 8005bbc:	08007758 	.word	0x08007758
 8005bc0:	3ff00000 	.word	0x3ff00000
 8005bc4:	40240000 	.word	0x40240000
 8005bc8:	401c0000 	.word	0x401c0000
 8005bcc:	40140000 	.word	0x40140000
 8005bd0:	3fe00000 	.word	0x3fe00000
 8005bd4:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8005bd8:	e88d 0018 	stmia.w	sp, {r3, r4}
 8005bdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	db7c      	blt.n	8005cdc <_dtoa_r+0x6bc>
 8005be2:	f1bb 0f0e 	cmp.w	fp, #14
 8005be6:	dc79      	bgt.n	8005cdc <_dtoa_r+0x6bc>
 8005be8:	4b8f      	ldr	r3, [pc, #572]	; (8005e28 <_dtoa_r+0x808>)
 8005bea:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005bee:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	da14      	bge.n	8005c22 <_dtoa_r+0x602>
 8005bf8:	f1b8 0f00 	cmp.w	r8, #0
 8005bfc:	dc11      	bgt.n	8005c22 <_dtoa_r+0x602>
 8005bfe:	f040 816c 	bne.w	8005eda <_dtoa_r+0x8ba>
 8005c02:	2200      	movs	r2, #0
 8005c04:	4b89      	ldr	r3, [pc, #548]	; (8005e2c <_dtoa_r+0x80c>)
 8005c06:	4630      	mov	r0, r6
 8005c08:	4639      	mov	r1, r7
 8005c0a:	f7fa fd79 	bl	8000700 <__aeabi_dmul>
 8005c0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c12:	f7fa fffb 	bl	8000c0c <__aeabi_dcmpge>
 8005c16:	4645      	mov	r5, r8
 8005c18:	4646      	mov	r6, r8
 8005c1a:	2800      	cmp	r0, #0
 8005c1c:	f040 815f 	bne.w	8005ede <_dtoa_r+0x8be>
 8005c20:	e166      	b.n	8005ef0 <_dtoa_r+0x8d0>
 8005c22:	9c04      	ldr	r4, [sp, #16]
 8005c24:	4632      	mov	r2, r6
 8005c26:	463b      	mov	r3, r7
 8005c28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c2c:	f7fa fe92 	bl	8000954 <__aeabi_ddiv>
 8005c30:	f7fb f816 	bl	8000c60 <__aeabi_d2iz>
 8005c34:	4605      	mov	r5, r0
 8005c36:	f7fa fcfd 	bl	8000634 <__aeabi_i2d>
 8005c3a:	4632      	mov	r2, r6
 8005c3c:	463b      	mov	r3, r7
 8005c3e:	f7fa fd5f 	bl	8000700 <__aeabi_dmul>
 8005c42:	460b      	mov	r3, r1
 8005c44:	4602      	mov	r2, r0
 8005c46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c4a:	f7fa fba5 	bl	8000398 <__aeabi_dsub>
 8005c4e:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8005c52:	f804 eb01 	strb.w	lr, [r4], #1
 8005c56:	9b04      	ldr	r3, [sp, #16]
 8005c58:	ebc3 0e04 	rsb	lr, r3, r4
 8005c5c:	45f0      	cmp	r8, lr
 8005c5e:	e9cd 0100 	strd	r0, r1, [sp]
 8005c62:	d12e      	bne.n	8005cc2 <_dtoa_r+0x6a2>
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	f7fa fb98 	bl	800039c <__adddf3>
 8005c6c:	4680      	mov	r8, r0
 8005c6e:	4689      	mov	r9, r1
 8005c70:	4602      	mov	r2, r0
 8005c72:	460b      	mov	r3, r1
 8005c74:	4630      	mov	r0, r6
 8005c76:	4639      	mov	r1, r7
 8005c78:	f7fa ffb4 	bl	8000be4 <__aeabi_dcmplt>
 8005c7c:	b978      	cbnz	r0, 8005c9e <_dtoa_r+0x67e>
 8005c7e:	4642      	mov	r2, r8
 8005c80:	464b      	mov	r3, r9
 8005c82:	4630      	mov	r0, r6
 8005c84:	4639      	mov	r1, r7
 8005c86:	f7fa ffa3 	bl	8000bd0 <__aeabi_dcmpeq>
 8005c8a:	2800      	cmp	r0, #0
 8005c8c:	f000 8247 	beq.w	800611e <_dtoa_r+0xafe>
 8005c90:	07e9      	lsls	r1, r5, #31
 8005c92:	d404      	bmi.n	8005c9e <_dtoa_r+0x67e>
 8005c94:	e243      	b.n	800611e <_dtoa_r+0xafe>
 8005c96:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8005c9a:	e000      	b.n	8005c9e <_dtoa_r+0x67e>
 8005c9c:	461c      	mov	r4, r3
 8005c9e:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8005ca2:	2a39      	cmp	r2, #57	; 0x39
 8005ca4:	f104 33ff 	add.w	r3, r4, #4294967295
 8005ca8:	d107      	bne.n	8005cba <_dtoa_r+0x69a>
 8005caa:	9a04      	ldr	r2, [sp, #16]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d1f5      	bne.n	8005c9c <_dtoa_r+0x67c>
 8005cb0:	9904      	ldr	r1, [sp, #16]
 8005cb2:	2230      	movs	r2, #48	; 0x30
 8005cb4:	f10b 0b01 	add.w	fp, fp, #1
 8005cb8:	700a      	strb	r2, [r1, #0]
 8005cba:	781a      	ldrb	r2, [r3, #0]
 8005cbc:	3201      	adds	r2, #1
 8005cbe:	701a      	strb	r2, [r3, #0]
 8005cc0:	e22d      	b.n	800611e <_dtoa_r+0xafe>
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	4b5a      	ldr	r3, [pc, #360]	; (8005e30 <_dtoa_r+0x810>)
 8005cc6:	f7fa fd1b 	bl	8000700 <__aeabi_dmul>
 8005cca:	2200      	movs	r2, #0
 8005ccc:	2300      	movs	r3, #0
 8005cce:	e9cd 0100 	strd	r0, r1, [sp]
 8005cd2:	f7fa ff7d 	bl	8000bd0 <__aeabi_dcmpeq>
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	d0a4      	beq.n	8005c24 <_dtoa_r+0x604>
 8005cda:	e220      	b.n	800611e <_dtoa_r+0xafe>
 8005cdc:	9a08      	ldr	r2, [sp, #32]
 8005cde:	2a00      	cmp	r2, #0
 8005ce0:	d02d      	beq.n	8005d3e <_dtoa_r+0x71e>
 8005ce2:	9a06      	ldr	r2, [sp, #24]
 8005ce4:	2a01      	cmp	r2, #1
 8005ce6:	dc0a      	bgt.n	8005cfe <_dtoa_r+0x6de>
 8005ce8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005cea:	b112      	cbz	r2, 8005cf2 <_dtoa_r+0x6d2>
 8005cec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005cf0:	e002      	b.n	8005cf8 <_dtoa_r+0x6d8>
 8005cf2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005cf4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005cf8:	9d07      	ldr	r5, [sp, #28]
 8005cfa:	464c      	mov	r4, r9
 8005cfc:	e015      	b.n	8005d2a <_dtoa_r+0x70a>
 8005cfe:	9b07      	ldr	r3, [sp, #28]
 8005d00:	f108 35ff 	add.w	r5, r8, #4294967295
 8005d04:	42ab      	cmp	r3, r5
 8005d06:	bfbf      	itttt	lt
 8005d08:	9b07      	ldrlt	r3, [sp, #28]
 8005d0a:	9507      	strlt	r5, [sp, #28]
 8005d0c:	1aea      	sublt	r2, r5, r3
 8005d0e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005d10:	bfb7      	itett	lt
 8005d12:	189b      	addlt	r3, r3, r2
 8005d14:	1b5d      	subge	r5, r3, r5
 8005d16:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005d18:	2500      	movlt	r5, #0
 8005d1a:	f1b8 0f00 	cmp.w	r8, #0
 8005d1e:	bfb9      	ittee	lt
 8005d20:	ebc8 0409 	rsblt	r4, r8, r9
 8005d24:	2300      	movlt	r3, #0
 8005d26:	464c      	movge	r4, r9
 8005d28:	4643      	movge	r3, r8
 8005d2a:	9a05      	ldr	r2, [sp, #20]
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	441a      	add	r2, r3
 8005d30:	4650      	mov	r0, sl
 8005d32:	4499      	add	r9, r3
 8005d34:	9205      	str	r2, [sp, #20]
 8005d36:	f000 fd20 	bl	800677a <__i2b>
 8005d3a:	4606      	mov	r6, r0
 8005d3c:	e002      	b.n	8005d44 <_dtoa_r+0x724>
 8005d3e:	9d07      	ldr	r5, [sp, #28]
 8005d40:	9e08      	ldr	r6, [sp, #32]
 8005d42:	464c      	mov	r4, r9
 8005d44:	b15c      	cbz	r4, 8005d5e <_dtoa_r+0x73e>
 8005d46:	9b05      	ldr	r3, [sp, #20]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	dd08      	ble.n	8005d5e <_dtoa_r+0x73e>
 8005d4c:	42a3      	cmp	r3, r4
 8005d4e:	9a05      	ldr	r2, [sp, #20]
 8005d50:	bfa8      	it	ge
 8005d52:	4623      	movge	r3, r4
 8005d54:	ebc3 0909 	rsb	r9, r3, r9
 8005d58:	1ae4      	subs	r4, r4, r3
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	9305      	str	r3, [sp, #20]
 8005d5e:	9b07      	ldr	r3, [sp, #28]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	dd1d      	ble.n	8005da0 <_dtoa_r+0x780>
 8005d64:	9b08      	ldr	r3, [sp, #32]
 8005d66:	b1ab      	cbz	r3, 8005d94 <_dtoa_r+0x774>
 8005d68:	b185      	cbz	r5, 8005d8c <_dtoa_r+0x76c>
 8005d6a:	4631      	mov	r1, r6
 8005d6c:	462a      	mov	r2, r5
 8005d6e:	4650      	mov	r0, sl
 8005d70:	f000 fd9e 	bl	80068b0 <__pow5mult>
 8005d74:	9a02      	ldr	r2, [sp, #8]
 8005d76:	4601      	mov	r1, r0
 8005d78:	4606      	mov	r6, r0
 8005d7a:	4650      	mov	r0, sl
 8005d7c:	f000 fd06 	bl	800678c <__multiply>
 8005d80:	9902      	ldr	r1, [sp, #8]
 8005d82:	4607      	mov	r7, r0
 8005d84:	4650      	mov	r0, sl
 8005d86:	f000 fc59 	bl	800663c <_Bfree>
 8005d8a:	9702      	str	r7, [sp, #8]
 8005d8c:	9b07      	ldr	r3, [sp, #28]
 8005d8e:	1b5a      	subs	r2, r3, r5
 8005d90:	d006      	beq.n	8005da0 <_dtoa_r+0x780>
 8005d92:	e000      	b.n	8005d96 <_dtoa_r+0x776>
 8005d94:	9a07      	ldr	r2, [sp, #28]
 8005d96:	9902      	ldr	r1, [sp, #8]
 8005d98:	4650      	mov	r0, sl
 8005d9a:	f000 fd89 	bl	80068b0 <__pow5mult>
 8005d9e:	9002      	str	r0, [sp, #8]
 8005da0:	2101      	movs	r1, #1
 8005da2:	4650      	mov	r0, sl
 8005da4:	f000 fce9 	bl	800677a <__i2b>
 8005da8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005daa:	4605      	mov	r5, r0
 8005dac:	b35b      	cbz	r3, 8005e06 <_dtoa_r+0x7e6>
 8005dae:	461a      	mov	r2, r3
 8005db0:	4601      	mov	r1, r0
 8005db2:	4650      	mov	r0, sl
 8005db4:	f000 fd7c 	bl	80068b0 <__pow5mult>
 8005db8:	9b06      	ldr	r3, [sp, #24]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	4605      	mov	r5, r0
 8005dbe:	dc18      	bgt.n	8005df2 <_dtoa_r+0x7d2>
 8005dc0:	9b00      	ldr	r3, [sp, #0]
 8005dc2:	b983      	cbnz	r3, 8005de6 <_dtoa_r+0x7c6>
 8005dc4:	9b01      	ldr	r3, [sp, #4]
 8005dc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dca:	b973      	cbnz	r3, 8005dea <_dtoa_r+0x7ca>
 8005dcc:	9b01      	ldr	r3, [sp, #4]
 8005dce:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8005dd2:	0d3f      	lsrs	r7, r7, #20
 8005dd4:	053f      	lsls	r7, r7, #20
 8005dd6:	b14f      	cbz	r7, 8005dec <_dtoa_r+0x7cc>
 8005dd8:	9b05      	ldr	r3, [sp, #20]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	f109 0901 	add.w	r9, r9, #1
 8005de0:	9305      	str	r3, [sp, #20]
 8005de2:	2701      	movs	r7, #1
 8005de4:	e002      	b.n	8005dec <_dtoa_r+0x7cc>
 8005de6:	2700      	movs	r7, #0
 8005de8:	e000      	b.n	8005dec <_dtoa_r+0x7cc>
 8005dea:	9f00      	ldr	r7, [sp, #0]
 8005dec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005dee:	b173      	cbz	r3, 8005e0e <_dtoa_r+0x7ee>
 8005df0:	e000      	b.n	8005df4 <_dtoa_r+0x7d4>
 8005df2:	2700      	movs	r7, #0
 8005df4:	692b      	ldr	r3, [r5, #16]
 8005df6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005dfa:	6918      	ldr	r0, [r3, #16]
 8005dfc:	f000 fc70 	bl	80066e0 <__hi0bits>
 8005e00:	f1c0 0020 	rsb	r0, r0, #32
 8005e04:	e004      	b.n	8005e10 <_dtoa_r+0x7f0>
 8005e06:	9b06      	ldr	r3, [sp, #24]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	ddd9      	ble.n	8005dc0 <_dtoa_r+0x7a0>
 8005e0c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8005e0e:	2001      	movs	r0, #1
 8005e10:	9b05      	ldr	r3, [sp, #20]
 8005e12:	4418      	add	r0, r3
 8005e14:	f010 001f 	ands.w	r0, r0, #31
 8005e18:	d00e      	beq.n	8005e38 <_dtoa_r+0x818>
 8005e1a:	f1c0 0320 	rsb	r3, r0, #32
 8005e1e:	2b04      	cmp	r3, #4
 8005e20:	dd08      	ble.n	8005e34 <_dtoa_r+0x814>
 8005e22:	f1c0 001c 	rsb	r0, r0, #28
 8005e26:	e008      	b.n	8005e3a <_dtoa_r+0x81a>
 8005e28:	08007690 	.word	0x08007690
 8005e2c:	40140000 	.word	0x40140000
 8005e30:	40240000 	.word	0x40240000
 8005e34:	d006      	beq.n	8005e44 <_dtoa_r+0x824>
 8005e36:	4618      	mov	r0, r3
 8005e38:	301c      	adds	r0, #28
 8005e3a:	9b05      	ldr	r3, [sp, #20]
 8005e3c:	4403      	add	r3, r0
 8005e3e:	4481      	add	r9, r0
 8005e40:	4404      	add	r4, r0
 8005e42:	9305      	str	r3, [sp, #20]
 8005e44:	f1b9 0f00 	cmp.w	r9, #0
 8005e48:	dd05      	ble.n	8005e56 <_dtoa_r+0x836>
 8005e4a:	464a      	mov	r2, r9
 8005e4c:	9902      	ldr	r1, [sp, #8]
 8005e4e:	4650      	mov	r0, sl
 8005e50:	f000 fd7c 	bl	800694c <__lshift>
 8005e54:	9002      	str	r0, [sp, #8]
 8005e56:	9b05      	ldr	r3, [sp, #20]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	dd05      	ble.n	8005e68 <_dtoa_r+0x848>
 8005e5c:	4629      	mov	r1, r5
 8005e5e:	461a      	mov	r2, r3
 8005e60:	4650      	mov	r0, sl
 8005e62:	f000 fd73 	bl	800694c <__lshift>
 8005e66:	4605      	mov	r5, r0
 8005e68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e6a:	b1eb      	cbz	r3, 8005ea8 <_dtoa_r+0x888>
 8005e6c:	4629      	mov	r1, r5
 8005e6e:	9802      	ldr	r0, [sp, #8]
 8005e70:	f000 fdbd 	bl	80069ee <__mcmp>
 8005e74:	2800      	cmp	r0, #0
 8005e76:	da17      	bge.n	8005ea8 <_dtoa_r+0x888>
 8005e78:	2300      	movs	r3, #0
 8005e7a:	220a      	movs	r2, #10
 8005e7c:	9902      	ldr	r1, [sp, #8]
 8005e7e:	4650      	mov	r0, sl
 8005e80:	f000 fbf3 	bl	800666a <__multadd>
 8005e84:	9b08      	ldr	r3, [sp, #32]
 8005e86:	9002      	str	r0, [sp, #8]
 8005e88:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 8158 	beq.w	8006142 <_dtoa_r+0xb22>
 8005e92:	2300      	movs	r3, #0
 8005e94:	4631      	mov	r1, r6
 8005e96:	220a      	movs	r2, #10
 8005e98:	4650      	mov	r0, sl
 8005e9a:	f000 fbe6 	bl	800666a <__multadd>
 8005e9e:	9b03      	ldr	r3, [sp, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	4606      	mov	r6, r0
 8005ea4:	dc37      	bgt.n	8005f16 <_dtoa_r+0x8f6>
 8005ea6:	e033      	b.n	8005f10 <_dtoa_r+0x8f0>
 8005ea8:	f1b8 0f00 	cmp.w	r8, #0
 8005eac:	dc2a      	bgt.n	8005f04 <_dtoa_r+0x8e4>
 8005eae:	9b06      	ldr	r3, [sp, #24]
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	dd27      	ble.n	8005f04 <_dtoa_r+0x8e4>
 8005eb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005eb8:	9b03      	ldr	r3, [sp, #12]
 8005eba:	b983      	cbnz	r3, 8005ede <_dtoa_r+0x8be>
 8005ebc:	4629      	mov	r1, r5
 8005ebe:	2205      	movs	r2, #5
 8005ec0:	4650      	mov	r0, sl
 8005ec2:	f000 fbd2 	bl	800666a <__multadd>
 8005ec6:	4601      	mov	r1, r0
 8005ec8:	4605      	mov	r5, r0
 8005eca:	9802      	ldr	r0, [sp, #8]
 8005ecc:	f000 fd8f 	bl	80069ee <__mcmp>
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	dc0d      	bgt.n	8005ef0 <_dtoa_r+0x8d0>
 8005ed4:	e003      	b.n	8005ede <_dtoa_r+0x8be>
 8005ed6:	463d      	mov	r5, r7
 8005ed8:	e000      	b.n	8005edc <_dtoa_r+0x8bc>
 8005eda:	2500      	movs	r5, #0
 8005edc:	462e      	mov	r6, r5
 8005ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ee0:	9c04      	ldr	r4, [sp, #16]
 8005ee2:	ea6f 0b03 	mvn.w	fp, r3
 8005ee6:	e00a      	b.n	8005efe <_dtoa_r+0x8de>
 8005ee8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8005eec:	463d      	mov	r5, r7
 8005eee:	463e      	mov	r6, r7
 8005ef0:	9b04      	ldr	r3, [sp, #16]
 8005ef2:	9a04      	ldr	r2, [sp, #16]
 8005ef4:	1c5c      	adds	r4, r3, #1
 8005ef6:	2331      	movs	r3, #49	; 0x31
 8005ef8:	7013      	strb	r3, [r2, #0]
 8005efa:	f10b 0b01 	add.w	fp, fp, #1
 8005efe:	46b0      	mov	r8, r6
 8005f00:	2600      	movs	r6, #0
 8005f02:	e0f7      	b.n	80060f4 <_dtoa_r+0xad4>
 8005f04:	9b08      	ldr	r3, [sp, #32]
 8005f06:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f0a:	b923      	cbnz	r3, 8005f16 <_dtoa_r+0x8f6>
 8005f0c:	9c04      	ldr	r4, [sp, #16]
 8005f0e:	e0b1      	b.n	8006074 <_dtoa_r+0xa54>
 8005f10:	9b06      	ldr	r3, [sp, #24]
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	dcd0      	bgt.n	8005eb8 <_dtoa_r+0x898>
 8005f16:	2c00      	cmp	r4, #0
 8005f18:	dd05      	ble.n	8005f26 <_dtoa_r+0x906>
 8005f1a:	4631      	mov	r1, r6
 8005f1c:	4622      	mov	r2, r4
 8005f1e:	4650      	mov	r0, sl
 8005f20:	f000 fd14 	bl	800694c <__lshift>
 8005f24:	4606      	mov	r6, r0
 8005f26:	b19f      	cbz	r7, 8005f50 <_dtoa_r+0x930>
 8005f28:	6871      	ldr	r1, [r6, #4]
 8005f2a:	4650      	mov	r0, sl
 8005f2c:	f000 fb51 	bl	80065d2 <_Balloc>
 8005f30:	6932      	ldr	r2, [r6, #16]
 8005f32:	3202      	adds	r2, #2
 8005f34:	4604      	mov	r4, r0
 8005f36:	0092      	lsls	r2, r2, #2
 8005f38:	f106 010c 	add.w	r1, r6, #12
 8005f3c:	300c      	adds	r0, #12
 8005f3e:	f000 fb3b 	bl	80065b8 <memcpy>
 8005f42:	2201      	movs	r2, #1
 8005f44:	4621      	mov	r1, r4
 8005f46:	4650      	mov	r0, sl
 8005f48:	f000 fd00 	bl	800694c <__lshift>
 8005f4c:	4680      	mov	r8, r0
 8005f4e:	e000      	b.n	8005f52 <_dtoa_r+0x932>
 8005f50:	46b0      	mov	r8, r6
 8005f52:	9b00      	ldr	r3, [sp, #0]
 8005f54:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	9305      	str	r3, [sp, #20]
 8005f5e:	4629      	mov	r1, r5
 8005f60:	9802      	ldr	r0, [sp, #8]
 8005f62:	f7ff facd 	bl	8005500 <quorem>
 8005f66:	4631      	mov	r1, r6
 8005f68:	4604      	mov	r4, r0
 8005f6a:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8005f6e:	9802      	ldr	r0, [sp, #8]
 8005f70:	f000 fd3d 	bl	80069ee <__mcmp>
 8005f74:	4642      	mov	r2, r8
 8005f76:	9000      	str	r0, [sp, #0]
 8005f78:	4629      	mov	r1, r5
 8005f7a:	4650      	mov	r0, sl
 8005f7c:	f000 fd53 	bl	8006a26 <__mdiff>
 8005f80:	68c3      	ldr	r3, [r0, #12]
 8005f82:	4602      	mov	r2, r0
 8005f84:	b93b      	cbnz	r3, 8005f96 <_dtoa_r+0x976>
 8005f86:	4601      	mov	r1, r0
 8005f88:	9007      	str	r0, [sp, #28]
 8005f8a:	9802      	ldr	r0, [sp, #8]
 8005f8c:	f000 fd2f 	bl	80069ee <__mcmp>
 8005f90:	9a07      	ldr	r2, [sp, #28]
 8005f92:	4603      	mov	r3, r0
 8005f94:	e000      	b.n	8005f98 <_dtoa_r+0x978>
 8005f96:	2301      	movs	r3, #1
 8005f98:	4611      	mov	r1, r2
 8005f9a:	4650      	mov	r0, sl
 8005f9c:	9307      	str	r3, [sp, #28]
 8005f9e:	f000 fb4d 	bl	800663c <_Bfree>
 8005fa2:	9b07      	ldr	r3, [sp, #28]
 8005fa4:	b94b      	cbnz	r3, 8005fba <_dtoa_r+0x99a>
 8005fa6:	9a06      	ldr	r2, [sp, #24]
 8005fa8:	b93a      	cbnz	r2, 8005fba <_dtoa_r+0x99a>
 8005faa:	9a05      	ldr	r2, [sp, #20]
 8005fac:	b92a      	cbnz	r2, 8005fba <_dtoa_r+0x99a>
 8005fae:	2f39      	cmp	r7, #57	; 0x39
 8005fb0:	d028      	beq.n	8006004 <_dtoa_r+0x9e4>
 8005fb2:	9b00      	ldr	r3, [sp, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	dc1a      	bgt.n	8005fee <_dtoa_r+0x9ce>
 8005fb8:	e01b      	b.n	8005ff2 <_dtoa_r+0x9d2>
 8005fba:	9a00      	ldr	r2, [sp, #0]
 8005fbc:	2a00      	cmp	r2, #0
 8005fbe:	db04      	blt.n	8005fca <_dtoa_r+0x9aa>
 8005fc0:	d11a      	bne.n	8005ff8 <_dtoa_r+0x9d8>
 8005fc2:	9a06      	ldr	r2, [sp, #24]
 8005fc4:	b9c2      	cbnz	r2, 8005ff8 <_dtoa_r+0x9d8>
 8005fc6:	9a05      	ldr	r2, [sp, #20]
 8005fc8:	b9b2      	cbnz	r2, 8005ff8 <_dtoa_r+0x9d8>
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	dd11      	ble.n	8005ff2 <_dtoa_r+0x9d2>
 8005fce:	2201      	movs	r2, #1
 8005fd0:	9902      	ldr	r1, [sp, #8]
 8005fd2:	4650      	mov	r0, sl
 8005fd4:	f000 fcba 	bl	800694c <__lshift>
 8005fd8:	4629      	mov	r1, r5
 8005fda:	9002      	str	r0, [sp, #8]
 8005fdc:	f000 fd07 	bl	80069ee <__mcmp>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	dc02      	bgt.n	8005fea <_dtoa_r+0x9ca>
 8005fe4:	d105      	bne.n	8005ff2 <_dtoa_r+0x9d2>
 8005fe6:	07fa      	lsls	r2, r7, #31
 8005fe8:	d503      	bpl.n	8005ff2 <_dtoa_r+0x9d2>
 8005fea:	2f39      	cmp	r7, #57	; 0x39
 8005fec:	d00a      	beq.n	8006004 <_dtoa_r+0x9e4>
 8005fee:	f104 0731 	add.w	r7, r4, #49	; 0x31
 8005ff2:	f109 0401 	add.w	r4, r9, #1
 8005ff6:	e00c      	b.n	8006012 <_dtoa_r+0x9f2>
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f109 0401 	add.w	r4, r9, #1
 8005ffe:	dd0b      	ble.n	8006018 <_dtoa_r+0x9f8>
 8006000:	2f39      	cmp	r7, #57	; 0x39
 8006002:	d105      	bne.n	8006010 <_dtoa_r+0x9f0>
 8006004:	2339      	movs	r3, #57	; 0x39
 8006006:	f889 3000 	strb.w	r3, [r9]
 800600a:	f109 0901 	add.w	r9, r9, #1
 800600e:	e054      	b.n	80060ba <_dtoa_r+0xa9a>
 8006010:	3701      	adds	r7, #1
 8006012:	f889 7000 	strb.w	r7, [r9]
 8006016:	e06d      	b.n	80060f4 <_dtoa_r+0xad4>
 8006018:	9b04      	ldr	r3, [sp, #16]
 800601a:	9a03      	ldr	r2, [sp, #12]
 800601c:	f804 7c01 	strb.w	r7, [r4, #-1]
 8006020:	1ae3      	subs	r3, r4, r3
 8006022:	4293      	cmp	r3, r2
 8006024:	46a1      	mov	r9, r4
 8006026:	d03a      	beq.n	800609e <_dtoa_r+0xa7e>
 8006028:	2300      	movs	r3, #0
 800602a:	220a      	movs	r2, #10
 800602c:	9902      	ldr	r1, [sp, #8]
 800602e:	4650      	mov	r0, sl
 8006030:	f000 fb1b 	bl	800666a <__multadd>
 8006034:	4546      	cmp	r6, r8
 8006036:	9002      	str	r0, [sp, #8]
 8006038:	f04f 0300 	mov.w	r3, #0
 800603c:	f04f 020a 	mov.w	r2, #10
 8006040:	4631      	mov	r1, r6
 8006042:	4650      	mov	r0, sl
 8006044:	d104      	bne.n	8006050 <_dtoa_r+0xa30>
 8006046:	f000 fb10 	bl	800666a <__multadd>
 800604a:	4606      	mov	r6, r0
 800604c:	4680      	mov	r8, r0
 800604e:	e786      	b.n	8005f5e <_dtoa_r+0x93e>
 8006050:	f000 fb0b 	bl	800666a <__multadd>
 8006054:	4641      	mov	r1, r8
 8006056:	4606      	mov	r6, r0
 8006058:	2300      	movs	r3, #0
 800605a:	220a      	movs	r2, #10
 800605c:	4650      	mov	r0, sl
 800605e:	f000 fb04 	bl	800666a <__multadd>
 8006062:	4680      	mov	r8, r0
 8006064:	e77b      	b.n	8005f5e <_dtoa_r+0x93e>
 8006066:	2300      	movs	r3, #0
 8006068:	220a      	movs	r2, #10
 800606a:	9902      	ldr	r1, [sp, #8]
 800606c:	4650      	mov	r0, sl
 800606e:	f000 fafc 	bl	800666a <__multadd>
 8006072:	9002      	str	r0, [sp, #8]
 8006074:	4629      	mov	r1, r5
 8006076:	9802      	ldr	r0, [sp, #8]
 8006078:	f7ff fa42 	bl	8005500 <quorem>
 800607c:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8006080:	f804 7b01 	strb.w	r7, [r4], #1
 8006084:	9b04      	ldr	r3, [sp, #16]
 8006086:	9a03      	ldr	r2, [sp, #12]
 8006088:	1ae3      	subs	r3, r4, r3
 800608a:	4293      	cmp	r3, r2
 800608c:	dbeb      	blt.n	8006066 <_dtoa_r+0xa46>
 800608e:	9b04      	ldr	r3, [sp, #16]
 8006090:	2a01      	cmp	r2, #1
 8006092:	bfac      	ite	ge
 8006094:	189b      	addge	r3, r3, r2
 8006096:	3301      	addlt	r3, #1
 8006098:	46b0      	mov	r8, r6
 800609a:	4699      	mov	r9, r3
 800609c:	2600      	movs	r6, #0
 800609e:	2201      	movs	r2, #1
 80060a0:	9902      	ldr	r1, [sp, #8]
 80060a2:	4650      	mov	r0, sl
 80060a4:	f000 fc52 	bl	800694c <__lshift>
 80060a8:	4629      	mov	r1, r5
 80060aa:	9002      	str	r0, [sp, #8]
 80060ac:	f000 fc9f 	bl	80069ee <__mcmp>
 80060b0:	2800      	cmp	r0, #0
 80060b2:	dc02      	bgt.n	80060ba <_dtoa_r+0xa9a>
 80060b4:	d115      	bne.n	80060e2 <_dtoa_r+0xac2>
 80060b6:	07fb      	lsls	r3, r7, #31
 80060b8:	d513      	bpl.n	80060e2 <_dtoa_r+0xac2>
 80060ba:	464c      	mov	r4, r9
 80060bc:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 80060c0:	2b39      	cmp	r3, #57	; 0x39
 80060c2:	f104 32ff 	add.w	r2, r4, #4294967295
 80060c6:	d109      	bne.n	80060dc <_dtoa_r+0xabc>
 80060c8:	9b04      	ldr	r3, [sp, #16]
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d104      	bne.n	80060d8 <_dtoa_r+0xab8>
 80060ce:	f10b 0b01 	add.w	fp, fp, #1
 80060d2:	2331      	movs	r3, #49	; 0x31
 80060d4:	9a04      	ldr	r2, [sp, #16]
 80060d6:	e002      	b.n	80060de <_dtoa_r+0xabe>
 80060d8:	4614      	mov	r4, r2
 80060da:	e7ef      	b.n	80060bc <_dtoa_r+0xa9c>
 80060dc:	3301      	adds	r3, #1
 80060de:	7013      	strb	r3, [r2, #0]
 80060e0:	e008      	b.n	80060f4 <_dtoa_r+0xad4>
 80060e2:	464c      	mov	r4, r9
 80060e4:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 80060e8:	2b30      	cmp	r3, #48	; 0x30
 80060ea:	f104 32ff 	add.w	r2, r4, #4294967295
 80060ee:	d101      	bne.n	80060f4 <_dtoa_r+0xad4>
 80060f0:	4614      	mov	r4, r2
 80060f2:	e7f7      	b.n	80060e4 <_dtoa_r+0xac4>
 80060f4:	4629      	mov	r1, r5
 80060f6:	4650      	mov	r0, sl
 80060f8:	f000 faa0 	bl	800663c <_Bfree>
 80060fc:	f1b8 0f00 	cmp.w	r8, #0
 8006100:	d00d      	beq.n	800611e <_dtoa_r+0xafe>
 8006102:	b12e      	cbz	r6, 8006110 <_dtoa_r+0xaf0>
 8006104:	4546      	cmp	r6, r8
 8006106:	d003      	beq.n	8006110 <_dtoa_r+0xaf0>
 8006108:	4631      	mov	r1, r6
 800610a:	4650      	mov	r0, sl
 800610c:	f000 fa96 	bl	800663c <_Bfree>
 8006110:	4641      	mov	r1, r8
 8006112:	4650      	mov	r0, sl
 8006114:	f000 fa92 	bl	800663c <_Bfree>
 8006118:	e001      	b.n	800611e <_dtoa_r+0xafe>
 800611a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800611e:	9902      	ldr	r1, [sp, #8]
 8006120:	4650      	mov	r0, sl
 8006122:	f000 fa8b 	bl	800663c <_Bfree>
 8006126:	2300      	movs	r3, #0
 8006128:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800612a:	7023      	strb	r3, [r4, #0]
 800612c:	f10b 0301 	add.w	r3, fp, #1
 8006130:	6013      	str	r3, [r2, #0]
 8006132:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006134:	b11b      	cbz	r3, 800613e <_dtoa_r+0xb1e>
 8006136:	601c      	str	r4, [r3, #0]
 8006138:	e001      	b.n	800613e <_dtoa_r+0xb1e>
 800613a:	4808      	ldr	r0, [pc, #32]	; (800615c <_dtoa_r+0xb3c>)
 800613c:	e00a      	b.n	8006154 <_dtoa_r+0xb34>
 800613e:	9804      	ldr	r0, [sp, #16]
 8006140:	e008      	b.n	8006154 <_dtoa_r+0xb34>
 8006142:	9b03      	ldr	r3, [sp, #12]
 8006144:	2b00      	cmp	r3, #0
 8006146:	f73f aee1 	bgt.w	8005f0c <_dtoa_r+0x8ec>
 800614a:	9b06      	ldr	r3, [sp, #24]
 800614c:	2b02      	cmp	r3, #2
 800614e:	f77f aedd 	ble.w	8005f0c <_dtoa_r+0x8ec>
 8006152:	e6b1      	b.n	8005eb8 <_dtoa_r+0x898>
 8006154:	b017      	add	sp, #92	; 0x5c
 8006156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800615a:	bf00      	nop
 800615c:	08007666 	.word	0x08007666

08006160 <_localeconv_r>:
 8006160:	4800      	ldr	r0, [pc, #0]	; (8006164 <_localeconv_r+0x4>)
 8006162:	4770      	bx	lr
 8006164:	200000f8 	.word	0x200000f8

08006168 <malloc>:
 8006168:	4b02      	ldr	r3, [pc, #8]	; (8006174 <malloc+0xc>)
 800616a:	4601      	mov	r1, r0
 800616c:	6818      	ldr	r0, [r3, #0]
 800616e:	f000 b803 	b.w	8006178 <_malloc_r>
 8006172:	bf00      	nop
 8006174:	200000f4 	.word	0x200000f4

08006178 <_malloc_r>:
 8006178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617c:	f101 040b 	add.w	r4, r1, #11
 8006180:	2c16      	cmp	r4, #22
 8006182:	b085      	sub	sp, #20
 8006184:	4681      	mov	r9, r0
 8006186:	d903      	bls.n	8006190 <_malloc_r+0x18>
 8006188:	f034 0407 	bics.w	r4, r4, #7
 800618c:	d501      	bpl.n	8006192 <_malloc_r+0x1a>
 800618e:	e002      	b.n	8006196 <_malloc_r+0x1e>
 8006190:	2410      	movs	r4, #16
 8006192:	428c      	cmp	r4, r1
 8006194:	d203      	bcs.n	800619e <_malloc_r+0x26>
 8006196:	230c      	movs	r3, #12
 8006198:	f8c9 3000 	str.w	r3, [r9]
 800619c:	e1ea      	b.n	8006574 <_malloc_r+0x3fc>
 800619e:	4648      	mov	r0, r9
 80061a0:	f000 fa15 	bl	80065ce <__malloc_lock>
 80061a4:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80061a8:	4d9e      	ldr	r5, [pc, #632]	; (8006424 <_malloc_r+0x2ac>)
 80061aa:	d217      	bcs.n	80061dc <_malloc_r+0x64>
 80061ac:	f104 0208 	add.w	r2, r4, #8
 80061b0:	442a      	add	r2, r5
 80061b2:	f1a2 0108 	sub.w	r1, r2, #8
 80061b6:	6856      	ldr	r6, [r2, #4]
 80061b8:	428e      	cmp	r6, r1
 80061ba:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 80061be:	d102      	bne.n	80061c6 <_malloc_r+0x4e>
 80061c0:	68d6      	ldr	r6, [r2, #12]
 80061c2:	42b2      	cmp	r2, r6
 80061c4:	d008      	beq.n	80061d8 <_malloc_r+0x60>
 80061c6:	6873      	ldr	r3, [r6, #4]
 80061c8:	68f2      	ldr	r2, [r6, #12]
 80061ca:	68b1      	ldr	r1, [r6, #8]
 80061cc:	f023 0303 	bic.w	r3, r3, #3
 80061d0:	60ca      	str	r2, [r1, #12]
 80061d2:	4433      	add	r3, r6
 80061d4:	6091      	str	r1, [r2, #8]
 80061d6:	e02f      	b.n	8006238 <_malloc_r+0xc0>
 80061d8:	3302      	adds	r3, #2
 80061da:	e03d      	b.n	8006258 <_malloc_r+0xe0>
 80061dc:	0a63      	lsrs	r3, r4, #9
 80061de:	d01a      	beq.n	8006216 <_malloc_r+0x9e>
 80061e0:	2b04      	cmp	r3, #4
 80061e2:	d802      	bhi.n	80061ea <_malloc_r+0x72>
 80061e4:	09a3      	lsrs	r3, r4, #6
 80061e6:	3338      	adds	r3, #56	; 0x38
 80061e8:	e018      	b.n	800621c <_malloc_r+0xa4>
 80061ea:	2b14      	cmp	r3, #20
 80061ec:	d801      	bhi.n	80061f2 <_malloc_r+0x7a>
 80061ee:	335b      	adds	r3, #91	; 0x5b
 80061f0:	e014      	b.n	800621c <_malloc_r+0xa4>
 80061f2:	2b54      	cmp	r3, #84	; 0x54
 80061f4:	d802      	bhi.n	80061fc <_malloc_r+0x84>
 80061f6:	0b23      	lsrs	r3, r4, #12
 80061f8:	336e      	adds	r3, #110	; 0x6e
 80061fa:	e00f      	b.n	800621c <_malloc_r+0xa4>
 80061fc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8006200:	d802      	bhi.n	8006208 <_malloc_r+0x90>
 8006202:	0be3      	lsrs	r3, r4, #15
 8006204:	3377      	adds	r3, #119	; 0x77
 8006206:	e009      	b.n	800621c <_malloc_r+0xa4>
 8006208:	f240 5254 	movw	r2, #1364	; 0x554
 800620c:	4293      	cmp	r3, r2
 800620e:	d804      	bhi.n	800621a <_malloc_r+0xa2>
 8006210:	0ca3      	lsrs	r3, r4, #18
 8006212:	337c      	adds	r3, #124	; 0x7c
 8006214:	e002      	b.n	800621c <_malloc_r+0xa4>
 8006216:	233f      	movs	r3, #63	; 0x3f
 8006218:	e000      	b.n	800621c <_malloc_r+0xa4>
 800621a:	237e      	movs	r3, #126	; 0x7e
 800621c:	1c5a      	adds	r2, r3, #1
 800621e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8006222:	f1a2 0008 	sub.w	r0, r2, #8
 8006226:	6856      	ldr	r6, [r2, #4]
 8006228:	e00c      	b.n	8006244 <_malloc_r+0xcc>
 800622a:	2900      	cmp	r1, #0
 800622c:	68f1      	ldr	r1, [r6, #12]
 800622e:	db08      	blt.n	8006242 <_malloc_r+0xca>
 8006230:	68b3      	ldr	r3, [r6, #8]
 8006232:	60d9      	str	r1, [r3, #12]
 8006234:	608b      	str	r3, [r1, #8]
 8006236:	18b3      	adds	r3, r6, r2
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	f042 0201 	orr.w	r2, r2, #1
 800623e:	605a      	str	r2, [r3, #4]
 8006240:	e1a3      	b.n	800658a <_malloc_r+0x412>
 8006242:	460e      	mov	r6, r1
 8006244:	4286      	cmp	r6, r0
 8006246:	d006      	beq.n	8006256 <_malloc_r+0xde>
 8006248:	6872      	ldr	r2, [r6, #4]
 800624a:	f022 0203 	bic.w	r2, r2, #3
 800624e:	1b11      	subs	r1, r2, r4
 8006250:	290f      	cmp	r1, #15
 8006252:	ddea      	ble.n	800622a <_malloc_r+0xb2>
 8006254:	3b01      	subs	r3, #1
 8006256:	3301      	adds	r3, #1
 8006258:	4a72      	ldr	r2, [pc, #456]	; (8006424 <_malloc_r+0x2ac>)
 800625a:	692e      	ldr	r6, [r5, #16]
 800625c:	f102 0708 	add.w	r7, r2, #8
 8006260:	42be      	cmp	r6, r7
 8006262:	4639      	mov	r1, r7
 8006264:	d079      	beq.n	800635a <_malloc_r+0x1e2>
 8006266:	6870      	ldr	r0, [r6, #4]
 8006268:	f020 0003 	bic.w	r0, r0, #3
 800626c:	ebc4 0e00 	rsb	lr, r4, r0
 8006270:	f1be 0f0f 	cmp.w	lr, #15
 8006274:	dd0d      	ble.n	8006292 <_malloc_r+0x11a>
 8006276:	1933      	adds	r3, r6, r4
 8006278:	f044 0401 	orr.w	r4, r4, #1
 800627c:	6074      	str	r4, [r6, #4]
 800627e:	6153      	str	r3, [r2, #20]
 8006280:	6113      	str	r3, [r2, #16]
 8006282:	f04e 0201 	orr.w	r2, lr, #1
 8006286:	60df      	str	r7, [r3, #12]
 8006288:	609f      	str	r7, [r3, #8]
 800628a:	605a      	str	r2, [r3, #4]
 800628c:	f843 e00e 	str.w	lr, [r3, lr]
 8006290:	e17b      	b.n	800658a <_malloc_r+0x412>
 8006292:	f1be 0f00 	cmp.w	lr, #0
 8006296:	6157      	str	r7, [r2, #20]
 8006298:	6117      	str	r7, [r2, #16]
 800629a:	db05      	blt.n	80062a8 <_malloc_r+0x130>
 800629c:	4430      	add	r0, r6
 800629e:	6843      	ldr	r3, [r0, #4]
 80062a0:	f043 0301 	orr.w	r3, r3, #1
 80062a4:	6043      	str	r3, [r0, #4]
 80062a6:	e170      	b.n	800658a <_malloc_r+0x412>
 80062a8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80062ac:	d215      	bcs.n	80062da <_malloc_r+0x162>
 80062ae:	08c0      	lsrs	r0, r0, #3
 80062b0:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 80062b4:	2701      	movs	r7, #1
 80062b6:	fa07 fe0e 	lsl.w	lr, r7, lr
 80062ba:	6857      	ldr	r7, [r2, #4]
 80062bc:	3001      	adds	r0, #1
 80062be:	ea4e 0707 	orr.w	r7, lr, r7
 80062c2:	6057      	str	r7, [r2, #4]
 80062c4:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 80062c8:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 80062cc:	f8c6 e008 	str.w	lr, [r6, #8]
 80062d0:	3f08      	subs	r7, #8
 80062d2:	60f7      	str	r7, [r6, #12]
 80062d4:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 80062d8:	e03d      	b.n	8006356 <_malloc_r+0x1de>
 80062da:	0a42      	lsrs	r2, r0, #9
 80062dc:	2a04      	cmp	r2, #4
 80062de:	d802      	bhi.n	80062e6 <_malloc_r+0x16e>
 80062e0:	0982      	lsrs	r2, r0, #6
 80062e2:	3238      	adds	r2, #56	; 0x38
 80062e4:	e015      	b.n	8006312 <_malloc_r+0x19a>
 80062e6:	2a14      	cmp	r2, #20
 80062e8:	d801      	bhi.n	80062ee <_malloc_r+0x176>
 80062ea:	325b      	adds	r2, #91	; 0x5b
 80062ec:	e011      	b.n	8006312 <_malloc_r+0x19a>
 80062ee:	2a54      	cmp	r2, #84	; 0x54
 80062f0:	d802      	bhi.n	80062f8 <_malloc_r+0x180>
 80062f2:	0b02      	lsrs	r2, r0, #12
 80062f4:	326e      	adds	r2, #110	; 0x6e
 80062f6:	e00c      	b.n	8006312 <_malloc_r+0x19a>
 80062f8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80062fc:	d802      	bhi.n	8006304 <_malloc_r+0x18c>
 80062fe:	0bc2      	lsrs	r2, r0, #15
 8006300:	3277      	adds	r2, #119	; 0x77
 8006302:	e006      	b.n	8006312 <_malloc_r+0x19a>
 8006304:	f240 5754 	movw	r7, #1364	; 0x554
 8006308:	42ba      	cmp	r2, r7
 800630a:	bf9a      	itte	ls
 800630c:	0c82      	lsrls	r2, r0, #18
 800630e:	327c      	addls	r2, #124	; 0x7c
 8006310:	227e      	movhi	r2, #126	; 0x7e
 8006312:	1c57      	adds	r7, r2, #1
 8006314:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8006318:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800631c:	f8df c104 	ldr.w	ip, [pc, #260]	; 8006424 <_malloc_r+0x2ac>
 8006320:	45be      	cmp	lr, r7
 8006322:	d10d      	bne.n	8006340 <_malloc_r+0x1c8>
 8006324:	2001      	movs	r0, #1
 8006326:	1092      	asrs	r2, r2, #2
 8006328:	fa00 f202 	lsl.w	r2, r0, r2
 800632c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8006330:	4310      	orrs	r0, r2
 8006332:	f8cc 0004 	str.w	r0, [ip, #4]
 8006336:	4672      	mov	r2, lr
 8006338:	e009      	b.n	800634e <_malloc_r+0x1d6>
 800633a:	68bf      	ldr	r7, [r7, #8]
 800633c:	45be      	cmp	lr, r7
 800633e:	d004      	beq.n	800634a <_malloc_r+0x1d2>
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	f022 0203 	bic.w	r2, r2, #3
 8006346:	4290      	cmp	r0, r2
 8006348:	d3f7      	bcc.n	800633a <_malloc_r+0x1c2>
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	46be      	mov	lr, r7
 800634e:	60f2      	str	r2, [r6, #12]
 8006350:	f8c6 e008 	str.w	lr, [r6, #8]
 8006354:	6096      	str	r6, [r2, #8]
 8006356:	f8ce 600c 	str.w	r6, [lr, #12]
 800635a:	2001      	movs	r0, #1
 800635c:	109a      	asrs	r2, r3, #2
 800635e:	fa00 f202 	lsl.w	r2, r0, r2
 8006362:	6868      	ldr	r0, [r5, #4]
 8006364:	4282      	cmp	r2, r0
 8006366:	d85f      	bhi.n	8006428 <_malloc_r+0x2b0>
 8006368:	4202      	tst	r2, r0
 800636a:	d106      	bne.n	800637a <_malloc_r+0x202>
 800636c:	f023 0303 	bic.w	r3, r3, #3
 8006370:	0052      	lsls	r2, r2, #1
 8006372:	4202      	tst	r2, r0
 8006374:	f103 0304 	add.w	r3, r3, #4
 8006378:	d0fa      	beq.n	8006370 <_malloc_r+0x1f8>
 800637a:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 800637e:	46c2      	mov	sl, r8
 8006380:	469c      	mov	ip, r3
 8006382:	f8da 600c 	ldr.w	r6, [sl, #12]
 8006386:	4556      	cmp	r6, sl
 8006388:	d02c      	beq.n	80063e4 <_malloc_r+0x26c>
 800638a:	6870      	ldr	r0, [r6, #4]
 800638c:	68f7      	ldr	r7, [r6, #12]
 800638e:	f020 0003 	bic.w	r0, r0, #3
 8006392:	ebc4 0e00 	rsb	lr, r4, r0
 8006396:	f1be 0f0f 	cmp.w	lr, #15
 800639a:	dd11      	ble.n	80063c0 <_malloc_r+0x248>
 800639c:	1933      	adds	r3, r6, r4
 800639e:	f044 0401 	orr.w	r4, r4, #1
 80063a2:	6074      	str	r4, [r6, #4]
 80063a4:	f856 2f08 	ldr.w	r2, [r6, #8]!
 80063a8:	60d7      	str	r7, [r2, #12]
 80063aa:	60ba      	str	r2, [r7, #8]
 80063ac:	f04e 0201 	orr.w	r2, lr, #1
 80063b0:	616b      	str	r3, [r5, #20]
 80063b2:	612b      	str	r3, [r5, #16]
 80063b4:	60d9      	str	r1, [r3, #12]
 80063b6:	6099      	str	r1, [r3, #8]
 80063b8:	605a      	str	r2, [r3, #4]
 80063ba:	f843 e00e 	str.w	lr, [r3, lr]
 80063be:	e00b      	b.n	80063d8 <_malloc_r+0x260>
 80063c0:	f1be 0f00 	cmp.w	lr, #0
 80063c4:	db0c      	blt.n	80063e0 <_malloc_r+0x268>
 80063c6:	1833      	adds	r3, r6, r0
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	f042 0201 	orr.w	r2, r2, #1
 80063ce:	605a      	str	r2, [r3, #4]
 80063d0:	f856 3f08 	ldr.w	r3, [r6, #8]!
 80063d4:	60df      	str	r7, [r3, #12]
 80063d6:	60bb      	str	r3, [r7, #8]
 80063d8:	4648      	mov	r0, r9
 80063da:	f000 f8f9 	bl	80065d0 <__malloc_unlock>
 80063de:	e0d8      	b.n	8006592 <_malloc_r+0x41a>
 80063e0:	463e      	mov	r6, r7
 80063e2:	e7d0      	b.n	8006386 <_malloc_r+0x20e>
 80063e4:	f10c 0c01 	add.w	ip, ip, #1
 80063e8:	f01c 0f03 	tst.w	ip, #3
 80063ec:	f10a 0a08 	add.w	sl, sl, #8
 80063f0:	d1c7      	bne.n	8006382 <_malloc_r+0x20a>
 80063f2:	0798      	lsls	r0, r3, #30
 80063f4:	d104      	bne.n	8006400 <_malloc_r+0x288>
 80063f6:	686b      	ldr	r3, [r5, #4]
 80063f8:	ea23 0302 	bic.w	r3, r3, r2
 80063fc:	606b      	str	r3, [r5, #4]
 80063fe:	e005      	b.n	800640c <_malloc_r+0x294>
 8006400:	f858 0908 	ldr.w	r0, [r8], #-8
 8006404:	4580      	cmp	r8, r0
 8006406:	f103 33ff 	add.w	r3, r3, #4294967295
 800640a:	d0f2      	beq.n	80063f2 <_malloc_r+0x27a>
 800640c:	6868      	ldr	r0, [r5, #4]
 800640e:	0052      	lsls	r2, r2, #1
 8006410:	4282      	cmp	r2, r0
 8006412:	d809      	bhi.n	8006428 <_malloc_r+0x2b0>
 8006414:	b142      	cbz	r2, 8006428 <_malloc_r+0x2b0>
 8006416:	4663      	mov	r3, ip
 8006418:	4202      	tst	r2, r0
 800641a:	d1ae      	bne.n	800637a <_malloc_r+0x202>
 800641c:	3304      	adds	r3, #4
 800641e:	0052      	lsls	r2, r2, #1
 8006420:	e7fa      	b.n	8006418 <_malloc_r+0x2a0>
 8006422:	bf00      	nop
 8006424:	20000130 	.word	0x20000130
 8006428:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800642c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8006430:	f026 0603 	bic.w	r6, r6, #3
 8006434:	42b4      	cmp	r4, r6
 8006436:	d803      	bhi.n	8006440 <_malloc_r+0x2c8>
 8006438:	1b33      	subs	r3, r6, r4
 800643a:	2b0f      	cmp	r3, #15
 800643c:	f300 809c 	bgt.w	8006578 <_malloc_r+0x400>
 8006440:	4a56      	ldr	r2, [pc, #344]	; (800659c <_malloc_r+0x424>)
 8006442:	4957      	ldr	r1, [pc, #348]	; (80065a0 <_malloc_r+0x428>)
 8006444:	6812      	ldr	r2, [r2, #0]
 8006446:	6808      	ldr	r0, [r1, #0]
 8006448:	9101      	str	r1, [sp, #4]
 800644a:	f102 0810 	add.w	r8, r2, #16
 800644e:	4a55      	ldr	r2, [pc, #340]	; (80065a4 <_malloc_r+0x42c>)
 8006450:	9203      	str	r2, [sp, #12]
 8006452:	3001      	adds	r0, #1
 8006454:	bf18      	it	ne
 8006456:	f102 31ff 	addne.w	r1, r2, #4294967295
 800645a:	44a0      	add	r8, r4
 800645c:	bf1e      	ittt	ne
 800645e:	4488      	addne	r8, r1
 8006460:	4251      	negne	r1, r2
 8006462:	ea01 0808 	andne.w	r8, r1, r8
 8006466:	eb0b 0306 	add.w	r3, fp, r6
 800646a:	4641      	mov	r1, r8
 800646c:	4648      	mov	r0, r9
 800646e:	9302      	str	r3, [sp, #8]
 8006470:	f000 fb86 	bl	8006b80 <_sbrk_r>
 8006474:	1c42      	adds	r2, r0, #1
 8006476:	4607      	mov	r7, r0
 8006478:	d06f      	beq.n	800655a <_malloc_r+0x3e2>
 800647a:	9b02      	ldr	r3, [sp, #8]
 800647c:	9a03      	ldr	r2, [sp, #12]
 800647e:	4283      	cmp	r3, r0
 8006480:	d901      	bls.n	8006486 <_malloc_r+0x30e>
 8006482:	45ab      	cmp	fp, r5
 8006484:	d169      	bne.n	800655a <_malloc_r+0x3e2>
 8006486:	f8df a128 	ldr.w	sl, [pc, #296]	; 80065b0 <_malloc_r+0x438>
 800648a:	f8df c128 	ldr.w	ip, [pc, #296]	; 80065b4 <_malloc_r+0x43c>
 800648e:	f8da 0000 	ldr.w	r0, [sl]
 8006492:	42bb      	cmp	r3, r7
 8006494:	4440      	add	r0, r8
 8006496:	f8ca 0000 	str.w	r0, [sl]
 800649a:	d108      	bne.n	80064ae <_malloc_r+0x336>
 800649c:	ea13 0f0c 	tst.w	r3, ip
 80064a0:	d105      	bne.n	80064ae <_malloc_r+0x336>
 80064a2:	68ab      	ldr	r3, [r5, #8]
 80064a4:	4446      	add	r6, r8
 80064a6:	f046 0601 	orr.w	r6, r6, #1
 80064aa:	605e      	str	r6, [r3, #4]
 80064ac:	e049      	b.n	8006542 <_malloc_r+0x3ca>
 80064ae:	9901      	ldr	r1, [sp, #4]
 80064b0:	f8d1 e000 	ldr.w	lr, [r1]
 80064b4:	f1be 3fff 	cmp.w	lr, #4294967295
 80064b8:	bf15      	itete	ne
 80064ba:	1afb      	subne	r3, r7, r3
 80064bc:	4b38      	ldreq	r3, [pc, #224]	; (80065a0 <_malloc_r+0x428>)
 80064be:	181b      	addne	r3, r3, r0
 80064c0:	601f      	streq	r7, [r3, #0]
 80064c2:	bf18      	it	ne
 80064c4:	f8ca 3000 	strne.w	r3, [sl]
 80064c8:	f017 0307 	ands.w	r3, r7, #7
 80064cc:	bf1c      	itt	ne
 80064ce:	f1c3 0308 	rsbne	r3, r3, #8
 80064d2:	18ff      	addne	r7, r7, r3
 80064d4:	44b8      	add	r8, r7
 80064d6:	441a      	add	r2, r3
 80064d8:	ea08 080c 	and.w	r8, r8, ip
 80064dc:	ebc8 0802 	rsb	r8, r8, r2
 80064e0:	4641      	mov	r1, r8
 80064e2:	4648      	mov	r0, r9
 80064e4:	f000 fb4c 	bl	8006b80 <_sbrk_r>
 80064e8:	1c43      	adds	r3, r0, #1
 80064ea:	bf04      	itt	eq
 80064ec:	4638      	moveq	r0, r7
 80064ee:	f04f 0800 	moveq.w	r8, #0
 80064f2:	f8da 3000 	ldr.w	r3, [sl]
 80064f6:	60af      	str	r7, [r5, #8]
 80064f8:	1bc2      	subs	r2, r0, r7
 80064fa:	4442      	add	r2, r8
 80064fc:	4443      	add	r3, r8
 80064fe:	f042 0201 	orr.w	r2, r2, #1
 8006502:	45ab      	cmp	fp, r5
 8006504:	f8ca 3000 	str.w	r3, [sl]
 8006508:	607a      	str	r2, [r7, #4]
 800650a:	d01a      	beq.n	8006542 <_malloc_r+0x3ca>
 800650c:	2e0f      	cmp	r6, #15
 800650e:	d802      	bhi.n	8006516 <_malloc_r+0x39e>
 8006510:	2301      	movs	r3, #1
 8006512:	607b      	str	r3, [r7, #4]
 8006514:	e021      	b.n	800655a <_malloc_r+0x3e2>
 8006516:	f8db 3004 	ldr.w	r3, [fp, #4]
 800651a:	3e0c      	subs	r6, #12
 800651c:	f026 0607 	bic.w	r6, r6, #7
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	4333      	orrs	r3, r6
 8006526:	f8cb 3004 	str.w	r3, [fp, #4]
 800652a:	eb0b 0306 	add.w	r3, fp, r6
 800652e:	2205      	movs	r2, #5
 8006530:	2e0f      	cmp	r6, #15
 8006532:	605a      	str	r2, [r3, #4]
 8006534:	609a      	str	r2, [r3, #8]
 8006536:	d904      	bls.n	8006542 <_malloc_r+0x3ca>
 8006538:	f10b 0108 	add.w	r1, fp, #8
 800653c:	4648      	mov	r0, r9
 800653e:	f000 fc31 	bl	8006da4 <_free_r>
 8006542:	4a19      	ldr	r2, [pc, #100]	; (80065a8 <_malloc_r+0x430>)
 8006544:	f8da 3000 	ldr.w	r3, [sl]
 8006548:	6811      	ldr	r1, [r2, #0]
 800654a:	428b      	cmp	r3, r1
 800654c:	bf88      	it	hi
 800654e:	6013      	strhi	r3, [r2, #0]
 8006550:	4a16      	ldr	r2, [pc, #88]	; (80065ac <_malloc_r+0x434>)
 8006552:	6811      	ldr	r1, [r2, #0]
 8006554:	428b      	cmp	r3, r1
 8006556:	bf88      	it	hi
 8006558:	6013      	strhi	r3, [r2, #0]
 800655a:	68ab      	ldr	r3, [r5, #8]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	f022 0203 	bic.w	r2, r2, #3
 8006562:	4294      	cmp	r4, r2
 8006564:	eba2 0304 	sub.w	r3, r2, r4
 8006568:	d801      	bhi.n	800656e <_malloc_r+0x3f6>
 800656a:	2b0f      	cmp	r3, #15
 800656c:	dc04      	bgt.n	8006578 <_malloc_r+0x400>
 800656e:	4648      	mov	r0, r9
 8006570:	f000 f82e 	bl	80065d0 <__malloc_unlock>
 8006574:	2600      	movs	r6, #0
 8006576:	e00c      	b.n	8006592 <_malloc_r+0x41a>
 8006578:	68ae      	ldr	r6, [r5, #8]
 800657a:	f044 0201 	orr.w	r2, r4, #1
 800657e:	4434      	add	r4, r6
 8006580:	f043 0301 	orr.w	r3, r3, #1
 8006584:	6072      	str	r2, [r6, #4]
 8006586:	60ac      	str	r4, [r5, #8]
 8006588:	6063      	str	r3, [r4, #4]
 800658a:	4648      	mov	r0, r9
 800658c:	f000 f820 	bl	80065d0 <__malloc_unlock>
 8006590:	3608      	adds	r6, #8
 8006592:	4630      	mov	r0, r6
 8006594:	b005      	add	sp, #20
 8006596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800659a:	bf00      	nop
 800659c:	20001abc 	.word	0x20001abc
 80065a0:	2000053c 	.word	0x2000053c
 80065a4:	00001000 	.word	0x00001000
 80065a8:	20001ab8 	.word	0x20001ab8
 80065ac:	20001ab4 	.word	0x20001ab4
 80065b0:	20001ac0 	.word	0x20001ac0
 80065b4:	00000fff 	.word	0x00000fff

080065b8 <memcpy>:
 80065b8:	b510      	push	{r4, lr}
 80065ba:	1e43      	subs	r3, r0, #1
 80065bc:	440a      	add	r2, r1
 80065be:	4291      	cmp	r1, r2
 80065c0:	d004      	beq.n	80065cc <memcpy+0x14>
 80065c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065ca:	e7f8      	b.n	80065be <memcpy+0x6>
 80065cc:	bd10      	pop	{r4, pc}

080065ce <__malloc_lock>:
 80065ce:	4770      	bx	lr

080065d0 <__malloc_unlock>:
 80065d0:	4770      	bx	lr

080065d2 <_Balloc>:
 80065d2:	b570      	push	{r4, r5, r6, lr}
 80065d4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80065d6:	4604      	mov	r4, r0
 80065d8:	460e      	mov	r6, r1
 80065da:	b93d      	cbnz	r5, 80065ec <_Balloc+0x1a>
 80065dc:	2010      	movs	r0, #16
 80065de:	f7ff fdc3 	bl	8006168 <malloc>
 80065e2:	6260      	str	r0, [r4, #36]	; 0x24
 80065e4:	6045      	str	r5, [r0, #4]
 80065e6:	6085      	str	r5, [r0, #8]
 80065e8:	6005      	str	r5, [r0, #0]
 80065ea:	60c5      	str	r5, [r0, #12]
 80065ec:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80065ee:	68eb      	ldr	r3, [r5, #12]
 80065f0:	b143      	cbz	r3, 8006604 <_Balloc+0x32>
 80065f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80065fa:	b178      	cbz	r0, 800661c <_Balloc+0x4a>
 80065fc:	6802      	ldr	r2, [r0, #0]
 80065fe:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006602:	e017      	b.n	8006634 <_Balloc+0x62>
 8006604:	2221      	movs	r2, #33	; 0x21
 8006606:	2104      	movs	r1, #4
 8006608:	4620      	mov	r0, r4
 800660a:	f000 fb48 	bl	8006c9e <_calloc_r>
 800660e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006610:	60e8      	str	r0, [r5, #12]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1ec      	bne.n	80065f2 <_Balloc+0x20>
 8006618:	2000      	movs	r0, #0
 800661a:	bd70      	pop	{r4, r5, r6, pc}
 800661c:	2101      	movs	r1, #1
 800661e:	fa01 f506 	lsl.w	r5, r1, r6
 8006622:	1d6a      	adds	r2, r5, #5
 8006624:	0092      	lsls	r2, r2, #2
 8006626:	4620      	mov	r0, r4
 8006628:	f000 fb39 	bl	8006c9e <_calloc_r>
 800662c:	2800      	cmp	r0, #0
 800662e:	d0f3      	beq.n	8006618 <_Balloc+0x46>
 8006630:	6046      	str	r6, [r0, #4]
 8006632:	6085      	str	r5, [r0, #8]
 8006634:	2300      	movs	r3, #0
 8006636:	6103      	str	r3, [r0, #16]
 8006638:	60c3      	str	r3, [r0, #12]
 800663a:	bd70      	pop	{r4, r5, r6, pc}

0800663c <_Bfree>:
 800663c:	b570      	push	{r4, r5, r6, lr}
 800663e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006640:	4606      	mov	r6, r0
 8006642:	460d      	mov	r5, r1
 8006644:	b93c      	cbnz	r4, 8006656 <_Bfree+0x1a>
 8006646:	2010      	movs	r0, #16
 8006648:	f7ff fd8e 	bl	8006168 <malloc>
 800664c:	6270      	str	r0, [r6, #36]	; 0x24
 800664e:	6044      	str	r4, [r0, #4]
 8006650:	6084      	str	r4, [r0, #8]
 8006652:	6004      	str	r4, [r0, #0]
 8006654:	60c4      	str	r4, [r0, #12]
 8006656:	b13d      	cbz	r5, 8006668 <_Bfree+0x2c>
 8006658:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800665a:	686a      	ldr	r2, [r5, #4]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006662:	6029      	str	r1, [r5, #0]
 8006664:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006668:	bd70      	pop	{r4, r5, r6, pc}

0800666a <__multadd>:
 800666a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800666e:	690d      	ldr	r5, [r1, #16]
 8006670:	461f      	mov	r7, r3
 8006672:	4606      	mov	r6, r0
 8006674:	460c      	mov	r4, r1
 8006676:	f101 0e14 	add.w	lr, r1, #20
 800667a:	2300      	movs	r3, #0
 800667c:	f8de 0000 	ldr.w	r0, [lr]
 8006680:	b281      	uxth	r1, r0
 8006682:	fb02 7101 	mla	r1, r2, r1, r7
 8006686:	0c0f      	lsrs	r7, r1, #16
 8006688:	0c00      	lsrs	r0, r0, #16
 800668a:	fb02 7000 	mla	r0, r2, r0, r7
 800668e:	b289      	uxth	r1, r1
 8006690:	3301      	adds	r3, #1
 8006692:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006696:	429d      	cmp	r5, r3
 8006698:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800669c:	f84e 1b04 	str.w	r1, [lr], #4
 80066a0:	dcec      	bgt.n	800667c <__multadd+0x12>
 80066a2:	b1d7      	cbz	r7, 80066da <__multadd+0x70>
 80066a4:	68a3      	ldr	r3, [r4, #8]
 80066a6:	429d      	cmp	r5, r3
 80066a8:	db12      	blt.n	80066d0 <__multadd+0x66>
 80066aa:	6861      	ldr	r1, [r4, #4]
 80066ac:	4630      	mov	r0, r6
 80066ae:	3101      	adds	r1, #1
 80066b0:	f7ff ff8f 	bl	80065d2 <_Balloc>
 80066b4:	6922      	ldr	r2, [r4, #16]
 80066b6:	3202      	adds	r2, #2
 80066b8:	f104 010c 	add.w	r1, r4, #12
 80066bc:	4680      	mov	r8, r0
 80066be:	0092      	lsls	r2, r2, #2
 80066c0:	300c      	adds	r0, #12
 80066c2:	f7ff ff79 	bl	80065b8 <memcpy>
 80066c6:	4621      	mov	r1, r4
 80066c8:	4630      	mov	r0, r6
 80066ca:	f7ff ffb7 	bl	800663c <_Bfree>
 80066ce:	4644      	mov	r4, r8
 80066d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80066d4:	3501      	adds	r5, #1
 80066d6:	615f      	str	r7, [r3, #20]
 80066d8:	6125      	str	r5, [r4, #16]
 80066da:	4620      	mov	r0, r4
 80066dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080066e0 <__hi0bits>:
 80066e0:	0c03      	lsrs	r3, r0, #16
 80066e2:	041b      	lsls	r3, r3, #16
 80066e4:	b913      	cbnz	r3, 80066ec <__hi0bits+0xc>
 80066e6:	0400      	lsls	r0, r0, #16
 80066e8:	2310      	movs	r3, #16
 80066ea:	e000      	b.n	80066ee <__hi0bits+0xe>
 80066ec:	2300      	movs	r3, #0
 80066ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80066f2:	bf04      	itt	eq
 80066f4:	0200      	lsleq	r0, r0, #8
 80066f6:	3308      	addeq	r3, #8
 80066f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80066fc:	bf04      	itt	eq
 80066fe:	0100      	lsleq	r0, r0, #4
 8006700:	3304      	addeq	r3, #4
 8006702:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006706:	bf04      	itt	eq
 8006708:	0080      	lsleq	r0, r0, #2
 800670a:	3302      	addeq	r3, #2
 800670c:	2800      	cmp	r0, #0
 800670e:	db03      	blt.n	8006718 <__hi0bits+0x38>
 8006710:	0042      	lsls	r2, r0, #1
 8006712:	d503      	bpl.n	800671c <__hi0bits+0x3c>
 8006714:	1c58      	adds	r0, r3, #1
 8006716:	4770      	bx	lr
 8006718:	4618      	mov	r0, r3
 800671a:	4770      	bx	lr
 800671c:	2020      	movs	r0, #32
 800671e:	4770      	bx	lr

08006720 <__lo0bits>:
 8006720:	6803      	ldr	r3, [r0, #0]
 8006722:	f013 0207 	ands.w	r2, r3, #7
 8006726:	d00b      	beq.n	8006740 <__lo0bits+0x20>
 8006728:	07d9      	lsls	r1, r3, #31
 800672a:	d422      	bmi.n	8006772 <__lo0bits+0x52>
 800672c:	079a      	lsls	r2, r3, #30
 800672e:	bf4b      	itete	mi
 8006730:	085b      	lsrmi	r3, r3, #1
 8006732:	089b      	lsrpl	r3, r3, #2
 8006734:	6003      	strmi	r3, [r0, #0]
 8006736:	6003      	strpl	r3, [r0, #0]
 8006738:	bf4c      	ite	mi
 800673a:	2001      	movmi	r0, #1
 800673c:	2002      	movpl	r0, #2
 800673e:	4770      	bx	lr
 8006740:	b299      	uxth	r1, r3
 8006742:	b909      	cbnz	r1, 8006748 <__lo0bits+0x28>
 8006744:	0c1b      	lsrs	r3, r3, #16
 8006746:	2210      	movs	r2, #16
 8006748:	f013 0fff 	tst.w	r3, #255	; 0xff
 800674c:	bf04      	itt	eq
 800674e:	0a1b      	lsreq	r3, r3, #8
 8006750:	3208      	addeq	r2, #8
 8006752:	0719      	lsls	r1, r3, #28
 8006754:	bf04      	itt	eq
 8006756:	091b      	lsreq	r3, r3, #4
 8006758:	3204      	addeq	r2, #4
 800675a:	0799      	lsls	r1, r3, #30
 800675c:	bf04      	itt	eq
 800675e:	089b      	lsreq	r3, r3, #2
 8006760:	3202      	addeq	r2, #2
 8006762:	07d9      	lsls	r1, r3, #31
 8006764:	d402      	bmi.n	800676c <__lo0bits+0x4c>
 8006766:	085b      	lsrs	r3, r3, #1
 8006768:	d005      	beq.n	8006776 <__lo0bits+0x56>
 800676a:	3201      	adds	r2, #1
 800676c:	6003      	str	r3, [r0, #0]
 800676e:	4610      	mov	r0, r2
 8006770:	4770      	bx	lr
 8006772:	2000      	movs	r0, #0
 8006774:	4770      	bx	lr
 8006776:	2020      	movs	r0, #32
 8006778:	4770      	bx	lr

0800677a <__i2b>:
 800677a:	b510      	push	{r4, lr}
 800677c:	460c      	mov	r4, r1
 800677e:	2101      	movs	r1, #1
 8006780:	f7ff ff27 	bl	80065d2 <_Balloc>
 8006784:	2201      	movs	r2, #1
 8006786:	6144      	str	r4, [r0, #20]
 8006788:	6102      	str	r2, [r0, #16]
 800678a:	bd10      	pop	{r4, pc}

0800678c <__multiply>:
 800678c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006790:	4614      	mov	r4, r2
 8006792:	690a      	ldr	r2, [r1, #16]
 8006794:	6923      	ldr	r3, [r4, #16]
 8006796:	429a      	cmp	r2, r3
 8006798:	bfb8      	it	lt
 800679a:	460b      	movlt	r3, r1
 800679c:	4688      	mov	r8, r1
 800679e:	bfbc      	itt	lt
 80067a0:	46a0      	movlt	r8, r4
 80067a2:	461c      	movlt	r4, r3
 80067a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80067a8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80067ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80067b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80067b4:	eb07 0609 	add.w	r6, r7, r9
 80067b8:	429e      	cmp	r6, r3
 80067ba:	bfc8      	it	gt
 80067bc:	3101      	addgt	r1, #1
 80067be:	f7ff ff08 	bl	80065d2 <_Balloc>
 80067c2:	f100 0514 	add.w	r5, r0, #20
 80067c6:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 80067ca:	462b      	mov	r3, r5
 80067cc:	2200      	movs	r2, #0
 80067ce:	4563      	cmp	r3, ip
 80067d0:	d202      	bcs.n	80067d8 <__multiply+0x4c>
 80067d2:	f843 2b04 	str.w	r2, [r3], #4
 80067d6:	e7fa      	b.n	80067ce <__multiply+0x42>
 80067d8:	f104 0214 	add.w	r2, r4, #20
 80067dc:	f108 0114 	add.w	r1, r8, #20
 80067e0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80067e4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	9b00      	ldr	r3, [sp, #0]
 80067ec:	9201      	str	r2, [sp, #4]
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d957      	bls.n	80068a2 <__multiply+0x116>
 80067f2:	f8b2 b000 	ldrh.w	fp, [r2]
 80067f6:	f1bb 0f00 	cmp.w	fp, #0
 80067fa:	d023      	beq.n	8006844 <__multiply+0xb8>
 80067fc:	4689      	mov	r9, r1
 80067fe:	46ae      	mov	lr, r5
 8006800:	f04f 0800 	mov.w	r8, #0
 8006804:	f859 4b04 	ldr.w	r4, [r9], #4
 8006808:	f8be a000 	ldrh.w	sl, [lr]
 800680c:	b2a3      	uxth	r3, r4
 800680e:	fb0b a303 	mla	r3, fp, r3, sl
 8006812:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006816:	f8de 4000 	ldr.w	r4, [lr]
 800681a:	4443      	add	r3, r8
 800681c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006820:	fb0b 840a 	mla	r4, fp, sl, r8
 8006824:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006828:	46f2      	mov	sl, lr
 800682a:	b29b      	uxth	r3, r3
 800682c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006830:	454f      	cmp	r7, r9
 8006832:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006836:	f84a 3b04 	str.w	r3, [sl], #4
 800683a:	d901      	bls.n	8006840 <__multiply+0xb4>
 800683c:	46d6      	mov	lr, sl
 800683e:	e7e1      	b.n	8006804 <__multiply+0x78>
 8006840:	f8ce 8004 	str.w	r8, [lr, #4]
 8006844:	9b01      	ldr	r3, [sp, #4]
 8006846:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800684a:	3204      	adds	r2, #4
 800684c:	f1ba 0f00 	cmp.w	sl, #0
 8006850:	d021      	beq.n	8006896 <__multiply+0x10a>
 8006852:	682b      	ldr	r3, [r5, #0]
 8006854:	462c      	mov	r4, r5
 8006856:	4689      	mov	r9, r1
 8006858:	f04f 0800 	mov.w	r8, #0
 800685c:	f8b9 e000 	ldrh.w	lr, [r9]
 8006860:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 8006864:	fb0a be0e 	mla	lr, sl, lr, fp
 8006868:	44f0      	add	r8, lr
 800686a:	46a3      	mov	fp, r4
 800686c:	b29b      	uxth	r3, r3
 800686e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8006872:	f84b 3b04 	str.w	r3, [fp], #4
 8006876:	f859 3b04 	ldr.w	r3, [r9], #4
 800687a:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 800687e:	0c1b      	lsrs	r3, r3, #16
 8006880:	fb0a e303 	mla	r3, sl, r3, lr
 8006884:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8006888:	454f      	cmp	r7, r9
 800688a:	ea4f 4813 	mov.w	r8, r3, lsr #16
 800688e:	d901      	bls.n	8006894 <__multiply+0x108>
 8006890:	465c      	mov	r4, fp
 8006892:	e7e3      	b.n	800685c <__multiply+0xd0>
 8006894:	6063      	str	r3, [r4, #4]
 8006896:	3504      	adds	r5, #4
 8006898:	e7a7      	b.n	80067ea <__multiply+0x5e>
 800689a:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 800689e:	b913      	cbnz	r3, 80068a6 <__multiply+0x11a>
 80068a0:	3e01      	subs	r6, #1
 80068a2:	2e00      	cmp	r6, #0
 80068a4:	dcf9      	bgt.n	800689a <__multiply+0x10e>
 80068a6:	6106      	str	r6, [r0, #16]
 80068a8:	b003      	add	sp, #12
 80068aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080068b0 <__pow5mult>:
 80068b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068b4:	4615      	mov	r5, r2
 80068b6:	f012 0203 	ands.w	r2, r2, #3
 80068ba:	4606      	mov	r6, r0
 80068bc:	460f      	mov	r7, r1
 80068be:	d007      	beq.n	80068d0 <__pow5mult+0x20>
 80068c0:	3a01      	subs	r2, #1
 80068c2:	4c21      	ldr	r4, [pc, #132]	; (8006948 <__pow5mult+0x98>)
 80068c4:	2300      	movs	r3, #0
 80068c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80068ca:	f7ff fece 	bl	800666a <__multadd>
 80068ce:	4607      	mov	r7, r0
 80068d0:	10ad      	asrs	r5, r5, #2
 80068d2:	d036      	beq.n	8006942 <__pow5mult+0x92>
 80068d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80068d6:	b93c      	cbnz	r4, 80068e8 <__pow5mult+0x38>
 80068d8:	2010      	movs	r0, #16
 80068da:	f7ff fc45 	bl	8006168 <malloc>
 80068de:	6270      	str	r0, [r6, #36]	; 0x24
 80068e0:	6044      	str	r4, [r0, #4]
 80068e2:	6084      	str	r4, [r0, #8]
 80068e4:	6004      	str	r4, [r0, #0]
 80068e6:	60c4      	str	r4, [r0, #12]
 80068e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80068ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80068f0:	b94c      	cbnz	r4, 8006906 <__pow5mult+0x56>
 80068f2:	f240 2171 	movw	r1, #625	; 0x271
 80068f6:	4630      	mov	r0, r6
 80068f8:	f7ff ff3f 	bl	800677a <__i2b>
 80068fc:	2300      	movs	r3, #0
 80068fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8006902:	4604      	mov	r4, r0
 8006904:	6003      	str	r3, [r0, #0]
 8006906:	f04f 0800 	mov.w	r8, #0
 800690a:	07eb      	lsls	r3, r5, #31
 800690c:	d50a      	bpl.n	8006924 <__pow5mult+0x74>
 800690e:	4639      	mov	r1, r7
 8006910:	4622      	mov	r2, r4
 8006912:	4630      	mov	r0, r6
 8006914:	f7ff ff3a 	bl	800678c <__multiply>
 8006918:	4639      	mov	r1, r7
 800691a:	4681      	mov	r9, r0
 800691c:	4630      	mov	r0, r6
 800691e:	f7ff fe8d 	bl	800663c <_Bfree>
 8006922:	464f      	mov	r7, r9
 8006924:	106d      	asrs	r5, r5, #1
 8006926:	d00c      	beq.n	8006942 <__pow5mult+0x92>
 8006928:	6820      	ldr	r0, [r4, #0]
 800692a:	b108      	cbz	r0, 8006930 <__pow5mult+0x80>
 800692c:	4604      	mov	r4, r0
 800692e:	e7ec      	b.n	800690a <__pow5mult+0x5a>
 8006930:	4622      	mov	r2, r4
 8006932:	4621      	mov	r1, r4
 8006934:	4630      	mov	r0, r6
 8006936:	f7ff ff29 	bl	800678c <__multiply>
 800693a:	6020      	str	r0, [r4, #0]
 800693c:	f8c0 8000 	str.w	r8, [r0]
 8006940:	e7f4      	b.n	800692c <__pow5mult+0x7c>
 8006942:	4638      	mov	r0, r7
 8006944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006948:	08007780 	.word	0x08007780

0800694c <__lshift>:
 800694c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006950:	460c      	mov	r4, r1
 8006952:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006956:	6926      	ldr	r6, [r4, #16]
 8006958:	6849      	ldr	r1, [r1, #4]
 800695a:	68a3      	ldr	r3, [r4, #8]
 800695c:	4456      	add	r6, sl
 800695e:	4607      	mov	r7, r0
 8006960:	4691      	mov	r9, r2
 8006962:	1c75      	adds	r5, r6, #1
 8006964:	42ab      	cmp	r3, r5
 8006966:	da02      	bge.n	800696e <__lshift+0x22>
 8006968:	3101      	adds	r1, #1
 800696a:	005b      	lsls	r3, r3, #1
 800696c:	e7fa      	b.n	8006964 <__lshift+0x18>
 800696e:	4638      	mov	r0, r7
 8006970:	f7ff fe2f 	bl	80065d2 <_Balloc>
 8006974:	2300      	movs	r3, #0
 8006976:	4680      	mov	r8, r0
 8006978:	f100 0114 	add.w	r1, r0, #20
 800697c:	461a      	mov	r2, r3
 800697e:	4553      	cmp	r3, sl
 8006980:	da03      	bge.n	800698a <__lshift+0x3e>
 8006982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006986:	3301      	adds	r3, #1
 8006988:	e7f9      	b.n	800697e <__lshift+0x32>
 800698a:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800698e:	6920      	ldr	r0, [r4, #16]
 8006990:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8006994:	f019 091f 	ands.w	r9, r9, #31
 8006998:	f104 0114 	add.w	r1, r4, #20
 800699c:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80069a0:	d014      	beq.n	80069cc <__lshift+0x80>
 80069a2:	f1c9 0c20 	rsb	ip, r9, #32
 80069a6:	2200      	movs	r2, #0
 80069a8:	6808      	ldr	r0, [r1, #0]
 80069aa:	fa00 f009 	lsl.w	r0, r0, r9
 80069ae:	4302      	orrs	r2, r0
 80069b0:	469a      	mov	sl, r3
 80069b2:	f843 2b04 	str.w	r2, [r3], #4
 80069b6:	f851 2b04 	ldr.w	r2, [r1], #4
 80069ba:	458e      	cmp	lr, r1
 80069bc:	fa22 f20c 	lsr.w	r2, r2, ip
 80069c0:	d8f2      	bhi.n	80069a8 <__lshift+0x5c>
 80069c2:	f8ca 2004 	str.w	r2, [sl, #4]
 80069c6:	b142      	cbz	r2, 80069da <__lshift+0x8e>
 80069c8:	1cb5      	adds	r5, r6, #2
 80069ca:	e006      	b.n	80069da <__lshift+0x8e>
 80069cc:	3b04      	subs	r3, #4
 80069ce:	f851 2b04 	ldr.w	r2, [r1], #4
 80069d2:	f843 2f04 	str.w	r2, [r3, #4]!
 80069d6:	458e      	cmp	lr, r1
 80069d8:	d8f9      	bhi.n	80069ce <__lshift+0x82>
 80069da:	3d01      	subs	r5, #1
 80069dc:	4638      	mov	r0, r7
 80069de:	f8c8 5010 	str.w	r5, [r8, #16]
 80069e2:	4621      	mov	r1, r4
 80069e4:	f7ff fe2a 	bl	800663c <_Bfree>
 80069e8:	4640      	mov	r0, r8
 80069ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080069ee <__mcmp>:
 80069ee:	6903      	ldr	r3, [r0, #16]
 80069f0:	690a      	ldr	r2, [r1, #16]
 80069f2:	1a9b      	subs	r3, r3, r2
 80069f4:	b510      	push	{r4, lr}
 80069f6:	d111      	bne.n	8006a1c <__mcmp+0x2e>
 80069f8:	0092      	lsls	r2, r2, #2
 80069fa:	3014      	adds	r0, #20
 80069fc:	3114      	adds	r1, #20
 80069fe:	1883      	adds	r3, r0, r2
 8006a00:	440a      	add	r2, r1
 8006a02:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8006a06:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006a0a:	428c      	cmp	r4, r1
 8006a0c:	d002      	beq.n	8006a14 <__mcmp+0x26>
 8006a0e:	d307      	bcc.n	8006a20 <__mcmp+0x32>
 8006a10:	2001      	movs	r0, #1
 8006a12:	bd10      	pop	{r4, pc}
 8006a14:	4298      	cmp	r0, r3
 8006a16:	d3f4      	bcc.n	8006a02 <__mcmp+0x14>
 8006a18:	2000      	movs	r0, #0
 8006a1a:	bd10      	pop	{r4, pc}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	bd10      	pop	{r4, pc}
 8006a20:	f04f 30ff 	mov.w	r0, #4294967295
 8006a24:	bd10      	pop	{r4, pc}

08006a26 <__mdiff>:
 8006a26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a2a:	460c      	mov	r4, r1
 8006a2c:	4607      	mov	r7, r0
 8006a2e:	4611      	mov	r1, r2
 8006a30:	4620      	mov	r0, r4
 8006a32:	4615      	mov	r5, r2
 8006a34:	f7ff ffdb 	bl	80069ee <__mcmp>
 8006a38:	1e06      	subs	r6, r0, #0
 8006a3a:	d108      	bne.n	8006a4e <__mdiff+0x28>
 8006a3c:	4631      	mov	r1, r6
 8006a3e:	4638      	mov	r0, r7
 8006a40:	f7ff fdc7 	bl	80065d2 <_Balloc>
 8006a44:	2301      	movs	r3, #1
 8006a46:	6103      	str	r3, [r0, #16]
 8006a48:	6146      	str	r6, [r0, #20]
 8006a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a4e:	bfbc      	itt	lt
 8006a50:	4623      	movlt	r3, r4
 8006a52:	462c      	movlt	r4, r5
 8006a54:	4638      	mov	r0, r7
 8006a56:	6861      	ldr	r1, [r4, #4]
 8006a58:	bfba      	itte	lt
 8006a5a:	461d      	movlt	r5, r3
 8006a5c:	2601      	movlt	r6, #1
 8006a5e:	2600      	movge	r6, #0
 8006a60:	f7ff fdb7 	bl	80065d2 <_Balloc>
 8006a64:	692b      	ldr	r3, [r5, #16]
 8006a66:	60c6      	str	r6, [r0, #12]
 8006a68:	6926      	ldr	r6, [r4, #16]
 8006a6a:	f105 0914 	add.w	r9, r5, #20
 8006a6e:	3414      	adds	r4, #20
 8006a70:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 8006a74:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006a78:	f100 0514 	add.w	r5, r0, #20
 8006a7c:	f04f 0c00 	mov.w	ip, #0
 8006a80:	f854 3b04 	ldr.w	r3, [r4], #4
 8006a84:	f859 2b04 	ldr.w	r2, [r9], #4
 8006a88:	fa1c f183 	uxtah	r1, ip, r3
 8006a8c:	fa1f fe82 	uxth.w	lr, r2
 8006a90:	0c12      	lsrs	r2, r2, #16
 8006a92:	ebce 0101 	rsb	r1, lr, r1
 8006a96:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 8006a9a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006a9e:	b289      	uxth	r1, r1
 8006aa0:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006aa4:	45c8      	cmp	r8, r9
 8006aa6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006aaa:	46a6      	mov	lr, r4
 8006aac:	f845 3b04 	str.w	r3, [r5], #4
 8006ab0:	d8e6      	bhi.n	8006a80 <__mdiff+0x5a>
 8006ab2:	45be      	cmp	lr, r7
 8006ab4:	d20e      	bcs.n	8006ad4 <__mdiff+0xae>
 8006ab6:	f85e 1b04 	ldr.w	r1, [lr], #4
 8006aba:	fa1c f281 	uxtah	r2, ip, r1
 8006abe:	1413      	asrs	r3, r2, #16
 8006ac0:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8006ac4:	b292      	uxth	r2, r2
 8006ac6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006aca:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006ace:	f845 2b04 	str.w	r2, [r5], #4
 8006ad2:	e7ee      	b.n	8006ab2 <__mdiff+0x8c>
 8006ad4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006ad8:	b90b      	cbnz	r3, 8006ade <__mdiff+0xb8>
 8006ada:	3e01      	subs	r6, #1
 8006adc:	e7fa      	b.n	8006ad4 <__mdiff+0xae>
 8006ade:	6106      	str	r6, [r0, #16]
 8006ae0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006ae4 <__d2b>:
 8006ae4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ae8:	460e      	mov	r6, r1
 8006aea:	2101      	movs	r1, #1
 8006aec:	ec59 8b10 	vmov	r8, r9, d0
 8006af0:	4615      	mov	r5, r2
 8006af2:	f7ff fd6e 	bl	80065d2 <_Balloc>
 8006af6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006afa:	4607      	mov	r7, r0
 8006afc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b00:	b10c      	cbz	r4, 8006b06 <__d2b+0x22>
 8006b02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b06:	9301      	str	r3, [sp, #4]
 8006b08:	f1b8 0f00 	cmp.w	r8, #0
 8006b0c:	d019      	beq.n	8006b42 <__d2b+0x5e>
 8006b0e:	a802      	add	r0, sp, #8
 8006b10:	f840 8d08 	str.w	r8, [r0, #-8]!
 8006b14:	f7ff fe04 	bl	8006720 <__lo0bits>
 8006b18:	9b00      	ldr	r3, [sp, #0]
 8006b1a:	b148      	cbz	r0, 8006b30 <__d2b+0x4c>
 8006b1c:	9a01      	ldr	r2, [sp, #4]
 8006b1e:	f1c0 0120 	rsb	r1, r0, #32
 8006b22:	fa02 f101 	lsl.w	r1, r2, r1
 8006b26:	430b      	orrs	r3, r1
 8006b28:	40c2      	lsrs	r2, r0
 8006b2a:	617b      	str	r3, [r7, #20]
 8006b2c:	9201      	str	r2, [sp, #4]
 8006b2e:	e000      	b.n	8006b32 <__d2b+0x4e>
 8006b30:	617b      	str	r3, [r7, #20]
 8006b32:	9b01      	ldr	r3, [sp, #4]
 8006b34:	61bb      	str	r3, [r7, #24]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	bf14      	ite	ne
 8006b3a:	2102      	movne	r1, #2
 8006b3c:	2101      	moveq	r1, #1
 8006b3e:	6139      	str	r1, [r7, #16]
 8006b40:	e007      	b.n	8006b52 <__d2b+0x6e>
 8006b42:	a801      	add	r0, sp, #4
 8006b44:	f7ff fdec 	bl	8006720 <__lo0bits>
 8006b48:	9b01      	ldr	r3, [sp, #4]
 8006b4a:	617b      	str	r3, [r7, #20]
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	6139      	str	r1, [r7, #16]
 8006b50:	3020      	adds	r0, #32
 8006b52:	b134      	cbz	r4, 8006b62 <__d2b+0x7e>
 8006b54:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006b58:	4404      	add	r4, r0
 8006b5a:	6034      	str	r4, [r6, #0]
 8006b5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b60:	e009      	b.n	8006b76 <__d2b+0x92>
 8006b62:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006b66:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b6a:	6030      	str	r0, [r6, #0]
 8006b6c:	6918      	ldr	r0, [r3, #16]
 8006b6e:	f7ff fdb7 	bl	80066e0 <__hi0bits>
 8006b72:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006b76:	6028      	str	r0, [r5, #0]
 8006b78:	4638      	mov	r0, r7
 8006b7a:	b003      	add	sp, #12
 8006b7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006b80 <_sbrk_r>:
 8006b80:	b538      	push	{r3, r4, r5, lr}
 8006b82:	4c06      	ldr	r4, [pc, #24]	; (8006b9c <_sbrk_r+0x1c>)
 8006b84:	2300      	movs	r3, #0
 8006b86:	4605      	mov	r5, r0
 8006b88:	4608      	mov	r0, r1
 8006b8a:	6023      	str	r3, [r4, #0]
 8006b8c:	f000 fb8c 	bl	80072a8 <_sbrk>
 8006b90:	1c43      	adds	r3, r0, #1
 8006b92:	d102      	bne.n	8006b9a <_sbrk_r+0x1a>
 8006b94:	6823      	ldr	r3, [r4, #0]
 8006b96:	b103      	cbz	r3, 8006b9a <_sbrk_r+0x1a>
 8006b98:	602b      	str	r3, [r5, #0]
 8006b9a:	bd38      	pop	{r3, r4, r5, pc}
 8006b9c:	20003c3c 	.word	0x20003c3c

08006ba0 <__ssprint_r>:
 8006ba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba4:	4693      	mov	fp, r2
 8006ba6:	6892      	ldr	r2, [r2, #8]
 8006ba8:	4681      	mov	r9, r0
 8006baa:	460c      	mov	r4, r1
 8006bac:	b34a      	cbz	r2, 8006c02 <__ssprint_r+0x62>
 8006bae:	2300      	movs	r3, #0
 8006bb0:	f8db a000 	ldr.w	sl, [fp]
 8006bb4:	9301      	str	r3, [sp, #4]
 8006bb6:	461f      	mov	r7, r3
 8006bb8:	e006      	b.n	8006bc8 <__ssprint_r+0x28>
 8006bba:	f8da 3000 	ldr.w	r3, [sl]
 8006bbe:	f8da 7004 	ldr.w	r7, [sl, #4]
 8006bc2:	9301      	str	r3, [sp, #4]
 8006bc4:	f10a 0a08 	add.w	sl, sl, #8
 8006bc8:	2f00      	cmp	r7, #0
 8006bca:	d0f6      	beq.n	8006bba <__ssprint_r+0x1a>
 8006bcc:	68a6      	ldr	r6, [r4, #8]
 8006bce:	42b7      	cmp	r7, r6
 8006bd0:	d360      	bcc.n	8006c94 <__ssprint_r+0xf4>
 8006bd2:	89a0      	ldrh	r0, [r4, #12]
 8006bd4:	f410 6f90 	tst.w	r0, #1152	; 0x480
 8006bd8:	d117      	bne.n	8006c0a <__ssprint_r+0x6a>
 8006bda:	42b7      	cmp	r7, r6
 8006bdc:	d35a      	bcc.n	8006c94 <__ssprint_r+0xf4>
 8006bde:	4632      	mov	r2, r6
 8006be0:	9901      	ldr	r1, [sp, #4]
 8006be2:	6820      	ldr	r0, [r4, #0]
 8006be4:	f000 f99c 	bl	8006f20 <memmove>
 8006be8:	68a2      	ldr	r2, [r4, #8]
 8006bea:	1b92      	subs	r2, r2, r6
 8006bec:	60a2      	str	r2, [r4, #8]
 8006bee:	6822      	ldr	r2, [r4, #0]
 8006bf0:	4416      	add	r6, r2
 8006bf2:	f8db 2008 	ldr.w	r2, [fp, #8]
 8006bf6:	6026      	str	r6, [r4, #0]
 8006bf8:	1bd7      	subs	r7, r2, r7
 8006bfa:	f8cb 7008 	str.w	r7, [fp, #8]
 8006bfe:	2f00      	cmp	r7, #0
 8006c00:	d1db      	bne.n	8006bba <__ssprint_r+0x1a>
 8006c02:	2000      	movs	r0, #0
 8006c04:	f8cb 0004 	str.w	r0, [fp, #4]
 8006c08:	e046      	b.n	8006c98 <__ssprint_r+0xf8>
 8006c0a:	6825      	ldr	r5, [r4, #0]
 8006c0c:	6921      	ldr	r1, [r4, #16]
 8006c0e:	ebc1 0805 	rsb	r8, r1, r5
 8006c12:	f108 0201 	add.w	r2, r8, #1
 8006c16:	6965      	ldr	r5, [r4, #20]
 8006c18:	443a      	add	r2, r7
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c20:	fb95 f5f3 	sdiv	r5, r5, r3
 8006c24:	4295      	cmp	r5, r2
 8006c26:	bf38      	it	cc
 8006c28:	4615      	movcc	r5, r2
 8006c2a:	0543      	lsls	r3, r0, #21
 8006c2c:	d510      	bpl.n	8006c50 <__ssprint_r+0xb0>
 8006c2e:	4629      	mov	r1, r5
 8006c30:	4648      	mov	r0, r9
 8006c32:	f7ff faa1 	bl	8006178 <_malloc_r>
 8006c36:	4606      	mov	r6, r0
 8006c38:	b1a0      	cbz	r0, 8006c64 <__ssprint_r+0xc4>
 8006c3a:	4642      	mov	r2, r8
 8006c3c:	6921      	ldr	r1, [r4, #16]
 8006c3e:	f7ff fcbb 	bl	80065b8 <memcpy>
 8006c42:	89a2      	ldrh	r2, [r4, #12]
 8006c44:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8006c48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c4c:	81a2      	strh	r2, [r4, #12]
 8006c4e:	e018      	b.n	8006c82 <__ssprint_r+0xe2>
 8006c50:	462a      	mov	r2, r5
 8006c52:	4648      	mov	r0, r9
 8006c54:	f000 f980 	bl	8006f58 <_realloc_r>
 8006c58:	4606      	mov	r6, r0
 8006c5a:	b990      	cbnz	r0, 8006c82 <__ssprint_r+0xe2>
 8006c5c:	6921      	ldr	r1, [r4, #16]
 8006c5e:	4648      	mov	r0, r9
 8006c60:	f000 f8a0 	bl	8006da4 <_free_r>
 8006c64:	220c      	movs	r2, #12
 8006c66:	f8c9 2000 	str.w	r2, [r9]
 8006c6a:	89a2      	ldrh	r2, [r4, #12]
 8006c6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c70:	81a2      	strh	r2, [r4, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f8cb 2008 	str.w	r2, [fp, #8]
 8006c78:	f8cb 2004 	str.w	r2, [fp, #4]
 8006c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c80:	e00a      	b.n	8006c98 <__ssprint_r+0xf8>
 8006c82:	6126      	str	r6, [r4, #16]
 8006c84:	6165      	str	r5, [r4, #20]
 8006c86:	4446      	add	r6, r8
 8006c88:	ebc8 0505 	rsb	r5, r8, r5
 8006c8c:	6026      	str	r6, [r4, #0]
 8006c8e:	60a5      	str	r5, [r4, #8]
 8006c90:	463e      	mov	r6, r7
 8006c92:	e7a2      	b.n	8006bda <__ssprint_r+0x3a>
 8006c94:	463e      	mov	r6, r7
 8006c96:	e7a2      	b.n	8006bde <__ssprint_r+0x3e>
 8006c98:	b003      	add	sp, #12
 8006c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006c9e <_calloc_r>:
 8006c9e:	b510      	push	{r4, lr}
 8006ca0:	4351      	muls	r1, r2
 8006ca2:	f7ff fa69 	bl	8006178 <_malloc_r>
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	b320      	cbz	r0, 8006cf4 <_calloc_r+0x56>
 8006caa:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006cae:	f022 0203 	bic.w	r2, r2, #3
 8006cb2:	3a04      	subs	r2, #4
 8006cb4:	2a24      	cmp	r2, #36	; 0x24
 8006cb6:	d81a      	bhi.n	8006cee <_calloc_r+0x50>
 8006cb8:	2a13      	cmp	r2, #19
 8006cba:	d912      	bls.n	8006ce2 <_calloc_r+0x44>
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	2a1b      	cmp	r2, #27
 8006cc0:	6001      	str	r1, [r0, #0]
 8006cc2:	6041      	str	r1, [r0, #4]
 8006cc4:	d802      	bhi.n	8006ccc <_calloc_r+0x2e>
 8006cc6:	f100 0308 	add.w	r3, r0, #8
 8006cca:	e00b      	b.n	8006ce4 <_calloc_r+0x46>
 8006ccc:	2a24      	cmp	r2, #36	; 0x24
 8006cce:	6081      	str	r1, [r0, #8]
 8006cd0:	60c1      	str	r1, [r0, #12]
 8006cd2:	bf11      	iteee	ne
 8006cd4:	f100 0310 	addne.w	r3, r0, #16
 8006cd8:	6101      	streq	r1, [r0, #16]
 8006cda:	f100 0318 	addeq.w	r3, r0, #24
 8006cde:	6141      	streq	r1, [r0, #20]
 8006ce0:	e000      	b.n	8006ce4 <_calloc_r+0x46>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	601a      	str	r2, [r3, #0]
 8006ce8:	605a      	str	r2, [r3, #4]
 8006cea:	609a      	str	r2, [r3, #8]
 8006cec:	e002      	b.n	8006cf4 <_calloc_r+0x56>
 8006cee:	2100      	movs	r1, #0
 8006cf0:	f7fd fc18 	bl	8004524 <memset>
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	bd10      	pop	{r4, pc}

08006cf8 <_malloc_trim_r>:
 8006cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cfc:	4f25      	ldr	r7, [pc, #148]	; (8006d94 <_malloc_trim_r+0x9c>)
 8006cfe:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8006da0 <_malloc_trim_r+0xa8>
 8006d02:	4689      	mov	r9, r1
 8006d04:	4606      	mov	r6, r0
 8006d06:	f7ff fc62 	bl	80065ce <__malloc_lock>
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	685d      	ldr	r5, [r3, #4]
 8006d0e:	f1a8 0411 	sub.w	r4, r8, #17
 8006d12:	f025 0503 	bic.w	r5, r5, #3
 8006d16:	442c      	add	r4, r5
 8006d18:	ebc9 0404 	rsb	r4, r9, r4
 8006d1c:	fbb4 f4f8 	udiv	r4, r4, r8
 8006d20:	3c01      	subs	r4, #1
 8006d22:	fb08 f404 	mul.w	r4, r8, r4
 8006d26:	4544      	cmp	r4, r8
 8006d28:	da05      	bge.n	8006d36 <_malloc_trim_r+0x3e>
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	f7ff fc50 	bl	80065d0 <__malloc_unlock>
 8006d30:	2000      	movs	r0, #0
 8006d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d36:	2100      	movs	r1, #0
 8006d38:	4630      	mov	r0, r6
 8006d3a:	f7ff ff21 	bl	8006b80 <_sbrk_r>
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	442b      	add	r3, r5
 8006d42:	4298      	cmp	r0, r3
 8006d44:	d1f1      	bne.n	8006d2a <_malloc_trim_r+0x32>
 8006d46:	4261      	negs	r1, r4
 8006d48:	4630      	mov	r0, r6
 8006d4a:	f7ff ff19 	bl	8006b80 <_sbrk_r>
 8006d4e:	3001      	adds	r0, #1
 8006d50:	d110      	bne.n	8006d74 <_malloc_trim_r+0x7c>
 8006d52:	2100      	movs	r1, #0
 8006d54:	4630      	mov	r0, r6
 8006d56:	f7ff ff13 	bl	8006b80 <_sbrk_r>
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	1a83      	subs	r3, r0, r2
 8006d5e:	2b0f      	cmp	r3, #15
 8006d60:	dde3      	ble.n	8006d2a <_malloc_trim_r+0x32>
 8006d62:	490d      	ldr	r1, [pc, #52]	; (8006d98 <_malloc_trim_r+0xa0>)
 8006d64:	6809      	ldr	r1, [r1, #0]
 8006d66:	1a40      	subs	r0, r0, r1
 8006d68:	490c      	ldr	r1, [pc, #48]	; (8006d9c <_malloc_trim_r+0xa4>)
 8006d6a:	f043 0301 	orr.w	r3, r3, #1
 8006d6e:	6008      	str	r0, [r1, #0]
 8006d70:	6053      	str	r3, [r2, #4]
 8006d72:	e7da      	b.n	8006d2a <_malloc_trim_r+0x32>
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	4a09      	ldr	r2, [pc, #36]	; (8006d9c <_malloc_trim_r+0xa4>)
 8006d78:	1b2d      	subs	r5, r5, r4
 8006d7a:	f045 0501 	orr.w	r5, r5, #1
 8006d7e:	605d      	str	r5, [r3, #4]
 8006d80:	6813      	ldr	r3, [r2, #0]
 8006d82:	4630      	mov	r0, r6
 8006d84:	1b1c      	subs	r4, r3, r4
 8006d86:	6014      	str	r4, [r2, #0]
 8006d88:	f7ff fc22 	bl	80065d0 <__malloc_unlock>
 8006d8c:	2001      	movs	r0, #1
 8006d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d92:	bf00      	nop
 8006d94:	20000130 	.word	0x20000130
 8006d98:	2000053c 	.word	0x2000053c
 8006d9c:	20001ac0 	.word	0x20001ac0
 8006da0:	00001000 	.word	0x00001000

08006da4 <_free_r>:
 8006da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006da8:	4604      	mov	r4, r0
 8006daa:	4688      	mov	r8, r1
 8006dac:	2900      	cmp	r1, #0
 8006dae:	f000 80ad 	beq.w	8006f0c <_free_r+0x168>
 8006db2:	f7ff fc0c 	bl	80065ce <__malloc_lock>
 8006db6:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8006dba:	4d55      	ldr	r5, [pc, #340]	; (8006f10 <_free_r+0x16c>)
 8006dbc:	f022 0001 	bic.w	r0, r2, #1
 8006dc0:	f1a8 0308 	sub.w	r3, r8, #8
 8006dc4:	181f      	adds	r7, r3, r0
 8006dc6:	68a9      	ldr	r1, [r5, #8]
 8006dc8:	687e      	ldr	r6, [r7, #4]
 8006dca:	428f      	cmp	r7, r1
 8006dcc:	f026 0603 	bic.w	r6, r6, #3
 8006dd0:	f002 0201 	and.w	r2, r2, #1
 8006dd4:	d11b      	bne.n	8006e0e <_free_r+0x6a>
 8006dd6:	4430      	add	r0, r6
 8006dd8:	b93a      	cbnz	r2, 8006dea <_free_r+0x46>
 8006dda:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8006dde:	1a9b      	subs	r3, r3, r2
 8006de0:	4410      	add	r0, r2
 8006de2:	6899      	ldr	r1, [r3, #8]
 8006de4:	68da      	ldr	r2, [r3, #12]
 8006de6:	60ca      	str	r2, [r1, #12]
 8006de8:	6091      	str	r1, [r2, #8]
 8006dea:	f040 0201 	orr.w	r2, r0, #1
 8006dee:	605a      	str	r2, [r3, #4]
 8006df0:	60ab      	str	r3, [r5, #8]
 8006df2:	4b48      	ldr	r3, [pc, #288]	; (8006f14 <_free_r+0x170>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4298      	cmp	r0, r3
 8006df8:	d304      	bcc.n	8006e04 <_free_r+0x60>
 8006dfa:	4b47      	ldr	r3, [pc, #284]	; (8006f18 <_free_r+0x174>)
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	6819      	ldr	r1, [r3, #0]
 8006e00:	f7ff ff7a 	bl	8006cf8 <_malloc_trim_r>
 8006e04:	4620      	mov	r0, r4
 8006e06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e0a:	f7ff bbe1 	b.w	80065d0 <__malloc_unlock>
 8006e0e:	607e      	str	r6, [r7, #4]
 8006e10:	b97a      	cbnz	r2, 8006e32 <_free_r+0x8e>
 8006e12:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8006e16:	1a5b      	subs	r3, r3, r1
 8006e18:	4408      	add	r0, r1
 8006e1a:	6899      	ldr	r1, [r3, #8]
 8006e1c:	f105 0e08 	add.w	lr, r5, #8
 8006e20:	4571      	cmp	r1, lr
 8006e22:	d008      	beq.n	8006e36 <_free_r+0x92>
 8006e24:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8006e28:	f8c1 e00c 	str.w	lr, [r1, #12]
 8006e2c:	f8ce 1008 	str.w	r1, [lr, #8]
 8006e30:	e002      	b.n	8006e38 <_free_r+0x94>
 8006e32:	2200      	movs	r2, #0
 8006e34:	e000      	b.n	8006e38 <_free_r+0x94>
 8006e36:	2201      	movs	r2, #1
 8006e38:	19b9      	adds	r1, r7, r6
 8006e3a:	6849      	ldr	r1, [r1, #4]
 8006e3c:	07c9      	lsls	r1, r1, #31
 8006e3e:	d40e      	bmi.n	8006e5e <_free_r+0xba>
 8006e40:	4430      	add	r0, r6
 8006e42:	68b9      	ldr	r1, [r7, #8]
 8006e44:	b942      	cbnz	r2, 8006e58 <_free_r+0xb4>
 8006e46:	4e35      	ldr	r6, [pc, #212]	; (8006f1c <_free_r+0x178>)
 8006e48:	42b1      	cmp	r1, r6
 8006e4a:	d105      	bne.n	8006e58 <_free_r+0xb4>
 8006e4c:	616b      	str	r3, [r5, #20]
 8006e4e:	612b      	str	r3, [r5, #16]
 8006e50:	2201      	movs	r2, #1
 8006e52:	60d9      	str	r1, [r3, #12]
 8006e54:	6099      	str	r1, [r3, #8]
 8006e56:	e002      	b.n	8006e5e <_free_r+0xba>
 8006e58:	68fe      	ldr	r6, [r7, #12]
 8006e5a:	60ce      	str	r6, [r1, #12]
 8006e5c:	60b1      	str	r1, [r6, #8]
 8006e5e:	f040 0101 	orr.w	r1, r0, #1
 8006e62:	6059      	str	r1, [r3, #4]
 8006e64:	5018      	str	r0, [r3, r0]
 8006e66:	2a00      	cmp	r2, #0
 8006e68:	d1cc      	bne.n	8006e04 <_free_r+0x60>
 8006e6a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006e6e:	d212      	bcs.n	8006e96 <_free_r+0xf2>
 8006e70:	08c0      	lsrs	r0, r0, #3
 8006e72:	1081      	asrs	r1, r0, #2
 8006e74:	2201      	movs	r2, #1
 8006e76:	fa02 f101 	lsl.w	r1, r2, r1
 8006e7a:	686a      	ldr	r2, [r5, #4]
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	606a      	str	r2, [r5, #4]
 8006e82:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8006e86:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8006e8a:	6099      	str	r1, [r3, #8]
 8006e8c:	3a08      	subs	r2, #8
 8006e8e:	60da      	str	r2, [r3, #12]
 8006e90:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8006e94:	e038      	b.n	8006f08 <_free_r+0x164>
 8006e96:	0a42      	lsrs	r2, r0, #9
 8006e98:	2a04      	cmp	r2, #4
 8006e9a:	d802      	bhi.n	8006ea2 <_free_r+0xfe>
 8006e9c:	0982      	lsrs	r2, r0, #6
 8006e9e:	3238      	adds	r2, #56	; 0x38
 8006ea0:	e015      	b.n	8006ece <_free_r+0x12a>
 8006ea2:	2a14      	cmp	r2, #20
 8006ea4:	d801      	bhi.n	8006eaa <_free_r+0x106>
 8006ea6:	325b      	adds	r2, #91	; 0x5b
 8006ea8:	e011      	b.n	8006ece <_free_r+0x12a>
 8006eaa:	2a54      	cmp	r2, #84	; 0x54
 8006eac:	d802      	bhi.n	8006eb4 <_free_r+0x110>
 8006eae:	0b02      	lsrs	r2, r0, #12
 8006eb0:	326e      	adds	r2, #110	; 0x6e
 8006eb2:	e00c      	b.n	8006ece <_free_r+0x12a>
 8006eb4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006eb8:	d802      	bhi.n	8006ec0 <_free_r+0x11c>
 8006eba:	0bc2      	lsrs	r2, r0, #15
 8006ebc:	3277      	adds	r2, #119	; 0x77
 8006ebe:	e006      	b.n	8006ece <_free_r+0x12a>
 8006ec0:	f240 5154 	movw	r1, #1364	; 0x554
 8006ec4:	428a      	cmp	r2, r1
 8006ec6:	bf9a      	itte	ls
 8006ec8:	0c82      	lsrls	r2, r0, #18
 8006eca:	327c      	addls	r2, #124	; 0x7c
 8006ecc:	227e      	movhi	r2, #126	; 0x7e
 8006ece:	1c51      	adds	r1, r2, #1
 8006ed0:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8006ed4:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8006ed8:	4f0d      	ldr	r7, [pc, #52]	; (8006f10 <_free_r+0x16c>)
 8006eda:	428e      	cmp	r6, r1
 8006edc:	d10b      	bne.n	8006ef6 <_free_r+0x152>
 8006ede:	2101      	movs	r1, #1
 8006ee0:	1092      	asrs	r2, r2, #2
 8006ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8006ee6:	6879      	ldr	r1, [r7, #4]
 8006ee8:	4311      	orrs	r1, r2
 8006eea:	6079      	str	r1, [r7, #4]
 8006eec:	4631      	mov	r1, r6
 8006eee:	e008      	b.n	8006f02 <_free_r+0x15e>
 8006ef0:	6889      	ldr	r1, [r1, #8]
 8006ef2:	428e      	cmp	r6, r1
 8006ef4:	d004      	beq.n	8006f00 <_free_r+0x15c>
 8006ef6:	684a      	ldr	r2, [r1, #4]
 8006ef8:	f022 0203 	bic.w	r2, r2, #3
 8006efc:	4290      	cmp	r0, r2
 8006efe:	d3f7      	bcc.n	8006ef0 <_free_r+0x14c>
 8006f00:	68ce      	ldr	r6, [r1, #12]
 8006f02:	60de      	str	r6, [r3, #12]
 8006f04:	6099      	str	r1, [r3, #8]
 8006f06:	60b3      	str	r3, [r6, #8]
 8006f08:	60cb      	str	r3, [r1, #12]
 8006f0a:	e77b      	b.n	8006e04 <_free_r+0x60>
 8006f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f10:	20000130 	.word	0x20000130
 8006f14:	20000538 	.word	0x20000538
 8006f18:	20001abc 	.word	0x20001abc
 8006f1c:	20000138 	.word	0x20000138

08006f20 <memmove>:
 8006f20:	4288      	cmp	r0, r1
 8006f22:	b510      	push	{r4, lr}
 8006f24:	eb01 0302 	add.w	r3, r1, r2
 8006f28:	d801      	bhi.n	8006f2e <memmove+0xe>
 8006f2a:	1e42      	subs	r2, r0, #1
 8006f2c:	e00b      	b.n	8006f46 <memmove+0x26>
 8006f2e:	4298      	cmp	r0, r3
 8006f30:	d2fb      	bcs.n	8006f2a <memmove+0xa>
 8006f32:	1881      	adds	r1, r0, r2
 8006f34:	1ad2      	subs	r2, r2, r3
 8006f36:	42d3      	cmn	r3, r2
 8006f38:	d004      	beq.n	8006f44 <memmove+0x24>
 8006f3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f3e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006f42:	e7f8      	b.n	8006f36 <memmove+0x16>
 8006f44:	bd10      	pop	{r4, pc}
 8006f46:	4299      	cmp	r1, r3
 8006f48:	d004      	beq.n	8006f54 <memmove+0x34>
 8006f4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f4e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006f52:	e7f8      	b.n	8006f46 <memmove+0x26>
 8006f54:	bd10      	pop	{r4, pc}
	...

08006f58 <_realloc_r>:
 8006f58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f5c:	4681      	mov	r9, r0
 8006f5e:	460c      	mov	r4, r1
 8006f60:	b929      	cbnz	r1, 8006f6e <_realloc_r+0x16>
 8006f62:	4611      	mov	r1, r2
 8006f64:	b003      	add	sp, #12
 8006f66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f6a:	f7ff b905 	b.w	8006178 <_malloc_r>
 8006f6e:	9201      	str	r2, [sp, #4]
 8006f70:	f7ff fb2d 	bl	80065ce <__malloc_lock>
 8006f74:	9a01      	ldr	r2, [sp, #4]
 8006f76:	f854 ec04 	ldr.w	lr, [r4, #-4]
 8006f7a:	f102 080b 	add.w	r8, r2, #11
 8006f7e:	f1b8 0f16 	cmp.w	r8, #22
 8006f82:	f1a4 0b08 	sub.w	fp, r4, #8
 8006f86:	f02e 0503 	bic.w	r5, lr, #3
 8006f8a:	d903      	bls.n	8006f94 <_realloc_r+0x3c>
 8006f8c:	f038 0807 	bics.w	r8, r8, #7
 8006f90:	d502      	bpl.n	8006f98 <_realloc_r+0x40>
 8006f92:	e003      	b.n	8006f9c <_realloc_r+0x44>
 8006f94:	f04f 0810 	mov.w	r8, #16
 8006f98:	4590      	cmp	r8, r2
 8006f9a:	d204      	bcs.n	8006fa6 <_realloc_r+0x4e>
 8006f9c:	230c      	movs	r3, #12
 8006f9e:	f8c9 3000 	str.w	r3, [r9]
 8006fa2:	2000      	movs	r0, #0
 8006fa4:	e17d      	b.n	80072a2 <_realloc_r+0x34a>
 8006fa6:	45a8      	cmp	r8, r5
 8006fa8:	f340 8150 	ble.w	800724c <_realloc_r+0x2f4>
 8006fac:	4ba6      	ldr	r3, [pc, #664]	; (8007248 <_realloc_r+0x2f0>)
 8006fae:	6898      	ldr	r0, [r3, #8]
 8006fb0:	eb0b 0105 	add.w	r1, fp, r5
 8006fb4:	4281      	cmp	r1, r0
 8006fb6:	684f      	ldr	r7, [r1, #4]
 8006fb8:	d005      	beq.n	8006fc6 <_realloc_r+0x6e>
 8006fba:	f027 0601 	bic.w	r6, r7, #1
 8006fbe:	440e      	add	r6, r1
 8006fc0:	6876      	ldr	r6, [r6, #4]
 8006fc2:	07f6      	lsls	r6, r6, #31
 8006fc4:	d426      	bmi.n	8007014 <_realloc_r+0xbc>
 8006fc6:	f027 0a03 	bic.w	sl, r7, #3
 8006fca:	4281      	cmp	r1, r0
 8006fcc:	eb05 070a 	add.w	r7, r5, sl
 8006fd0:	d118      	bne.n	8007004 <_realloc_r+0xac>
 8006fd2:	f108 0610 	add.w	r6, r8, #16
 8006fd6:	42b7      	cmp	r7, r6
 8006fd8:	db1f      	blt.n	800701a <_realloc_r+0xc2>
 8006fda:	eb0b 0008 	add.w	r0, fp, r8
 8006fde:	ebc8 0707 	rsb	r7, r8, r7
 8006fe2:	f047 0701 	orr.w	r7, r7, #1
 8006fe6:	6098      	str	r0, [r3, #8]
 8006fe8:	6047      	str	r7, [r0, #4]
 8006fea:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	ea43 0308 	orr.w	r3, r3, r8
 8006ff6:	4648      	mov	r0, r9
 8006ff8:	f844 3c04 	str.w	r3, [r4, #-4]
 8006ffc:	f7ff fae8 	bl	80065d0 <__malloc_unlock>
 8007000:	4620      	mov	r0, r4
 8007002:	e14e      	b.n	80072a2 <_realloc_r+0x34a>
 8007004:	45b8      	cmp	r8, r7
 8007006:	dc08      	bgt.n	800701a <_realloc_r+0xc2>
 8007008:	68cb      	ldr	r3, [r1, #12]
 800700a:	688a      	ldr	r2, [r1, #8]
 800700c:	463d      	mov	r5, r7
 800700e:	60d3      	str	r3, [r2, #12]
 8007010:	609a      	str	r2, [r3, #8]
 8007012:	e11b      	b.n	800724c <_realloc_r+0x2f4>
 8007014:	f04f 0a00 	mov.w	sl, #0
 8007018:	4651      	mov	r1, sl
 800701a:	f01e 0f01 	tst.w	lr, #1
 800701e:	f040 80c3 	bne.w	80071a8 <_realloc_r+0x250>
 8007022:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8007026:	ebc7 070b 	rsb	r7, r7, fp
 800702a:	687e      	ldr	r6, [r7, #4]
 800702c:	f026 0603 	bic.w	r6, r6, #3
 8007030:	442e      	add	r6, r5
 8007032:	2900      	cmp	r1, #0
 8007034:	f000 8083 	beq.w	800713e <_realloc_r+0x1e6>
 8007038:	4281      	cmp	r1, r0
 800703a:	44b2      	add	sl, r6
 800703c:	d147      	bne.n	80070ce <_realloc_r+0x176>
 800703e:	f108 0110 	add.w	r1, r8, #16
 8007042:	458a      	cmp	sl, r1
 8007044:	db7b      	blt.n	800713e <_realloc_r+0x1e6>
 8007046:	463e      	mov	r6, r7
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	f856 1f08 	ldr.w	r1, [r6, #8]!
 800704e:	60ca      	str	r2, [r1, #12]
 8007050:	6091      	str	r1, [r2, #8]
 8007052:	1f2a      	subs	r2, r5, #4
 8007054:	2a24      	cmp	r2, #36	; 0x24
 8007056:	d825      	bhi.n	80070a4 <_realloc_r+0x14c>
 8007058:	2a13      	cmp	r2, #19
 800705a:	d91b      	bls.n	8007094 <_realloc_r+0x13c>
 800705c:	6821      	ldr	r1, [r4, #0]
 800705e:	60b9      	str	r1, [r7, #8]
 8007060:	6861      	ldr	r1, [r4, #4]
 8007062:	60f9      	str	r1, [r7, #12]
 8007064:	2a1b      	cmp	r2, #27
 8007066:	d803      	bhi.n	8007070 <_realloc_r+0x118>
 8007068:	f107 0210 	add.w	r2, r7, #16
 800706c:	3408      	adds	r4, #8
 800706e:	e012      	b.n	8007096 <_realloc_r+0x13e>
 8007070:	68a1      	ldr	r1, [r4, #8]
 8007072:	6139      	str	r1, [r7, #16]
 8007074:	68e1      	ldr	r1, [r4, #12]
 8007076:	6179      	str	r1, [r7, #20]
 8007078:	2a24      	cmp	r2, #36	; 0x24
 800707a:	bf01      	itttt	eq
 800707c:	6922      	ldreq	r2, [r4, #16]
 800707e:	61ba      	streq	r2, [r7, #24]
 8007080:	6961      	ldreq	r1, [r4, #20]
 8007082:	61f9      	streq	r1, [r7, #28]
 8007084:	bf19      	ittee	ne
 8007086:	f107 0218 	addne.w	r2, r7, #24
 800708a:	3410      	addne	r4, #16
 800708c:	f107 0220 	addeq.w	r2, r7, #32
 8007090:	3418      	addeq	r4, #24
 8007092:	e000      	b.n	8007096 <_realloc_r+0x13e>
 8007094:	4632      	mov	r2, r6
 8007096:	6821      	ldr	r1, [r4, #0]
 8007098:	6011      	str	r1, [r2, #0]
 800709a:	6861      	ldr	r1, [r4, #4]
 800709c:	6051      	str	r1, [r2, #4]
 800709e:	68a1      	ldr	r1, [r4, #8]
 80070a0:	6091      	str	r1, [r2, #8]
 80070a2:	e005      	b.n	80070b0 <_realloc_r+0x158>
 80070a4:	4621      	mov	r1, r4
 80070a6:	4630      	mov	r0, r6
 80070a8:	9301      	str	r3, [sp, #4]
 80070aa:	f7ff ff39 	bl	8006f20 <memmove>
 80070ae:	9b01      	ldr	r3, [sp, #4]
 80070b0:	eb07 0208 	add.w	r2, r7, r8
 80070b4:	ebc8 0a0a 	rsb	sl, r8, sl
 80070b8:	609a      	str	r2, [r3, #8]
 80070ba:	f04a 0301 	orr.w	r3, sl, #1
 80070be:	6053      	str	r3, [r2, #4]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	ea43 0308 	orr.w	r3, r3, r8
 80070ca:	607b      	str	r3, [r7, #4]
 80070cc:	e0b6      	b.n	800723c <_realloc_r+0x2e4>
 80070ce:	45d0      	cmp	r8, sl
 80070d0:	dc35      	bgt.n	800713e <_realloc_r+0x1e6>
 80070d2:	68cb      	ldr	r3, [r1, #12]
 80070d4:	688a      	ldr	r2, [r1, #8]
 80070d6:	4638      	mov	r0, r7
 80070d8:	60d3      	str	r3, [r2, #12]
 80070da:	609a      	str	r2, [r3, #8]
 80070dc:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	60d3      	str	r3, [r2, #12]
 80070e4:	609a      	str	r2, [r3, #8]
 80070e6:	1f2a      	subs	r2, r5, #4
 80070e8:	2a24      	cmp	r2, #36	; 0x24
 80070ea:	d823      	bhi.n	8007134 <_realloc_r+0x1dc>
 80070ec:	2a13      	cmp	r2, #19
 80070ee:	d91a      	bls.n	8007126 <_realloc_r+0x1ce>
 80070f0:	6823      	ldr	r3, [r4, #0]
 80070f2:	60bb      	str	r3, [r7, #8]
 80070f4:	6863      	ldr	r3, [r4, #4]
 80070f6:	60fb      	str	r3, [r7, #12]
 80070f8:	2a1b      	cmp	r2, #27
 80070fa:	d803      	bhi.n	8007104 <_realloc_r+0x1ac>
 80070fc:	f107 0010 	add.w	r0, r7, #16
 8007100:	3408      	adds	r4, #8
 8007102:	e010      	b.n	8007126 <_realloc_r+0x1ce>
 8007104:	68a3      	ldr	r3, [r4, #8]
 8007106:	613b      	str	r3, [r7, #16]
 8007108:	68e3      	ldr	r3, [r4, #12]
 800710a:	617b      	str	r3, [r7, #20]
 800710c:	2a24      	cmp	r2, #36	; 0x24
 800710e:	bf01      	itttt	eq
 8007110:	6923      	ldreq	r3, [r4, #16]
 8007112:	61bb      	streq	r3, [r7, #24]
 8007114:	6963      	ldreq	r3, [r4, #20]
 8007116:	61fb      	streq	r3, [r7, #28]
 8007118:	bf19      	ittee	ne
 800711a:	f107 0018 	addne.w	r0, r7, #24
 800711e:	3410      	addne	r4, #16
 8007120:	f107 0020 	addeq.w	r0, r7, #32
 8007124:	3418      	addeq	r4, #24
 8007126:	6823      	ldr	r3, [r4, #0]
 8007128:	6003      	str	r3, [r0, #0]
 800712a:	6863      	ldr	r3, [r4, #4]
 800712c:	6043      	str	r3, [r0, #4]
 800712e:	68a3      	ldr	r3, [r4, #8]
 8007130:	6083      	str	r3, [r0, #8]
 8007132:	e002      	b.n	800713a <_realloc_r+0x1e2>
 8007134:	4621      	mov	r1, r4
 8007136:	f7ff fef3 	bl	8006f20 <memmove>
 800713a:	4655      	mov	r5, sl
 800713c:	e02e      	b.n	800719c <_realloc_r+0x244>
 800713e:	45b0      	cmp	r8, r6
 8007140:	dc32      	bgt.n	80071a8 <_realloc_r+0x250>
 8007142:	4638      	mov	r0, r7
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800714a:	60d3      	str	r3, [r2, #12]
 800714c:	609a      	str	r2, [r3, #8]
 800714e:	1f2a      	subs	r2, r5, #4
 8007150:	2a24      	cmp	r2, #36	; 0x24
 8007152:	d825      	bhi.n	80071a0 <_realloc_r+0x248>
 8007154:	2a13      	cmp	r2, #19
 8007156:	d91a      	bls.n	800718e <_realloc_r+0x236>
 8007158:	6823      	ldr	r3, [r4, #0]
 800715a:	60bb      	str	r3, [r7, #8]
 800715c:	6863      	ldr	r3, [r4, #4]
 800715e:	60fb      	str	r3, [r7, #12]
 8007160:	2a1b      	cmp	r2, #27
 8007162:	d803      	bhi.n	800716c <_realloc_r+0x214>
 8007164:	f107 0010 	add.w	r0, r7, #16
 8007168:	3408      	adds	r4, #8
 800716a:	e010      	b.n	800718e <_realloc_r+0x236>
 800716c:	68a3      	ldr	r3, [r4, #8]
 800716e:	613b      	str	r3, [r7, #16]
 8007170:	68e3      	ldr	r3, [r4, #12]
 8007172:	617b      	str	r3, [r7, #20]
 8007174:	2a24      	cmp	r2, #36	; 0x24
 8007176:	bf01      	itttt	eq
 8007178:	6923      	ldreq	r3, [r4, #16]
 800717a:	61bb      	streq	r3, [r7, #24]
 800717c:	6963      	ldreq	r3, [r4, #20]
 800717e:	61fb      	streq	r3, [r7, #28]
 8007180:	bf19      	ittee	ne
 8007182:	f107 0018 	addne.w	r0, r7, #24
 8007186:	3410      	addne	r4, #16
 8007188:	f107 0020 	addeq.w	r0, r7, #32
 800718c:	3418      	addeq	r4, #24
 800718e:	6823      	ldr	r3, [r4, #0]
 8007190:	6003      	str	r3, [r0, #0]
 8007192:	6863      	ldr	r3, [r4, #4]
 8007194:	6043      	str	r3, [r0, #4]
 8007196:	68a3      	ldr	r3, [r4, #8]
 8007198:	6083      	str	r3, [r0, #8]
 800719a:	4635      	mov	r5, r6
 800719c:	46bb      	mov	fp, r7
 800719e:	e055      	b.n	800724c <_realloc_r+0x2f4>
 80071a0:	4621      	mov	r1, r4
 80071a2:	f7ff febd 	bl	8006f20 <memmove>
 80071a6:	e7f8      	b.n	800719a <_realloc_r+0x242>
 80071a8:	4611      	mov	r1, r2
 80071aa:	4648      	mov	r0, r9
 80071ac:	f7fe ffe4 	bl	8006178 <_malloc_r>
 80071b0:	4606      	mov	r6, r0
 80071b2:	2800      	cmp	r0, #0
 80071b4:	d042      	beq.n	800723c <_realloc_r+0x2e4>
 80071b6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80071ba:	f023 0301 	bic.w	r3, r3, #1
 80071be:	f1a0 0208 	sub.w	r2, r0, #8
 80071c2:	445b      	add	r3, fp
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d105      	bne.n	80071d4 <_realloc_r+0x27c>
 80071c8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80071cc:	f023 0303 	bic.w	r3, r3, #3
 80071d0:	441d      	add	r5, r3
 80071d2:	e03b      	b.n	800724c <_realloc_r+0x2f4>
 80071d4:	1f2a      	subs	r2, r5, #4
 80071d6:	2a24      	cmp	r2, #36	; 0x24
 80071d8:	d829      	bhi.n	800722e <_realloc_r+0x2d6>
 80071da:	2a13      	cmp	r2, #19
 80071dc:	d91e      	bls.n	800721c <_realloc_r+0x2c4>
 80071de:	6823      	ldr	r3, [r4, #0]
 80071e0:	6003      	str	r3, [r0, #0]
 80071e2:	6863      	ldr	r3, [r4, #4]
 80071e4:	6043      	str	r3, [r0, #4]
 80071e6:	2a1b      	cmp	r2, #27
 80071e8:	d804      	bhi.n	80071f4 <_realloc_r+0x29c>
 80071ea:	f100 0308 	add.w	r3, r0, #8
 80071ee:	f104 0208 	add.w	r2, r4, #8
 80071f2:	e015      	b.n	8007220 <_realloc_r+0x2c8>
 80071f4:	68a3      	ldr	r3, [r4, #8]
 80071f6:	6083      	str	r3, [r0, #8]
 80071f8:	68e3      	ldr	r3, [r4, #12]
 80071fa:	60c3      	str	r3, [r0, #12]
 80071fc:	2a24      	cmp	r2, #36	; 0x24
 80071fe:	bf01      	itttt	eq
 8007200:	6923      	ldreq	r3, [r4, #16]
 8007202:	6103      	streq	r3, [r0, #16]
 8007204:	6961      	ldreq	r1, [r4, #20]
 8007206:	6141      	streq	r1, [r0, #20]
 8007208:	bf19      	ittee	ne
 800720a:	f100 0310 	addne.w	r3, r0, #16
 800720e:	f104 0210 	addne.w	r2, r4, #16
 8007212:	f100 0318 	addeq.w	r3, r0, #24
 8007216:	f104 0218 	addeq.w	r2, r4, #24
 800721a:	e001      	b.n	8007220 <_realloc_r+0x2c8>
 800721c:	4603      	mov	r3, r0
 800721e:	4622      	mov	r2, r4
 8007220:	6811      	ldr	r1, [r2, #0]
 8007222:	6019      	str	r1, [r3, #0]
 8007224:	6851      	ldr	r1, [r2, #4]
 8007226:	6059      	str	r1, [r3, #4]
 8007228:	6892      	ldr	r2, [r2, #8]
 800722a:	609a      	str	r2, [r3, #8]
 800722c:	e002      	b.n	8007234 <_realloc_r+0x2dc>
 800722e:	4621      	mov	r1, r4
 8007230:	f7ff fe76 	bl	8006f20 <memmove>
 8007234:	4621      	mov	r1, r4
 8007236:	4648      	mov	r0, r9
 8007238:	f7ff fdb4 	bl	8006da4 <_free_r>
 800723c:	4648      	mov	r0, r9
 800723e:	f7ff f9c7 	bl	80065d0 <__malloc_unlock>
 8007242:	4630      	mov	r0, r6
 8007244:	e02d      	b.n	80072a2 <_realloc_r+0x34a>
 8007246:	bf00      	nop
 8007248:	20000130 	.word	0x20000130
 800724c:	ebc8 0205 	rsb	r2, r8, r5
 8007250:	2a0f      	cmp	r2, #15
 8007252:	f8db 3004 	ldr.w	r3, [fp, #4]
 8007256:	d914      	bls.n	8007282 <_realloc_r+0x32a>
 8007258:	f003 0301 	and.w	r3, r3, #1
 800725c:	eb0b 0108 	add.w	r1, fp, r8
 8007260:	ea43 0308 	orr.w	r3, r3, r8
 8007264:	f8cb 3004 	str.w	r3, [fp, #4]
 8007268:	f042 0301 	orr.w	r3, r2, #1
 800726c:	440a      	add	r2, r1
 800726e:	604b      	str	r3, [r1, #4]
 8007270:	6853      	ldr	r3, [r2, #4]
 8007272:	f043 0301 	orr.w	r3, r3, #1
 8007276:	6053      	str	r3, [r2, #4]
 8007278:	3108      	adds	r1, #8
 800727a:	4648      	mov	r0, r9
 800727c:	f7ff fd92 	bl	8006da4 <_free_r>
 8007280:	e00a      	b.n	8007298 <_realloc_r+0x340>
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	432b      	orrs	r3, r5
 8007288:	eb0b 0205 	add.w	r2, fp, r5
 800728c:	f8cb 3004 	str.w	r3, [fp, #4]
 8007290:	6853      	ldr	r3, [r2, #4]
 8007292:	f043 0301 	orr.w	r3, r3, #1
 8007296:	6053      	str	r3, [r2, #4]
 8007298:	4648      	mov	r0, r9
 800729a:	f7ff f999 	bl	80065d0 <__malloc_unlock>
 800729e:	f10b 0008 	add.w	r0, fp, #8
 80072a2:	b003      	add	sp, #12
 80072a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080072a8 <_sbrk>:
 80072a8:	4b04      	ldr	r3, [pc, #16]	; (80072bc <_sbrk+0x14>)
 80072aa:	6819      	ldr	r1, [r3, #0]
 80072ac:	4602      	mov	r2, r0
 80072ae:	b909      	cbnz	r1, 80072b4 <_sbrk+0xc>
 80072b0:	4903      	ldr	r1, [pc, #12]	; (80072c0 <_sbrk+0x18>)
 80072b2:	6019      	str	r1, [r3, #0]
 80072b4:	6818      	ldr	r0, [r3, #0]
 80072b6:	4402      	add	r2, r0
 80072b8:	601a      	str	r2, [r3, #0]
 80072ba:	4770      	bx	lr
 80072bc:	20001ae8 	.word	0x20001ae8
 80072c0:	20003c40 	.word	0x20003c40

080072c4 <_init>:
 80072c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c6:	bf00      	nop
 80072c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ca:	bc08      	pop	{r3}
 80072cc:	469e      	mov	lr, r3
 80072ce:	4770      	bx	lr

080072d0 <_fini>:
 80072d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072d2:	bf00      	nop
 80072d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072d6:	bc08      	pop	{r3}
 80072d8:	469e      	mov	lr, r3
 80072da:	4770      	bx	lr
